!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	447;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	453;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	456;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	460;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	462;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	464;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	468;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	471;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	474;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	479;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	482;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	485;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	490;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	493;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	496;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	499;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	502;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	505;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	508;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	511;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	514;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	517;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	522;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	525;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	528;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	531;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	534;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	537;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	540;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	432;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	435;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	438;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	441;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	447;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	449;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	453;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	456;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	459;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	464;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	467;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	470;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	475;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	478;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	481;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	484;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	487;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	490;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	493;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	496;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	499;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	502;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	507;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	510;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	513;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	516;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	519;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	522;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	525;"	d	file:
AType	./include/ncnn/vulkan_header_fix.h	/^    VkComponentTypeNV AType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
Allocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT Allocator$/;"	c	namespace:ncnn
Allocator	./include/ncnn/option.h	/^class Allocator;$/;"	x
BORDER_CONSTANT	./include/ncnn/mat.h	/^    BORDER_CONSTANT = 0,$/;"	e	enum:ncnn::BorderType
BORDER_REPLICATE	./include/ncnn/mat.h	/^    BORDER_REPLICATE = 1,$/;"	e	enum:ncnn::BorderType
BORDER_TRANSPARENT	./include/ncnn/mat.h	/^    BORDER_TRANSPARENT = -233,$/;"	e	enum:ncnn::BorderType
BType	./include/ncnn/vulkan_header_fix.h	/^    VkComponentTypeNV BType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
Blob	./include/ncnn/blob.h	/^    Blob();$/;"	p	class:ncnn::Blob	access:public	signature:()
Blob	./include/ncnn/blob.h	/^class NCNN_EXPORT Blob$/;"	c	namespace:ncnn
BorderType	./include/ncnn/mat.h	/^enum BorderType$/;"	g	namespace:ncnn
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	108;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	115;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	151;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	171;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	189;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	229;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	243;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	271;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	280;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	294;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	70;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	151;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	171;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	237;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	269;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	296;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	299;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_INTERNAL	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_INTERNAL	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	285;"	d	file:
COMPILER_VERSION_INTERNAL	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	290;"	d	file:
COMPILER_VERSION_INTERNAL	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
COMPILER_VERSION_INTERNAL	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
COMPILER_VERSION_INTERNAL	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	102;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	130;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	160;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	166;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	211;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	223;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	233;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	255;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	274;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	287;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	301;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	72;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	87;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	102;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	189;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	272;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	280;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	285;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	72;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	87;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	201;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	212;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	234;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	246;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	256;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	283;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	297;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	147;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	153;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	206;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	218;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	286;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	148;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	197;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	235;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	263;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	284;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	298;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	303;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	30;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	81;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	90;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	168;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	207;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	219;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	258;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	274;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	81;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	267;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	213;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	265;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
CType	./include/ncnn/vulkan_header_fix.h	/^    VkComponentTypeNV CType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
CV_32FC1	./include/ncnn/simpleocv.h	243;"	d
CV_8UC1	./include/ncnn/simpleocv.h	240;"	d
CV_8UC3	./include/ncnn/simpleocv.h	241;"	d
CV_8UC4	./include/ncnn/simpleocv.h	242;"	d
CV_IMWRITE_JPEG_QUALITY	./include/ncnn/simpleocv.h	/^    CV_IMWRITE_JPEG_QUALITY = 1$/;"	e	enum:__anon2
CV_LOAD_IMAGE_COLOR	./include/ncnn/simpleocv.h	/^    CV_LOAD_IMAGE_COLOR = 1,$/;"	e	enum:__anon1
CV_LOAD_IMAGE_GRAYSCALE	./include/ncnn/simpleocv.h	/^    CV_LOAD_IMAGE_GRAYSCALE = 0,$/;"	e	enum:__anon1
CV_LOAD_IMAGE_UNCHANGED	./include/ncnn/simpleocv.h	/^    CV_LOAD_IMAGE_UNCHANGED = -1,$/;"	e	enum:__anon1
CXX_STD	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	608;"	d	file:
CXX_STD	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	610;"	d	file:
CXX_STD	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	613;"	d	file:
CXX_STD	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	616;"	d	file:
CXX_STD	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	618;"	d	file:
C_DIALECT	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	623;"	d	file:
C_DIALECT	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	625;"	d	file:
C_DIALECT	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	628;"	d	file:
C_DIALECT	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	630;"	d	file:
C_DIALECT	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	632;"	d	file:
ConditionVariable	./include/ncnn/platform.h	/^    ConditionVariable() { InitializeConditionVariable(&condvar); }$/;"	f	class:ncnn::ConditionVariable	access:public	signature:()
ConditionVariable	./include/ncnn/platform.h	/^    friend class ConditionVariable;$/;"	x
ConditionVariable	./include/ncnn/platform.h	/^class NCNN_EXPORT ConditionVariable$/;"	c	namespace:ncnn
CpuSet	./include/ncnn/cpu.h	/^    CpuSet();$/;"	p	class:ncnn::CpuSet	access:public	signature:()
CpuSet	./include/ncnn/cpu.h	/^class NCNN_EXPORT CpuSet$/;"	c	namespace:ncnn
CustomBit	./include/ncnn/layer_type.h	/^    CustomBit = (1 << 8),$/;"	e	enum:ncnn::LayerType::LayerType
DEC	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	544;"	d	file:
DEC	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	529;"	d	file:
DEFINE_LAYER_CREATOR	./include/ncnn/layer.h	201;"	d
DEFINE_LAYER_DESTROYER	./include/ncnn/layer.h	207;"	d
DEFINE_NO_DEPRECATED	./include/ncnn/ncnn_export.h	36;"	d
DType	./include/ncnn/vulkan_header_fix.h	/^    VkComponentTypeNV DType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
DataReader	./include/ncnn/datareader.h	/^    DataReader();$/;"	p	class:ncnn::DataReader	access:public	signature:()
DataReader	./include/ncnn/datareader.h	/^class NCNN_EXPORT DataReader$/;"	c	namespace:ncnn
DataReader	./include/ncnn/modelbin.h	/^class DataReader;$/;"	x
DataReader	./include/ncnn/net.h	/^class DataReader;$/;"	x
DataReader	./include/ncnn/paramdict.h	/^class DataReader;$/;"	x
DataReaderFromAndroidAsset	./include/ncnn/datareader.h	/^    DataReaderFromAndroidAsset(const DataReaderFromAndroidAsset&);$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:private	signature:(const DataReaderFromAndroidAsset&)
DataReaderFromAndroidAsset	./include/ncnn/datareader.h	/^    explicit DataReaderFromAndroidAsset(AAsset* asset);$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:public	signature:(AAsset* asset)
DataReaderFromAndroidAsset	./include/ncnn/datareader.h	/^class NCNN_EXPORT DataReaderFromAndroidAsset : public DataReader$/;"	c	namespace:ncnn	inherits:DataReader
DataReaderFromAndroidAssetPrivate	./include/ncnn/datareader.h	/^class DataReaderFromAndroidAssetPrivate;$/;"	x
DataReaderFromMemory	./include/ncnn/datareader.h	/^    DataReaderFromMemory(const DataReaderFromMemory&);$/;"	p	class:ncnn::DataReaderFromMemory	access:private	signature:(const DataReaderFromMemory&)
DataReaderFromMemory	./include/ncnn/datareader.h	/^    explicit DataReaderFromMemory(const unsigned char*& mem);$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:(const unsigned char*& mem)
DataReaderFromMemory	./include/ncnn/datareader.h	/^class NCNN_EXPORT DataReaderFromMemory : public DataReader$/;"	c	namespace:ncnn	inherits:DataReader
DataReaderFromMemoryPrivate	./include/ncnn/datareader.h	/^class DataReaderFromMemoryPrivate;$/;"	x
DataReaderFromStdio	./include/ncnn/datareader.h	/^    DataReaderFromStdio(const DataReaderFromStdio&);$/;"	p	class:ncnn::DataReaderFromStdio	access:private	signature:(const DataReaderFromStdio&)
DataReaderFromStdio	./include/ncnn/datareader.h	/^    explicit DataReaderFromStdio(FILE* fp);$/;"	p	class:ncnn::DataReaderFromStdio	access:public	signature:(FILE* fp)
DataReaderFromStdio	./include/ncnn/datareader.h	/^class NCNN_EXPORT DataReaderFromStdio : public DataReader$/;"	c	namespace:ncnn	inherits:DataReader
DataReaderFromStdioPrivate	./include/ncnn/datareader.h	/^class DataReaderFromStdioPrivate;$/;"	x
Extractor	./include/ncnn/net.h	/^    Extractor(const Extractor&);$/;"	p	class:ncnn::Extractor	access:public	signature:(const Extractor&)
Extractor	./include/ncnn/net.h	/^    Extractor(const Net* net, size_t blob_count);$/;"	p	class:ncnn::Extractor	access:protected	signature:(const Net* net, size_t blob_count)
Extractor	./include/ncnn/net.h	/^    friend class Extractor;$/;"	x
Extractor	./include/ncnn/net.h	/^class Extractor;$/;"	x
Extractor	./include/ncnn/net.h	/^class NCNN_EXPORT Extractor$/;"	c	namespace:ncnn
ExtractorPrivate	./include/ncnn/net.h	/^class ExtractorPrivate;$/;"	x
FB_DEV	./src/FastestDet.cpp	334;"	d	file:
FILLED	./include/ncnn/simpleocv.h	/^    FILLED = -1$/;"	e	enum:cv::__anon3
FONT_HERSHEY_SIMPLEX	./include/ncnn/simpleocv.h	/^    FONT_HERSHEY_SIMPLEX = 0$/;"	e	enum:cv::__anon4
FRAMEBUFFER_COUNT	./src/FastestDet.cpp	335;"	d	file:
FastestDet	./src/FastestDet.cpp	/^    FastestDet(const  char*  model_bin,const  char*  model_param);$/;"	p	class:FastestDet	file:	access:public	signature:(const char* model_bin,const char* model_param)
FastestDet	./src/FastestDet.cpp	/^FastestDet::FastestDet(const  char*  model_bin,const  char*  model_param)$/;"	f	class:FastestDet	signature:(const char* model_bin,const char* model_param)
FastestDet	./src/FastestDet.cpp	/^class FastestDet$/;"	c	file:
FastestDet::FastestDet	./src/FastestDet.cpp	/^    FastestDet(const  char*  model_bin,const  char*  model_param);$/;"	p	class:FastestDet	file:	access:public	signature:(const char* model_bin,const char* model_param)
FastestDet::FastestDet	./src/FastestDet.cpp	/^FastestDet::FastestDet(const  char*  model_bin,const  char*  model_param)$/;"	f	class:FastestDet	signature:(const char* model_bin,const char* model_param)
FastestDet::_net	./src/FastestDet.cpp	/^    ncnn::Net _net;$/;"	m	class:FastestDet	file:	access:private
FastestDet::class_names	./src/FastestDet.cpp	/^    vector<string> class_names;$/;"	m	class:FastestDet	file:	access:private
FastestDet::confThreshold	./src/FastestDet.cpp	/^    float confThreshold;$/;"	m	class:FastestDet	file:	access:private
FastestDet::detect	./src/FastestDet.cpp	/^    vector<Object> detect(Mat frame);$/;"	p	class:FastestDet	file:	access:public	signature:(Mat frame)
FastestDet::detect	./src/FastestDet.cpp	/^vector<Object> FastestDet::detect(Mat frame)$/;"	f	class:FastestDet	signature:(Mat frame)
FastestDet::drawPred	./src/FastestDet.cpp	/^    void drawPred(float conf, int left, int top, int right, int bottom, Mat& frame, int classid);$/;"	p	class:FastestDet	file:	access:private	signature:(float conf, int left, int top, int right, int bottom, Mat& frame, int classid)
FastestDet::inpHeight	./src/FastestDet.cpp	/^    const int inpHeight = 512;$/;"	m	class:FastestDet	file:	access:private
FastestDet::inpWidth	./src/FastestDet.cpp	/^    const int inpWidth = 512;$/;"	m	class:FastestDet	file:	access:private
FastestDet::intersection_area	./src/FastestDet.cpp	/^    inline float intersection_area(const Object& a, const Object& b);$/;"	p	class:FastestDet	file:	access:private	signature:(const Object& a, const Object& b)
FastestDet::intersection_area	./src/FastestDet.cpp	/^inline float FastestDet::intersection_area(const Object& a, const Object& b)$/;"	f	class:FastestDet	signature:(const Object& a, const Object& b)
FastestDet::nmsThreshold	./src/FastestDet.cpp	/^    float nmsThreshold;$/;"	m	class:FastestDet	file:	access:private
FastestDet::nms_sorted_bboxes	./src/FastestDet.cpp	/^    void nms_sorted_bboxes(const std::vector<Object>& faceobjects, std::vector<int>& picked, float nms_threshold);$/;"	p	class:FastestDet	file:	access:private	signature:(const std::vector<Object>& faceobjects, std::vector<int>& picked, float nms_threshold)
FastestDet::nms_sorted_bboxes	./src/FastestDet.cpp	/^void FastestDet::nms_sorted_bboxes(const std::vector<Object>& faceobjects, std::vector<int>& picked, float nms_threshold)$/;"	f	class:FastestDet	signature:(const std::vector<Object>& faceobjects, std::vector<int>& picked, float nms_threshold)
FastestDet::num_class	./src/FastestDet.cpp	/^    int num_class;$/;"	m	class:FastestDet	file:	access:private
FastestDet::qsort_descent_inplace	./src/FastestDet.cpp	/^    void qsort_descent_inplace(std::vector<Object>& faceobjects);$/;"	p	class:FastestDet	file:	access:private	signature:(std::vector<Object>& faceobjects)
FastestDet::qsort_descent_inplace	./src/FastestDet.cpp	/^    void qsort_descent_inplace(std::vector<Object>& faceobjects, int left, int right);$/;"	p	class:FastestDet	file:	access:private	signature:(std::vector<Object>& faceobjects, int left, int right)
FastestDet::qsort_descent_inplace	./src/FastestDet.cpp	/^void FastestDet::qsort_descent_inplace(std::vector<Object>& faceobjects)$/;"	f	class:FastestDet	signature:(std::vector<Object>& faceobjects)
FastestDet::qsort_descent_inplace	./src/FastestDet.cpp	/^void FastestDet::qsort_descent_inplace(std::vector<Object>& faceobjects, int left, int right)$/;"	f	class:FastestDet	signature:(std::vector<Object>& faceobjects, int left, int right)
GpuInfo	./include/ncnn/gpu.h	/^    GpuInfo(const GpuInfo&);$/;"	p	class:ncnn::GpuInfo	access:private	signature:(const GpuInfo&)
GpuInfo	./include/ncnn/gpu.h	/^    explicit GpuInfo();$/;"	p	class:ncnn::GpuInfo	access:public	signature:()
GpuInfo	./include/ncnn/gpu.h	/^class NCNN_EXPORT GpuInfo$/;"	c	namespace:ncnn
GpuInfoPrivate	./include/ncnn/gpu.h	/^class GpuInfoPrivate;$/;"	x
HEX	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	555;"	d	file:
HEX	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	540;"	d	file:
ID_VOID_MAIN	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IMREAD_COLOR	./include/ncnn/simpleocv.h	/^    IMREAD_COLOR = 1$/;"	e	enum:cv::ImreadModes
IMREAD_GRAYSCALE	./include/ncnn/simpleocv.h	/^    IMREAD_GRAYSCALE = 0,$/;"	e	enum:cv::ImreadModes
IMREAD_UNCHANGED	./include/ncnn/simpleocv.h	/^    IMREAD_UNCHANGED = -1,$/;"	e	enum:cv::ImreadModes
IMWRITE_JPEG_QUALITY	./include/ncnn/simpleocv.h	/^    IMWRITE_JPEG_QUALITY = 1$/;"	e	enum:cv::ImwriteFlags
ImportAndroidHardwareBufferPipeline	./include/ncnn/command.h	/^class ImportAndroidHardwareBufferPipeline;$/;"	x
ImportAndroidHardwareBufferPipeline	./include/ncnn/pipeline.h	/^    explicit ImportAndroidHardwareBufferPipeline(const VulkanDevice* vkdev);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:(const VulkanDevice* vkdev)
ImportAndroidHardwareBufferPipeline	./include/ncnn/pipeline.h	/^class NCNN_EXPORT ImportAndroidHardwareBufferPipeline : private Pipeline$/;"	c	namespace:ncnn	inherits:Pipeline
ImreadModes	./include/ncnn/simpleocv.h	/^enum ImreadModes$/;"	g	namespace:cv
ImwriteFlags	./include/ncnn/simpleocv.h	/^enum ImwriteFlags$/;"	g	namespace:cv
KSize	./include/ncnn/vulkan_header_fix.h	/^    uint32_t KSize;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
Layer	./include/ncnn/layer.h	/^    Layer();$/;"	p	class:ncnn::Layer	access:public	signature:()
Layer	./include/ncnn/layer.h	/^class NCNN_EXPORT Layer$/;"	c	namespace:ncnn
LayerShaderType	./include/ncnn/layer_shader_type.h	/^enum LayerShaderType$/;"	g	namespace:ncnn::LayerShaderType
LayerShaderType	./include/ncnn/layer_shader_type.h	/^namespace LayerShaderType {$/;"	n	namespace:ncnn
LayerType	./include/ncnn/layer_type.h	/^enum LayerType$/;"	g	namespace:ncnn::LayerType
LayerType	./include/ncnn/layer_type.h	/^namespace LayerType {$/;"	n	namespace:ncnn
MSize	./include/ncnn/vulkan_header_fix.h	/^    uint32_t MSize;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
Mat	./include/ncnn/mat.h	/^    Mat();$/;"	p	class:ncnn::Mat	access:public	signature:()
Mat	./include/ncnn/mat.h	/^    Mat(const Mat& m);$/;"	p	class:ncnn::Mat	access:public	signature:(const Mat& m)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int c, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, size_t elemsize = 4u, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int c, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int c, void* data, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, void* data, size_t elemsize = 4u, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int c, void* data, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, void* data, size_t elemsize, int elempack, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int d, int c, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, size_t elemsize = 4u, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int d, int c, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int d, int c, void* data, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, void* data, size_t elemsize = 4u, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int d, int c, void* data, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, void* data, size_t elemsize, int elempack, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, size_t elemsize = 4u, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, size_t elemsize, int elempack, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, void* data, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, void* data, size_t elemsize = 4u, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, void* data, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, void* data, size_t elemsize, int elempack, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, size_t elemsize = 4u, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, size_t elemsize, int elempack, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, void* data, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, void* data, size_t elemsize = 4u, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^    Mat(int w, void* data, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, void* data, size_t elemsize, int elempack, Allocator* allocator = 0)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat()$/;"	f	class:ncnn::Mat	signature:()
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(const Mat& m)$/;"	f	class:ncnn::Mat	signature:(const Mat& m)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _c, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _c, size_t _elemsize, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _c, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _c, size_t _elemsize, int _elempack, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _c, void* _data, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _c, void* _data, size_t _elemsize, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _c, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _c, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _d, int _c, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _d, int _c, void* _data, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _d, int _c, void* _data, size_t _elemsize, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _d, int _c, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _d, int _c, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, size_t _elemsize, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, size_t _elemsize, int _elempack, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, void* _data, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, void* _data, size_t _elemsize, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, size_t _elemsize, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, size_t _elemsize, int _elempack, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, void* _data, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, void* _data, size_t _elemsize, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)
Mat	./include/ncnn/mat.h	/^class NCNN_EXPORT Mat$/;"	c	namespace:ncnn
Mat	./include/ncnn/simpleocv.h	/^    Mat()$/;"	f	struct:cv::Mat	access:public	signature:()
Mat	./include/ncnn/simpleocv.h	/^    Mat(const Mat& m)$/;"	f	struct:cv::Mat	access:public	signature:(const Mat& m)
Mat	./include/ncnn/simpleocv.h	/^    Mat(int _rows, int _cols, int flags)$/;"	f	struct:cv::Mat	access:public	signature:(int _rows, int _cols, int flags)
Mat	./include/ncnn/simpleocv.h	/^    Mat(int _rows, int _cols, int flags, void* _data)$/;"	f	struct:cv::Mat	access:public	signature:(int _rows, int _cols, int flags, void* _data)
Mat	./include/ncnn/simpleocv.h	/^struct NCNN_EXPORT Mat$/;"	s	namespace:cv
ModelBin	./include/ncnn/modelbin.h	/^    ModelBin();$/;"	p	class:ncnn::ModelBin	access:public	signature:()
ModelBin	./include/ncnn/modelbin.h	/^class NCNN_EXPORT ModelBin$/;"	c	namespace:ncnn
ModelBinFromDataReader	./include/ncnn/modelbin.h	/^    ModelBinFromDataReader(const ModelBinFromDataReader&);$/;"	p	class:ncnn::ModelBinFromDataReader	access:private	signature:(const ModelBinFromDataReader&)
ModelBinFromDataReader	./include/ncnn/modelbin.h	/^    explicit ModelBinFromDataReader(const DataReader& dr);$/;"	p	class:ncnn::ModelBinFromDataReader	access:public	signature:(const DataReader& dr)
ModelBinFromDataReader	./include/ncnn/modelbin.h	/^class NCNN_EXPORT ModelBinFromDataReader : public ModelBin$/;"	c	namespace:ncnn	inherits:ModelBin
ModelBinFromDataReaderPrivate	./include/ncnn/modelbin.h	/^class ModelBinFromDataReaderPrivate;$/;"	x
ModelBinFromMatArray	./include/ncnn/modelbin.h	/^    ModelBinFromMatArray(const ModelBinFromMatArray&);$/;"	p	class:ncnn::ModelBinFromMatArray	access:private	signature:(const ModelBinFromMatArray&)
ModelBinFromMatArray	./include/ncnn/modelbin.h	/^    explicit ModelBinFromMatArray(const Mat* weights);$/;"	p	class:ncnn::ModelBinFromMatArray	access:public	signature:(const Mat* weights)
ModelBinFromMatArray	./include/ncnn/modelbin.h	/^class NCNN_EXPORT ModelBinFromMatArray : public ModelBin$/;"	c	namespace:ncnn	inherits:ModelBin
ModelBinFromMatArrayPrivate	./include/ncnn/modelbin.h	/^class ModelBinFromMatArrayPrivate;$/;"	x
Mutex	./include/ncnn/platform.h	/^    Mutex() { InitializeSRWLock(&srwlock); }$/;"	f	class:ncnn::Mutex	access:public	signature:()
Mutex	./include/ncnn/platform.h	/^class NCNN_EXPORT Mutex$/;"	c	namespace:ncnn
MutexLockGuard	./include/ncnn/platform.h	/^    MutexLockGuard(Mutex& _mutex) : mutex(_mutex) { mutex.lock(); }$/;"	f	class:ncnn::MutexLockGuard	access:public	signature:(Mutex& _mutex)
MutexLockGuard	./include/ncnn/platform.h	/^class NCNN_EXPORT MutexLockGuard$/;"	c	namespace:ncnn
NCNN_ALLOCATOR_H	./include/ncnn/allocator.h	16;"	d
NCNN_ARM82	./include/ncnn/platform.h	41;"	d
NCNN_ARM82DOT	./include/ncnn/platform.h	42;"	d
NCNN_AVX	./include/ncnn/platform.h	33;"	d
NCNN_AVX2	./include/ncnn/platform.h	37;"	d
NCNN_AVX512	./include/ncnn/platform.h	39;"	d
NCNN_AVX512VNNI	./include/ncnn/platform.h	40;"	d
NCNN_AVXVNNI	./include/ncnn/platform.h	38;"	d
NCNN_BENCHMARK	./include/ncnn/platform.h	24;"	d
NCNN_BENCHMARK_H	./include/ncnn/benchmark.h	16;"	d
NCNN_BF16	./include/ncnn/platform.h	47;"	d
NCNN_BLOB_H	./include/ncnn/blob.h	16;"	d
NCNN_COMMAND_H	./include/ncnn/command.h	16;"	d
NCNN_CPU_H	./include/ncnn/cpu.h	16;"	d
NCNN_C_API	./include/ncnn/platform.h	25;"	d
NCNN_C_API_H	./include/ncnn/c_api.h	17;"	d
NCNN_DATAREADER_H	./include/ncnn/datareader.h	16;"	d
NCNN_DEPRECATED	./include/ncnn/ncnn_export.h	25;"	d
NCNN_DEPRECATED_EXPORT	./include/ncnn/ncnn_export.h	29;"	d
NCNN_DEPRECATED_NO_EXPORT	./include/ncnn/ncnn_export.h	33;"	d
NCNN_EXPORT	./include/ncnn/ncnn_export.h	12;"	d
NCNN_EXPORT	./include/ncnn/ncnn_export.h	15;"	d
NCNN_EXPORT	./include/ncnn/ncnn_export.h	6;"	d
NCNN_EXPORT_H	./include/ncnn/ncnn_export.h	3;"	d
NCNN_F16C	./include/ncnn/platform.h	36;"	d
NCNN_FMA	./include/ncnn/platform.h	35;"	d
NCNN_FORCEINLINE	./include/ncnn/platform.h	254;"	d
NCNN_FORCE_INLINE	./include/ncnn/platform.h	48;"	d
NCNN_GPU_H	./include/ncnn/gpu.h	16;"	d
NCNN_INT8	./include/ncnn/platform.h	46;"	d
NCNN_LAYER_H	./include/ncnn/layer.h	16;"	d
NCNN_LAYER_SHADER_TYPE_H	./include/ncnn/layer_shader_type.h	16;"	d
NCNN_LAYER_TYPE_H	./include/ncnn/layer_type.h	16;"	d
NCNN_LOGE	./include/ncnn/platform.h	239;"	d
NCNN_MALLOC_ALIGN	./include/ncnn/allocator.h	41;"	d
NCNN_MALLOC_OVERREAD	./include/ncnn/allocator.h	49;"	d
NCNN_MAT_H	./include/ncnn/mat.h	16;"	d
NCNN_MAT_PIXEL_BGR	./include/ncnn/c_api.h	103;"	d
NCNN_MAT_PIXEL_BGRA	./include/ncnn/c_api.h	106;"	d
NCNN_MAT_PIXEL_GRAY	./include/ncnn/c_api.h	104;"	d
NCNN_MAT_PIXEL_RGB	./include/ncnn/c_api.h	102;"	d
NCNN_MAT_PIXEL_RGBA	./include/ncnn/c_api.h	105;"	d
NCNN_MAT_PIXEL_X2Y	./include/ncnn/c_api.h	107;"	d
NCNN_MAX_PARAM_COUNT	./include/ncnn/paramdict.h	21;"	d
NCNN_MMI	./include/ncnn/platform.h	44;"	d
NCNN_MODELBIN_H	./include/ncnn/modelbin.h	16;"	d
NCNN_MSA	./include/ncnn/platform.h	43;"	d
NCNN_NET_H	./include/ncnn/net.h	16;"	d
NCNN_NO_DEPRECATED	./include/ncnn/ncnn_export.h	38;"	d
NCNN_NO_EXPORT	./include/ncnn/ncnn_export.h	20;"	d
NCNN_NO_EXPORT	./include/ncnn/ncnn_export.h	7;"	d
NCNN_OPTION_H	./include/ncnn/option.h	16;"	d
NCNN_PARAMDICT_H	./include/ncnn/paramdict.h	16;"	d
NCNN_PIPELINECACHE_H	./include/ncnn/pipelinecache.h	16;"	d
NCNN_PIPELINE_H	./include/ncnn/pipeline.h	16;"	d
NCNN_PIXEL	./include/ncnn/platform.h	27;"	d
NCNN_PIXEL_AFFINE	./include/ncnn/platform.h	29;"	d
NCNN_PIXEL_DRAWING	./include/ncnn/platform.h	30;"	d
NCNN_PIXEL_ROTATE	./include/ncnn/platform.h	28;"	d
NCNN_PLATFORM_API	./include/ncnn/platform.h	26;"	d
NCNN_PLATFORM_H	./include/ncnn/platform.h	16;"	d
NCNN_RUNTIME_CPU	./include/ncnn/platform.h	32;"	d
NCNN_RVV	./include/ncnn/platform.h	45;"	d
NCNN_SIMPLEOCV	./include/ncnn/platform.h	20;"	d
NCNN_SIMPLEOCV_H	./include/ncnn/simpleocv.h	16;"	d
NCNN_SIMPLEOMP	./include/ncnn/platform.h	21;"	d
NCNN_SIMPLEOMP_H	./include/ncnn/simpleomp.h	16;"	d
NCNN_SIMPLESTL	./include/ncnn/platform.h	22;"	d
NCNN_SIMPLESTL_H	./include/ncnn/simplestl.h	16;"	d
NCNN_STDIO	./include/ncnn/platform.h	18;"	d
NCNN_STRING	./include/ncnn/platform.h	19;"	d
NCNN_THREADS	./include/ncnn/platform.h	23;"	d
NCNN_VERSION_STRING	./include/ncnn/platform.h	50;"	d
NCNN_VULKAN	./include/ncnn/platform.h	31;"	d
NCNN_VULKAN_HEADER_FIX_H	./include/ncnn/vulkan_header_fix.h	16;"	d
NCNN_XADD	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE int NCNN_XADD(int* addr, int delta)$/;"	f	namespace:ncnn	signature:(int* addr, int delta)
NCNN_XADD	./include/ncnn/allocator.h	119;"	d
NCNN_XADD	./include/ncnn/allocator.h	123;"	d
NCNN_XADD	./include/ncnn/allocator.h	125;"	d
NCNN_XADD	./include/ncnn/allocator.h	130;"	d
NCNN_XADD	./include/ncnn/allocator.h	132;"	d
NCNN_XADD	./include/ncnn/allocator.h	136;"	d
NCNN_XOP	./include/ncnn/platform.h	34;"	d
NSize	./include/ncnn/vulkan_header_fix.h	/^    uint32_t NSize;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
Net	./include/ncnn/net.h	/^    Net();$/;"	p	class:ncnn::Net	access:public	signature:()
Net	./include/ncnn/net.h	/^    Net(const Net&);$/;"	p	class:ncnn::Net	access:private	signature:(const Net&)
Net	./include/ncnn/net.h	/^class NCNN_EXPORT Net$/;"	c	namespace:ncnn
Net	./include/ncnn/paramdict.h	/^    friend class Net;$/;"	x
Net	./include/ncnn/paramdict.h	/^class Net;$/;"	x
NetPrivate	./include/ncnn/net.h	/^class NetPrivate;$/;"	x
Object	./src/FastestDet.cpp	/^struct Object$/;"	s	file:
Object::angle	./src/FastestDet.cpp	/^    std::vector<float>angle;$/;"	m	struct:Object	file:	access:public
Object::class_name	./src/FastestDet.cpp	/^    std::string class_name;  \/\/类别标签$/;"	m	struct:Object	file:	access:public
Object::crop_rect	./src/FastestDet.cpp	/^    cv::Rect crop_rect;$/;"	m	struct:Object	file:	access:public
Object::distance_to_my_car	./src/FastestDet.cpp	/^    float distance_to_my_car;$/;"	m	struct:Object	file:	access:public
Object::label	./src/FastestDet.cpp	/^    int label;$/;"	m	struct:Object	file:	access:public
Object::landmark	./src/FastestDet.cpp	/^    std::vector<cv::Point2d>landmark;$/;"	m	struct:Object	file:	access:public
Object::prob	./src/FastestDet.cpp	/^    float prob;$/;"	m	struct:Object	file:	access:public
Object::rect	./src/FastestDet.cpp	/^    cv::Rect  rect;$/;"	m	struct:Object	file:	access:public
Object::track_id	./src/FastestDet.cpp	/^    int track_id;$/;"	m	struct:Object	file:	access:public
Option	./include/ncnn/gpu.h	/^class Option;$/;"	x
Option	./include/ncnn/option.h	/^    Option();$/;"	p	class:ncnn::Option	access:public	signature:()
Option	./include/ncnn/option.h	/^class NCNN_EXPORT Option$/;"	c	namespace:ncnn
Option	./include/ncnn/pipeline.h	/^class Option;$/;"	x
PFN_vkCmdBeginRenderPass2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef void(VKAPI_PTR* PFN_vkCmdBeginRenderPass2KHR)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfoKHR* pSubpassBeginInfo);$/;"	t
PFN_vkCmdEndRenderPass2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef void(VKAPI_PTR* PFN_vkCmdEndRenderPass2KHR)(VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR* pSubpassEndInfo);$/;"	t
PFN_vkCmdNextSubpass2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef void(VKAPI_PTR* PFN_vkCmdNextSubpass2KHR)(VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR* pSubpassBeginInfo, const VkSubpassEndInfoKHR* pSubpassEndInfo);$/;"	t
PFN_vkCreateRenderPass2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef VkResult(VKAPI_PTR* PFN_vkCreateRenderPass2KHR)(VkDevice device, const VkRenderPassCreateInfo2KHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);$/;"	t
PFN_vkGetDescriptorSetLayoutSupportKHR	./include/ncnn/vulkan_header_fix.h	/^typedef void(VKAPI_PTR* PFN_vkGetDescriptorSetLayoutSupportKHR)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport);$/;"	t
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV	./include/ncnn/vulkan_header_fix.h	/^typedef VkResult(VKAPI_PTR* PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties);$/;"	t
PIXEL_BGR	./include/ncnn/mat.h	/^        PIXEL_BGR = 2,$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGR2BGRA	./include/ncnn/mat.h	/^        PIXEL_BGR2BGRA = PIXEL_BGR | (PIXEL_BGRA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGR2GRAY	./include/ncnn/mat.h	/^        PIXEL_BGR2GRAY = PIXEL_BGR | (PIXEL_GRAY << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGR2RGB	./include/ncnn/mat.h	/^        PIXEL_BGR2RGB = PIXEL_BGR | (PIXEL_RGB << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGR2RGBA	./include/ncnn/mat.h	/^        PIXEL_BGR2RGBA = PIXEL_BGR | (PIXEL_RGBA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGRA	./include/ncnn/mat.h	/^        PIXEL_BGRA = 5,$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGRA2BGR	./include/ncnn/mat.h	/^        PIXEL_BGRA2BGR = PIXEL_BGRA | (PIXEL_BGR << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGRA2GRAY	./include/ncnn/mat.h	/^        PIXEL_BGRA2GRAY = PIXEL_BGRA | (PIXEL_GRAY << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGRA2RGB	./include/ncnn/mat.h	/^        PIXEL_BGRA2RGB = PIXEL_BGRA | (PIXEL_RGB << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_BGRA2RGBA	./include/ncnn/mat.h	/^        PIXEL_BGRA2RGBA = PIXEL_BGRA | (PIXEL_RGBA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_CONVERT_MASK	./include/ncnn/mat.h	/^        PIXEL_CONVERT_MASK = 0xffff0000,$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_CONVERT_SHIFT	./include/ncnn/mat.h	/^        PIXEL_CONVERT_SHIFT = 16,$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_FORMAT_MASK	./include/ncnn/mat.h	/^        PIXEL_FORMAT_MASK = 0x0000ffff,$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_GRAY	./include/ncnn/mat.h	/^        PIXEL_GRAY = 3,$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_GRAY2BGR	./include/ncnn/mat.h	/^        PIXEL_GRAY2BGR = PIXEL_GRAY | (PIXEL_BGR << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_GRAY2BGRA	./include/ncnn/mat.h	/^        PIXEL_GRAY2BGRA = PIXEL_GRAY | (PIXEL_BGRA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_GRAY2RGB	./include/ncnn/mat.h	/^        PIXEL_GRAY2RGB = PIXEL_GRAY | (PIXEL_RGB << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_GRAY2RGBA	./include/ncnn/mat.h	/^        PIXEL_GRAY2RGBA = PIXEL_GRAY | (PIXEL_RGBA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGB	./include/ncnn/mat.h	/^        PIXEL_RGB = 1,$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGB2BGR	./include/ncnn/mat.h	/^        PIXEL_RGB2BGR = PIXEL_RGB | (PIXEL_BGR << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGB2BGRA	./include/ncnn/mat.h	/^        PIXEL_RGB2BGRA = PIXEL_RGB | (PIXEL_BGRA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGB2GRAY	./include/ncnn/mat.h	/^        PIXEL_RGB2GRAY = PIXEL_RGB | (PIXEL_GRAY << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGB2RGBA	./include/ncnn/mat.h	/^        PIXEL_RGB2RGBA = PIXEL_RGB | (PIXEL_RGBA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGBA	./include/ncnn/mat.h	/^        PIXEL_RGBA = 4,$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGBA2BGR	./include/ncnn/mat.h	/^        PIXEL_RGBA2BGR = PIXEL_RGBA | (PIXEL_BGR << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGBA2BGRA	./include/ncnn/mat.h	/^        PIXEL_RGBA2BGRA = PIXEL_RGBA | (PIXEL_BGRA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGBA2GRAY	./include/ncnn/mat.h	/^        PIXEL_RGBA2GRAY = PIXEL_RGBA | (PIXEL_GRAY << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PIXEL_RGBA2RGB	./include/ncnn/mat.h	/^        PIXEL_RGBA2RGB = PIXEL_RGBA | (PIXEL_RGB << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	339;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	342;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	345;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	348;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	351;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	354;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	357;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	360;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	363;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	366;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	384;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	387;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	390;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	393;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	405;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	412;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	415;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	418;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	421;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	424;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	429;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	432;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	436;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	363;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	366;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	369;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	372;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	375;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	378;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	381;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	384;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	387;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	390;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	393;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	400;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	406;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	414;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	417;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	421;"	d	file:
ParamDict	./include/ncnn/paramdict.h	/^    ParamDict();$/;"	p	class:ncnn::ParamDict	access:public	signature:()
ParamDict	./include/ncnn/paramdict.h	/^    ParamDict(const ParamDict&);$/;"	p	class:ncnn::ParamDict	access:public	signature:(const ParamDict&)
ParamDict	./include/ncnn/paramdict.h	/^class NCNN_EXPORT ParamDict$/;"	c	namespace:ncnn
ParamDictPrivate	./include/ncnn/paramdict.h	/^class ParamDictPrivate;$/;"	x
Pipeline	./include/ncnn/command.h	/^class Pipeline;$/;"	x
Pipeline	./include/ncnn/pipeline.h	/^    Pipeline(const Pipeline&);$/;"	p	class:ncnn::Pipeline	access:private	signature:(const Pipeline&)
Pipeline	./include/ncnn/pipeline.h	/^    explicit Pipeline(const VulkanDevice* vkdev);$/;"	p	class:ncnn::Pipeline	access:public	signature:(const VulkanDevice* vkdev)
Pipeline	./include/ncnn/pipeline.h	/^class NCNN_EXPORT Pipeline$/;"	c	namespace:ncnn
PipelineCache	./include/ncnn/gpu.h	/^class PipelineCache;$/;"	x
PipelineCache	./include/ncnn/option.h	/^class PipelineCache;$/;"	x
PipelineCache	./include/ncnn/pipelinecache.h	/^    PipelineCache(const PipelineCache&);$/;"	p	class:ncnn::PipelineCache	access:private	signature:(const PipelineCache&)
PipelineCache	./include/ncnn/pipelinecache.h	/^    explicit PipelineCache(const VulkanDevice* _vkdev);$/;"	p	class:ncnn::PipelineCache	access:public	signature:(const VulkanDevice* _vkdev)
PipelineCache	./include/ncnn/pipelinecache.h	/^class NCNN_EXPORT PipelineCache$/;"	c	namespace:ncnn
PipelineCachePrivate	./include/ncnn/pipelinecache.h	/^class PipelineCachePrivate;$/;"	x
PipelinePrivate	./include/ncnn/pipeline.h	/^class PipelinePrivate;$/;"	x
PixelType	./include/ncnn/mat.h	/^    enum PixelType$/;"	g	class:ncnn::Mat	access:public
Point	./include/ncnn/simpleocv.h	/^typedef Point_<int> Point;$/;"	t	namespace:cv
Point2f	./include/ncnn/simpleocv.h	/^typedef Point_<float> Point2f;$/;"	t	namespace:cv
Point_	./include/ncnn/simpleocv.h	/^    Point_()$/;"	f	struct:cv::Point_	access:public	signature:()
Point_	./include/ncnn/simpleocv.h	/^    Point_(_Tp _x, _Tp _y)$/;"	f	struct:cv::Point_	access:public	signature:(_Tp _x, _Tp _y)
Point_	./include/ncnn/simpleocv.h	/^struct Point_$/;"	s	namespace:cv
PoolAllocator	./include/ncnn/allocator.h	/^    PoolAllocator();$/;"	p	class:ncnn::PoolAllocator	access:public	signature:()
PoolAllocator	./include/ncnn/allocator.h	/^    PoolAllocator(const PoolAllocator&);$/;"	p	class:ncnn::PoolAllocator	access:private	signature:(const PoolAllocator&)
PoolAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT PoolAllocator : public Allocator$/;"	c	namespace:ncnn	inherits:Allocator
PoolAllocatorPrivate	./include/ncnn/allocator.h	/^class PoolAllocatorPrivate;$/;"	x
Rect	./include/ncnn/simpleocv.h	/^typedef Rect_<int> Rect;$/;"	t	namespace:cv
Rect2f	./include/ncnn/simpleocv.h	/^typedef Rect_<float> Rect2f;$/;"	t	namespace:cv
Rect_	./include/ncnn/simpleocv.h	/^    Rect_()$/;"	f	struct:cv::Rect_	access:public	signature:()
Rect_	./include/ncnn/simpleocv.h	/^    Rect_(Point_<_Tp> _p, Size_<_Tp> _size)$/;"	f	struct:cv::Rect_	access:public	signature:(Point_<_Tp> _p, Size_<_Tp> _size)
Rect_	./include/ncnn/simpleocv.h	/^    Rect_(_Tp _x, _Tp _y, _Tp _w, _Tp _h)$/;"	f	struct:cv::Rect_	access:public	signature:(_Tp _x, _Tp _y, _Tp _w, _Tp _h)
Rect_	./include/ncnn/simpleocv.h	/^struct Rect_$/;"	s	namespace:cv
SIMULATE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	209;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	21;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	203;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	216;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	238;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	217;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	d	file:
SIMULATE_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
SIMULATE_VERSION_PATCH	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
STRINGIFY	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
STRINGIFY	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	320;"	d	file:
STRINGIFY_HELPER	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	334;"	d	file:
STRINGIFY_HELPER	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	319;"	d	file:
Scalar	./include/ncnn/simpleocv.h	/^typedef Scalar_<uchar> Scalar;$/;"	t	namespace:cv
Scalar_	./include/ncnn/simpleocv.h	/^    Scalar_()$/;"	f	struct:cv::Scalar_	access:public	signature:()
Scalar_	./include/ncnn/simpleocv.h	/^    Scalar_(_Tp _v0)$/;"	f	struct:cv::Scalar_	access:public	signature:(_Tp _v0)
Scalar_	./include/ncnn/simpleocv.h	/^    Scalar_(_Tp _v0, _Tp _v1, _Tp _v2)$/;"	f	struct:cv::Scalar_	access:public	signature:(_Tp _v0, _Tp _v1, _Tp _v2)
Scalar_	./include/ncnn/simpleocv.h	/^    Scalar_(_Tp _v0, _Tp _v1, _Tp _v2, _Tp _v3)$/;"	f	struct:cv::Scalar_	access:public	signature:(_Tp _v0, _Tp _v1, _Tp _v2, _Tp _v3)
Scalar_	./include/ncnn/simpleocv.h	/^struct Scalar_$/;"	s	namespace:cv
ShaderInfo	./include/ncnn/gpu.h	/^class NCNN_EXPORT ShaderInfo$/;"	c	namespace:ncnn
Size	./include/ncnn/simpleocv.h	/^typedef Size_<int> Size;$/;"	t	namespace:cv
Size2f	./include/ncnn/simpleocv.h	/^typedef Size_<float> Size2f;$/;"	t	namespace:cv
Size_	./include/ncnn/simpleocv.h	/^    Size_()$/;"	f	struct:cv::Size_	access:public	signature:()
Size_	./include/ncnn/simpleocv.h	/^    Size_(_Tp _w, _Tp _h)$/;"	f	struct:cv::Size_	access:public	signature:(_Tp _w, _Tp _h)
Size_	./include/ncnn/simpleocv.h	/^struct Size_$/;"	s	namespace:cv
Thread	./include/ncnn/platform.h	/^    Thread(void* (*start)(void*), void* args = 0) { _start = start; _args = args; handle = (HANDLE)_beginthreadex(0, 0, start_wrapper, this, 0, 0); }$/;"	f	class:ncnn::Thread	access:public	signature:(void* (*start)(void*), void* args = 0)
Thread	./include/ncnn/platform.h	/^class NCNN_EXPORT Thread$/;"	c	namespace:ncnn
ThreadLocalStorage	./include/ncnn/platform.h	/^    ThreadLocalStorage() { key = TlsAlloc(); }$/;"	f	class:ncnn::ThreadLocalStorage	access:public	signature:()
ThreadLocalStorage	./include/ncnn/platform.h	/^class NCNN_EXPORT ThreadLocalStorage$/;"	c	namespace:ncnn
UnlockedPoolAllocator	./include/ncnn/allocator.h	/^    UnlockedPoolAllocator();$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:()
UnlockedPoolAllocator	./include/ncnn/allocator.h	/^    UnlockedPoolAllocator(const UnlockedPoolAllocator&);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:private	signature:(const UnlockedPoolAllocator&)
UnlockedPoolAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT UnlockedPoolAllocator : public Allocator$/;"	c	namespace:ncnn	inherits:Allocator
UnlockedPoolAllocatorPrivate	./include/ncnn/allocator.h	/^class UnlockedPoolAllocatorPrivate;$/;"	x
VK_COMPONENT_TYPE_BEGIN_RANGE_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_BEGIN_RANGE_NV = VK_COMPONENT_TYPE_FLOAT16_NV,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_END_RANGE_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_END_RANGE_NV = VK_COMPONENT_TYPE_UINT64_NV,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_FLOAT16_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_FLOAT16_NV = 0,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_FLOAT32_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_FLOAT32_NV = 1,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_FLOAT64_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_FLOAT64_NV = 2,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_MAX_ENUM_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_MAX_ENUM_NV = 0x7FFFFFFF$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_RANGE_SIZE_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_RANGE_SIZE_NV = (VK_COMPONENT_TYPE_UINT64_NV - VK_COMPONENT_TYPE_FLOAT16_NV + 1),$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_SINT16_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_SINT16_NV = 4,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_SINT32_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_SINT32_NV = 5,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_SINT64_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_SINT64_NV = 6,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_SINT8_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_SINT8_NV = 3,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_UINT16_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_UINT16_NV = 8,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_UINT32_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_UINT32_NV = 9,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_UINT64_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_UINT64_NV = 10,$/;"	e	enum:VkComponentTypeNV
VK_COMPONENT_TYPE_UINT8_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_COMPONENT_TYPE_UINT8_NV = 7,$/;"	e	enum:VkComponentTypeNV
VK_SCOPE_BEGIN_RANGE_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SCOPE_BEGIN_RANGE_NV = VK_SCOPE_DEVICE_NV,$/;"	e	enum:VkScopeNV
VK_SCOPE_DEVICE_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SCOPE_DEVICE_NV = 1,$/;"	e	enum:VkScopeNV
VK_SCOPE_END_RANGE_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SCOPE_END_RANGE_NV = VK_SCOPE_QUEUE_FAMILY_NV,$/;"	e	enum:VkScopeNV
VK_SCOPE_MAX_ENUM_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SCOPE_MAX_ENUM_NV = 0x7FFFFFFF$/;"	e	enum:VkScopeNV
VK_SCOPE_QUEUE_FAMILY_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SCOPE_QUEUE_FAMILY_NV = 5,$/;"	e	enum:VkScopeNV
VK_SCOPE_RANGE_SIZE_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SCOPE_RANGE_SIZE_NV = (VK_SCOPE_QUEUE_FAMILY_NV - VK_SCOPE_DEVICE_NV + 1),$/;"	e	enum:VkScopeNV
VK_SCOPE_SUBGROUP_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SCOPE_SUBGROUP_NV = 3,$/;"	e	enum:VkScopeNV
VK_SCOPE_WORKGROUP_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SCOPE_WORKGROUP_NV = 2,$/;"	e	enum:VkScopeNV
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR	./include/ncnn/vulkan_header_fix.h	77;"	d
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR	./include/ncnn/vulkan_header_fix.h	78;"	d
VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV	./include/ncnn/vulkan_header_fix.h	191;"	d
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT	./include/ncnn/vulkan_header_fix.h	48;"	d
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR	./include/ncnn/vulkan_header_fix.h	68;"	d
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV	./include/ncnn/vulkan_header_fix.h	190;"	d
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV	./include/ncnn/vulkan_header_fix.h	192;"	d
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR	./include/ncnn/vulkan_header_fix.h	168;"	d
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES	./include/ncnn/vulkan_header_fix.h	47;"	d
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT	./include/ncnn/vulkan_header_fix.h	179;"	d
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES	./include/ncnn/vulkan_header_fix.h	23;"	d
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR	./include/ncnn/vulkan_header_fix.h	81;"	d
VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR	./include/ncnn/vulkan_header_fix.h	82;"	d
VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR	./include/ncnn/vulkan_header_fix.h	80;"	d
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR	./include/ncnn/vulkan_header_fix.h	79;"	d
VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR	./include/ncnn/vulkan_header_fix.h	83;"	d
VK_SUBGROUP_FEATURE_ARITHMETIC_BIT	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_BALLOT_BIT	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_BASIC_BIT	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_BASIC_BIT = 0x00000001,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_CLUSTERED_BIT	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_QUAD_BIT	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_QUAD_BIT = 0x00000080,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_SHUFFLE_BIT	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_SUBGROUP_FEATURE_VOTE_BIT	./include/ncnn/vulkan_header_fix.h	/^    VK_SUBGROUP_FEATURE_VOTE_BIT = 0x00000002,$/;"	e	enum:VkSubgroupFeatureFlagBits
VK_USE_PLATFORM_ANDROID_KHR	./include/ncnn/platform.h	67;"	d
VkAllocator	./include/ncnn/allocator.h	/^    explicit VkAllocator(const VulkanDevice* _vkdev);$/;"	p	class:ncnn::VkAllocator	access:public	signature:(const VulkanDevice* _vkdev)
VkAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkAllocator$/;"	c	namespace:ncnn
VkAllocator	./include/ncnn/gpu.h	/^class VkAllocator;$/;"	x
VkAllocator	./include/ncnn/option.h	/^class VkAllocator;$/;"	x
VkAndroidHardwareBufferImageAllocator	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferImageAllocator(const VkAndroidHardwareBufferImageAllocator&);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:private	signature:(const VkAndroidHardwareBufferImageAllocator&)
VkAndroidHardwareBufferImageAllocator	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferImageAllocator(const VulkanDevice* _vkdev, AHardwareBuffer* _hb);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(const VulkanDevice* _vkdev, AHardwareBuffer* _hb)
VkAndroidHardwareBufferImageAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkAndroidHardwareBufferImageAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
VkAttachmentDescription2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkAttachmentDescription2KHR$/;"	s
VkAttachmentDescription2KHR	./include/ncnn/vulkan_header_fix.h	/^} VkAttachmentDescription2KHR;$/;"	t	typeref:struct:VkAttachmentDescription2KHR
VkAttachmentDescription2KHR::finalLayout	./include/ncnn/vulkan_header_fix.h	/^    VkImageLayout finalLayout;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::flags	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentDescriptionFlags flags;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::format	./include/ncnn/vulkan_header_fix.h	/^    VkFormat format;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::initialLayout	./include/ncnn/vulkan_header_fix.h	/^    VkImageLayout initialLayout;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::loadOp	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentLoadOp loadOp;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::samples	./include/ncnn/vulkan_header_fix.h	/^    VkSampleCountFlagBits samples;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::stencilLoadOp	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentLoadOp stencilLoadOp;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::stencilStoreOp	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentStoreOp stencilStoreOp;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentDescription2KHR::storeOp	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentStoreOp storeOp;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
VkAttachmentReference2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkAttachmentReference2KHR$/;"	s
VkAttachmentReference2KHR	./include/ncnn/vulkan_header_fix.h	/^} VkAttachmentReference2KHR;$/;"	t	typeref:struct:VkAttachmentReference2KHR
VkAttachmentReference2KHR::aspectMask	./include/ncnn/vulkan_header_fix.h	/^    VkImageAspectFlags aspectMask;$/;"	m	struct:VkAttachmentReference2KHR	access:public
VkAttachmentReference2KHR::attachment	./include/ncnn/vulkan_header_fix.h	/^    uint32_t attachment;$/;"	m	struct:VkAttachmentReference2KHR	access:public
VkAttachmentReference2KHR::layout	./include/ncnn/vulkan_header_fix.h	/^    VkImageLayout layout;$/;"	m	struct:VkAttachmentReference2KHR	access:public
VkAttachmentReference2KHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkAttachmentReference2KHR	access:public
VkAttachmentReference2KHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkAttachmentReference2KHR	access:public
VkBlobAllocator	./include/ncnn/allocator.h	/^    VkBlobAllocator(const VkBlobAllocator&);$/;"	p	class:ncnn::VkBlobAllocator	access:private	signature:(const VkBlobAllocator&)
VkBlobAllocator	./include/ncnn/allocator.h	/^    explicit VkBlobAllocator(const VulkanDevice* vkdev, size_t preferred_block_size = 16 * 1024 * 1024); \/\/ 16M$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(const VulkanDevice* vkdev, size_t preferred_block_size = 16 * 1024 * 1024)
VkBlobAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkBlobAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
VkBlobAllocatorPrivate	./include/ncnn/allocator.h	/^class VkBlobAllocatorPrivate;$/;"	x
VkBufferMemory	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkBufferMemory$/;"	c	namespace:ncnn
VkComponentTypeNV	./include/ncnn/vulkan_header_fix.h	/^typedef enum VkComponentTypeNV$/;"	g
VkComponentTypeNV	./include/ncnn/vulkan_header_fix.h	/^} VkComponentTypeNV;$/;"	t	typeref:enum:VkComponentTypeNV
VkCompute	./include/ncnn/command.h	/^    explicit VkCompute(const VulkanDevice* vkdev);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VulkanDevice* vkdev)
VkCompute	./include/ncnn/command.h	/^class NCNN_EXPORT VkCompute$/;"	c	namespace:ncnn
VkCompute	./include/ncnn/gpu.h	/^class VkCompute;$/;"	x
VkCompute	./include/ncnn/net.h	/^class VkCompute;$/;"	x
VkCompute	./include/ncnn/pipeline.h	/^    friend class VkCompute;$/;"	x
VkCompute	./include/ncnn/pipeline.h	/^class VkCompute;$/;"	x
VkComputePrivate	./include/ncnn/command.h	/^class VkComputePrivate;$/;"	x
VkCooperativeMatrixPropertiesNV	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkCooperativeMatrixPropertiesNV$/;"	s
VkCooperativeMatrixPropertiesNV	./include/ncnn/vulkan_header_fix.h	/^} VkCooperativeMatrixPropertiesNV;$/;"	t	typeref:struct:VkCooperativeMatrixPropertiesNV
VkCooperativeMatrixPropertiesNV::AType	./include/ncnn/vulkan_header_fix.h	/^    VkComponentTypeNV AType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::BType	./include/ncnn/vulkan_header_fix.h	/^    VkComponentTypeNV BType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::CType	./include/ncnn/vulkan_header_fix.h	/^    VkComponentTypeNV CType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::DType	./include/ncnn/vulkan_header_fix.h	/^    VkComponentTypeNV DType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::KSize	./include/ncnn/vulkan_header_fix.h	/^    uint32_t KSize;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::MSize	./include/ncnn/vulkan_header_fix.h	/^    uint32_t MSize;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::NSize	./include/ncnn/vulkan_header_fix.h	/^    uint32_t NSize;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkCooperativeMatrixPropertiesNV::scope	./include/ncnn/vulkan_header_fix.h	/^    VkScopeNV scope;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
VkDescriptorSetLayoutSupport	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkDescriptorSetLayoutSupport$/;"	s
VkDescriptorSetLayoutSupport	./include/ncnn/vulkan_header_fix.h	/^} VkDescriptorSetLayoutSupport;$/;"	t	typeref:struct:VkDescriptorSetLayoutSupport
VkDescriptorSetLayoutSupport::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkDescriptorSetLayoutSupport	access:public
VkDescriptorSetLayoutSupport::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkDescriptorSetLayoutSupport	access:public
VkDescriptorSetLayoutSupport::supported	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 supported;$/;"	m	struct:VkDescriptorSetLayoutSupport	access:public
VkDescriptorSetLayoutSupportKHR	./include/ncnn/vulkan_header_fix.h	/^typedef VkDescriptorSetLayoutSupport VkDescriptorSetLayoutSupportKHR;$/;"	t
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat();$/;"	p	class:ncnn::VkImageMat	access:public	signature:()
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(const VkImageMat& m);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const VkImageMat& m)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, VkImageMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, VkImageMemory* data, size_t elemsize, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, VkImageMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, VkImageMemory* data, size_t elemsize, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int c, VkImageMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, VkImageMemory* data, size_t elemsize, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int c, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, size_t elemsize, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int d, int c, VkImageMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, VkImageMemory* data, size_t elemsize, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int d, int c, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, size_t elemsize, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, size_t elemsize, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, size_t elemsize, int elempack, VkAllocator* allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat()$/;"	f	class:ncnn::VkImageMat	signature:()
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(const VkImageMat& m)$/;"	f	class:ncnn::VkImageMat	signature:(const VkImageMat& m)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _c, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _c, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _c, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _c, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _c, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _c, size_t _elemsize, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _d, int _c, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _d, int _c, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _d, int _c, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _d, int _c, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _d, int _c, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, size_t _elemsize, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, size_t _elemsize, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkImageMat	./include/ncnn/mat.h	/^class NCNN_EXPORT VkImageMat$/;"	c	namespace:ncnn
VkImageMat	./include/ncnn/mat.h	/^class VkImageMat;$/;"	x
VkImageMemory	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkImageMemory$/;"	c	namespace:ncnn
VkMat	./include/ncnn/mat.h	/^    VkMat();$/;"	p	class:ncnn::VkMat	access:public	signature:()
VkMat	./include/ncnn/mat.h	/^    VkMat(const VkMat& m);$/;"	p	class:ncnn::VkMat	access:public	signature:(const VkMat& m)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int c, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int c, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, size_t elemsize, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int d, int c, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int d, int c, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, size_t elemsize, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, size_t elemsize, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^    VkMat(int w, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, size_t elemsize, int elempack, VkAllocator* allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat()$/;"	f	class:ncnn::VkMat	signature:()
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(const VkMat& m)$/;"	f	class:ncnn::VkMat	signature:(const VkMat& m)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _c, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _c, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _c, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _c, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _c, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _c, size_t _elemsize, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _d, int _c, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _d, int _c, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _d, int _c, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _d, int _c, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _d, int _c, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, size_t _elemsize, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, size_t _elemsize, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, size_t _elemsize, int _elempack, VkAllocator* _allocator)
VkMat	./include/ncnn/mat.h	/^class NCNN_EXPORT VkMat$/;"	c	namespace:ncnn
VkMat	./include/ncnn/mat.h	/^class VkMat;$/;"	x
VkPhysicalDevice8BitStorageFeaturesKHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkPhysicalDevice8BitStorageFeaturesKHR$/;"	s
VkPhysicalDevice8BitStorageFeaturesKHR	./include/ncnn/vulkan_header_fix.h	/^} VkPhysicalDevice8BitStorageFeaturesKHR;$/;"	t	typeref:struct:VkPhysicalDevice8BitStorageFeaturesKHR
VkPhysicalDevice8BitStorageFeaturesKHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
VkPhysicalDevice8BitStorageFeaturesKHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
VkPhysicalDevice8BitStorageFeaturesKHR::storageBuffer8BitAccess	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 storageBuffer8BitAccess;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
VkPhysicalDevice8BitStorageFeaturesKHR::storagePushConstant8	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 storagePushConstant8;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
VkPhysicalDevice8BitStorageFeaturesKHR::uniformAndStorageBuffer8BitAccess	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 uniformAndStorageBuffer8BitAccess;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
VkPhysicalDeviceCooperativeMatrixFeaturesNV	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesNV$/;"	s
VkPhysicalDeviceCooperativeMatrixFeaturesNV	./include/ncnn/vulkan_header_fix.h	/^} VkPhysicalDeviceCooperativeMatrixFeaturesNV;$/;"	t	typeref:struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV
VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrix	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 cooperativeMatrix;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV	access:public
VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrixRobustBufferAccess	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 cooperativeMatrixRobustBufferAccess;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV	access:public
VkPhysicalDeviceCooperativeMatrixFeaturesNV::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV	access:public
VkPhysicalDeviceCooperativeMatrixFeaturesNV::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV	access:public
VkPhysicalDeviceCooperativeMatrixPropertiesNV	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesNV$/;"	s
VkPhysicalDeviceCooperativeMatrixPropertiesNV	./include/ncnn/vulkan_header_fix.h	/^} VkPhysicalDeviceCooperativeMatrixPropertiesNV;$/;"	t	typeref:struct:VkPhysicalDeviceCooperativeMatrixPropertiesNV
VkPhysicalDeviceCooperativeMatrixPropertiesNV::cooperativeMatrixSupportedStages	./include/ncnn/vulkan_header_fix.h	/^    VkShaderStageFlags cooperativeMatrixSupportedStages;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixPropertiesNV	access:public
VkPhysicalDeviceCooperativeMatrixPropertiesNV::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixPropertiesNV	access:public
VkPhysicalDeviceCooperativeMatrixPropertiesNV::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixPropertiesNV	access:public
VkPhysicalDeviceFloat16Int8FeaturesKHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkPhysicalDeviceFloat16Int8FeaturesKHR$/;"	s
VkPhysicalDeviceFloat16Int8FeaturesKHR	./include/ncnn/vulkan_header_fix.h	/^} VkPhysicalDeviceFloat16Int8FeaturesKHR;$/;"	t	typeref:struct:VkPhysicalDeviceFloat16Int8FeaturesKHR
VkPhysicalDeviceFloat16Int8FeaturesKHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceFloat16Int8FeaturesKHR	access:public
VkPhysicalDeviceFloat16Int8FeaturesKHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceFloat16Int8FeaturesKHR	access:public
VkPhysicalDeviceFloat16Int8FeaturesKHR::shaderFloat16	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 shaderFloat16;$/;"	m	struct:VkPhysicalDeviceFloat16Int8FeaturesKHR	access:public
VkPhysicalDeviceFloat16Int8FeaturesKHR::shaderInt8	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 shaderInt8;$/;"	m	struct:VkPhysicalDeviceFloat16Int8FeaturesKHR	access:public
VkPhysicalDeviceMaintenance3Properties	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkPhysicalDeviceMaintenance3Properties$/;"	s
VkPhysicalDeviceMaintenance3Properties	./include/ncnn/vulkan_header_fix.h	/^} VkPhysicalDeviceMaintenance3Properties;$/;"	t	typeref:struct:VkPhysicalDeviceMaintenance3Properties
VkPhysicalDeviceMaintenance3Properties::maxMemoryAllocationSize	./include/ncnn/vulkan_header_fix.h	/^    VkDeviceSize maxMemoryAllocationSize;$/;"	m	struct:VkPhysicalDeviceMaintenance3Properties	access:public
VkPhysicalDeviceMaintenance3Properties::maxPerSetDescriptors	./include/ncnn/vulkan_header_fix.h	/^    uint32_t maxPerSetDescriptors;$/;"	m	struct:VkPhysicalDeviceMaintenance3Properties	access:public
VkPhysicalDeviceMaintenance3Properties::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceMaintenance3Properties	access:public
VkPhysicalDeviceMaintenance3Properties::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceMaintenance3Properties	access:public
VkPhysicalDeviceMaintenance3PropertiesKHR	./include/ncnn/vulkan_header_fix.h	/^typedef VkPhysicalDeviceMaintenance3Properties VkPhysicalDeviceMaintenance3PropertiesKHR;$/;"	t
VkPhysicalDeviceMemoryBudgetPropertiesEXT	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkPhysicalDeviceMemoryBudgetPropertiesEXT$/;"	s
VkPhysicalDeviceMemoryBudgetPropertiesEXT	./include/ncnn/vulkan_header_fix.h	/^} VkPhysicalDeviceMemoryBudgetPropertiesEXT;$/;"	t	typeref:struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT
VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapBudget	./include/ncnn/vulkan_header_fix.h	/^    VkDeviceSize heapBudget[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT	access:public
VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapUsage	./include/ncnn/vulkan_header_fix.h	/^    VkDeviceSize heapUsage[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT	access:public
VkPhysicalDeviceMemoryBudgetPropertiesEXT::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT	access:public
VkPhysicalDeviceMemoryBudgetPropertiesEXT::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT	access:public
VkPhysicalDeviceSubgroupProperties	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkPhysicalDeviceSubgroupProperties$/;"	s
VkPhysicalDeviceSubgroupProperties	./include/ncnn/vulkan_header_fix.h	/^} VkPhysicalDeviceSubgroupProperties;$/;"	t	typeref:struct:VkPhysicalDeviceSubgroupProperties
VkPhysicalDeviceSubgroupProperties::pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
VkPhysicalDeviceSubgroupProperties::quadOperationsInAllStages	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 quadOperationsInAllStages;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
VkPhysicalDeviceSubgroupProperties::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
VkPhysicalDeviceSubgroupProperties::subgroupSize	./include/ncnn/vulkan_header_fix.h	/^    uint32_t subgroupSize;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
VkPhysicalDeviceSubgroupProperties::supportedOperations	./include/ncnn/vulkan_header_fix.h	/^    VkSubgroupFeatureFlags supportedOperations;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
VkPhysicalDeviceSubgroupProperties::supportedStages	./include/ncnn/vulkan_header_fix.h	/^    VkShaderStageFlags supportedStages;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
VkRenderPassCreateInfo2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkRenderPassCreateInfo2KHR$/;"	s
VkRenderPassCreateInfo2KHR	./include/ncnn/vulkan_header_fix.h	/^} VkRenderPassCreateInfo2KHR;$/;"	t	typeref:struct:VkRenderPassCreateInfo2KHR
VkRenderPassCreateInfo2KHR::attachmentCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t attachmentCount;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::correlatedViewMaskCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t correlatedViewMaskCount;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::dependencyCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t dependencyCount;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::flags	./include/ncnn/vulkan_header_fix.h	/^    VkRenderPassCreateFlags flags;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::pAttachments	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentDescription2KHR* pAttachments;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::pCorrelatedViewMasks	./include/ncnn/vulkan_header_fix.h	/^    const uint32_t* pCorrelatedViewMasks;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::pDependencies	./include/ncnn/vulkan_header_fix.h	/^    const VkSubpassDependency2KHR* pDependencies;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::pSubpasses	./include/ncnn/vulkan_header_fix.h	/^    const VkSubpassDescription2KHR* pSubpasses;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkRenderPassCreateInfo2KHR::subpassCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t subpassCount;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
VkScopeNV	./include/ncnn/vulkan_header_fix.h	/^typedef enum VkScopeNV$/;"	g
VkScopeNV	./include/ncnn/vulkan_header_fix.h	/^} VkScopeNV;$/;"	t	typeref:enum:VkScopeNV
VkStagingAllocator	./include/ncnn/allocator.h	/^    VkStagingAllocator(const VkStagingAllocator&);$/;"	p	class:ncnn::VkStagingAllocator	access:private	signature:(const VkStagingAllocator&)
VkStagingAllocator	./include/ncnn/allocator.h	/^    explicit VkStagingAllocator(const VulkanDevice* vkdev);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(const VulkanDevice* vkdev)
VkStagingAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkStagingAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
VkStagingAllocatorPrivate	./include/ncnn/allocator.h	/^class VkStagingAllocatorPrivate;$/;"	x
VkSubgroupFeatureFlagBits	./include/ncnn/vulkan_header_fix.h	/^typedef enum VkSubgroupFeatureFlagBits$/;"	g
VkSubgroupFeatureFlagBits	./include/ncnn/vulkan_header_fix.h	/^} VkSubgroupFeatureFlagBits;$/;"	t	typeref:enum:VkSubgroupFeatureFlagBits
VkSubgroupFeatureFlags	./include/ncnn/vulkan_header_fix.h	/^typedef VkFlags VkSubgroupFeatureFlags;$/;"	t
VkSubpassBeginInfoKHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkSubpassBeginInfoKHR$/;"	s
VkSubpassBeginInfoKHR	./include/ncnn/vulkan_header_fix.h	/^} VkSubpassBeginInfoKHR;$/;"	t	typeref:struct:VkSubpassBeginInfoKHR
VkSubpassBeginInfoKHR::contents	./include/ncnn/vulkan_header_fix.h	/^    VkSubpassContents contents;$/;"	m	struct:VkSubpassBeginInfoKHR	access:public
VkSubpassBeginInfoKHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkSubpassBeginInfoKHR	access:public
VkSubpassBeginInfoKHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkSubpassBeginInfoKHR	access:public
VkSubpassDependency2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkSubpassDependency2KHR$/;"	s
VkSubpassDependency2KHR	./include/ncnn/vulkan_header_fix.h	/^} VkSubpassDependency2KHR;$/;"	t	typeref:struct:VkSubpassDependency2KHR
VkSubpassDependency2KHR::dependencyFlags	./include/ncnn/vulkan_header_fix.h	/^    VkDependencyFlags dependencyFlags;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::dstAccessMask	./include/ncnn/vulkan_header_fix.h	/^    VkAccessFlags dstAccessMask;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::dstStageMask	./include/ncnn/vulkan_header_fix.h	/^    VkPipelineStageFlags dstStageMask;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::dstSubpass	./include/ncnn/vulkan_header_fix.h	/^    uint32_t dstSubpass;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::srcAccessMask	./include/ncnn/vulkan_header_fix.h	/^    VkAccessFlags srcAccessMask;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::srcStageMask	./include/ncnn/vulkan_header_fix.h	/^    VkPipelineStageFlags srcStageMask;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::srcSubpass	./include/ncnn/vulkan_header_fix.h	/^    uint32_t srcSubpass;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDependency2KHR::viewOffset	./include/ncnn/vulkan_header_fix.h	/^    int32_t viewOffset;$/;"	m	struct:VkSubpassDependency2KHR	access:public
VkSubpassDescription2KHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkSubpassDescription2KHR$/;"	s
VkSubpassDescription2KHR	./include/ncnn/vulkan_header_fix.h	/^} VkSubpassDescription2KHR;$/;"	t	typeref:struct:VkSubpassDescription2KHR
VkSubpassDescription2KHR::colorAttachmentCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t colorAttachmentCount;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::flags	./include/ncnn/vulkan_header_fix.h	/^    VkSubpassDescriptionFlags flags;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::inputAttachmentCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t inputAttachmentCount;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::pColorAttachments	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentReference2KHR* pColorAttachments;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::pDepthStencilAttachment	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentReference2KHR* pDepthStencilAttachment;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::pInputAttachments	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentReference2KHR* pInputAttachments;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::pPreserveAttachments	./include/ncnn/vulkan_header_fix.h	/^    const uint32_t* pPreserveAttachments;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::pResolveAttachments	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentReference2KHR* pResolveAttachments;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::pipelineBindPoint	./include/ncnn/vulkan_header_fix.h	/^    VkPipelineBindPoint pipelineBindPoint;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::preserveAttachmentCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t preserveAttachmentCount;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassDescription2KHR::viewMask	./include/ncnn/vulkan_header_fix.h	/^    uint32_t viewMask;$/;"	m	struct:VkSubpassDescription2KHR	access:public
VkSubpassEndInfoKHR	./include/ncnn/vulkan_header_fix.h	/^typedef struct VkSubpassEndInfoKHR$/;"	s
VkSubpassEndInfoKHR	./include/ncnn/vulkan_header_fix.h	/^} VkSubpassEndInfoKHR;$/;"	t	typeref:struct:VkSubpassEndInfoKHR
VkSubpassEndInfoKHR::pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkSubpassEndInfoKHR	access:public
VkSubpassEndInfoKHR::sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkSubpassEndInfoKHR	access:public
VkTransfer	./include/ncnn/command.h	/^    explicit VkTransfer(const VulkanDevice* vkdev);$/;"	p	class:ncnn::VkTransfer	access:public	signature:(const VulkanDevice* vkdev)
VkTransfer	./include/ncnn/command.h	/^class NCNN_EXPORT VkTransfer$/;"	c	namespace:ncnn
VkTransferPrivate	./include/ncnn/command.h	/^class VkTransferPrivate;$/;"	x
VkWeightAllocator	./include/ncnn/allocator.h	/^    VkWeightAllocator(const VkWeightAllocator&);$/;"	p	class:ncnn::VkWeightAllocator	access:private	signature:(const VkWeightAllocator&)
VkWeightAllocator	./include/ncnn/allocator.h	/^    explicit VkWeightAllocator(const VulkanDevice* vkdev, size_t preferred_block_size = 8 * 1024 * 1024); \/\/ 8M$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(const VulkanDevice* vkdev, size_t preferred_block_size = 8 * 1024 * 1024)
VkWeightAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkWeightAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
VkWeightAllocatorPrivate	./include/ncnn/allocator.h	/^class VkWeightAllocatorPrivate;$/;"	x
VkWeightStagingAllocator	./include/ncnn/allocator.h	/^    VkWeightStagingAllocator(const VkWeightStagingAllocator&);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:private	signature:(const VkWeightStagingAllocator&)
VkWeightStagingAllocator	./include/ncnn/allocator.h	/^    explicit VkWeightStagingAllocator(const VulkanDevice* vkdev);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(const VulkanDevice* vkdev)
VkWeightStagingAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkWeightStagingAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
VkWeightStagingAllocatorPrivate	./include/ncnn/allocator.h	/^class VkWeightStagingAllocatorPrivate;$/;"	x
VulkanDevice	./include/ncnn/allocator.h	/^class VulkanDevice;$/;"	x
VulkanDevice	./include/ncnn/gpu.h	/^    VulkanDevice(const VulkanDevice&);$/;"	p	class:ncnn::VulkanDevice	access:private	signature:(const VulkanDevice&)
VulkanDevice	./include/ncnn/gpu.h	/^    VulkanDevice(int device_index = get_default_gpu_index());$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(int device_index = get_default_gpu_index())
VulkanDevice	./include/ncnn/gpu.h	/^class NCNN_EXPORT VulkanDevice$/;"	c	namespace:ncnn
VulkanDevice	./include/ncnn/pipelinecache.h	/^class VulkanDevice;$/;"	x
VulkanDevicePrivate	./include/ncnn/gpu.h	/^class VulkanDevicePrivate;$/;"	x
WIN32_LEAN_AND_MEAN	./include/ncnn/allocator.h	19;"	d
WIN32_LEAN_AND_MEAN	./include/ncnn/platform.h	58;"	d
__ncnn_allocator_t	./include/ncnn/c_api.h	/^struct NCNN_EXPORT __ncnn_allocator_t$/;"	s
__ncnn_allocator_t::fast_free	./include/ncnn/c_api.h	/^    void (*fast_free)(ncnn_allocator_t allocator, void* ptr);$/;"	m	struct:__ncnn_allocator_t	access:public
__ncnn_allocator_t::fast_malloc	./include/ncnn/c_api.h	/^    void* (*fast_malloc)(ncnn_allocator_t allocator, size_t size);$/;"	m	struct:__ncnn_allocator_t	access:public
__ncnn_allocator_t::pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_allocator_t	access:public
__ncnn_datareader_t	./include/ncnn/c_api.h	/^struct NCNN_EXPORT __ncnn_datareader_t$/;"	s
__ncnn_datareader_t::pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_datareader_t	access:public
__ncnn_datareader_t::read	./include/ncnn/c_api.h	/^    size_t (*read)(ncnn_datareader_t dr, void* buf, size_t size);$/;"	m	struct:__ncnn_datareader_t	access:public
__ncnn_datareader_t::scan	./include/ncnn/c_api.h	/^    int (*scan)(ncnn_datareader_t dr, const char* format, void* p);$/;"	m	struct:__ncnn_datareader_t	access:public
__ncnn_layer_t	./include/ncnn/c_api.h	/^struct NCNN_EXPORT __ncnn_layer_t$/;"	s
__ncnn_layer_t::create_pipeline	./include/ncnn/c_api.h	/^    int (*create_pipeline)(ncnn_layer_t layer, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_layer_t::destroy_pipeline	./include/ncnn/c_api.h	/^    int (*destroy_pipeline)(ncnn_layer_t layer, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_layer_t::forward_1	./include/ncnn/c_api.h	/^    int (*forward_1)(const ncnn_layer_t layer, const ncnn_mat_t bottom_blob, ncnn_mat_t* top_blob, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_layer_t::forward_inplace_1	./include/ncnn/c_api.h	/^    int (*forward_inplace_1)(const ncnn_layer_t layer, ncnn_mat_t bottom_top_blob, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_layer_t::forward_inplace_n	./include/ncnn/c_api.h	/^    int (*forward_inplace_n)(const ncnn_layer_t layer, ncnn_mat_t* bottom_top_blobs, int n, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_layer_t::forward_n	./include/ncnn/c_api.h	/^    int (*forward_n)(const ncnn_layer_t layer, const ncnn_mat_t* bottom_blobs, int n, ncnn_mat_t* top_blobs, int n2, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_layer_t::load_model	./include/ncnn/c_api.h	/^    int (*load_model)(ncnn_layer_t layer, const ncnn_modelbin_t mb);$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_layer_t::load_param	./include/ncnn/c_api.h	/^    int (*load_param)(ncnn_layer_t layer, const ncnn_paramdict_t pd);$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_layer_t::pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_layer_t	access:public
__ncnn_modelbin_t	./include/ncnn/c_api.h	/^struct NCNN_EXPORT __ncnn_modelbin_t$/;"	s
__ncnn_modelbin_t::load_1d	./include/ncnn/c_api.h	/^    ncnn_mat_t (*load_1d)(const ncnn_modelbin_t mb, int w, int type);$/;"	m	struct:__ncnn_modelbin_t	access:public
__ncnn_modelbin_t::load_2d	./include/ncnn/c_api.h	/^    ncnn_mat_t (*load_2d)(const ncnn_modelbin_t mb, int w, int h, int type);$/;"	m	struct:__ncnn_modelbin_t	access:public
__ncnn_modelbin_t::load_3d	./include/ncnn/c_api.h	/^    ncnn_mat_t (*load_3d)(const ncnn_modelbin_t mb, int w, int h, int c, int type);$/;"	m	struct:__ncnn_modelbin_t	access:public
__ncnn_modelbin_t::pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_modelbin_t	access:public
__ncnn_net_custom_layer_factory_t	./include/ncnn/c_api.h	/^struct __ncnn_net_custom_layer_factory_t$/;"	s
__ncnn_net_custom_layer_factory_t::creator	./include/ncnn/c_api.h	/^    ncnn_layer_creator_t creator;$/;"	m	struct:__ncnn_net_custom_layer_factory_t	access:public
__ncnn_net_custom_layer_factory_t::destroyer	./include/ncnn/c_api.h	/^    ncnn_layer_destroyer_t destroyer;$/;"	m	struct:__ncnn_net_custom_layer_factory_t	access:public
__ncnn_net_custom_layer_factory_t::next	./include/ncnn/c_api.h	/^    ncnn_net_custom_layer_factory_t next;$/;"	m	struct:__ncnn_net_custom_layer_factory_t	access:public
__ncnn_net_custom_layer_factory_t::userdata	./include/ncnn/c_api.h	/^    void* userdata;$/;"	m	struct:__ncnn_net_custom_layer_factory_t	access:public
__ncnn_net_t	./include/ncnn/c_api.h	/^struct __ncnn_net_t$/;"	s
__ncnn_net_t::custom_layer_factory	./include/ncnn/c_api.h	/^    ncnn_net_custom_layer_factory_t custom_layer_factory;$/;"	m	struct:__ncnn_net_t	access:public
__ncnn_net_t::pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_net_t	access:public
_args	./include/ncnn/platform.h	/^    void* _args;$/;"	m	class:ncnn::Thread	access:private
_net	./src/FastestDet.cpp	/^    ncnn::Net _net;$/;"	m	class:FastestDet	file:	access:private
_start	./include/ncnn/platform.h	/^    void* (*_start)(void*);$/;"	m	class:ncnn::Thread	access:private
access_flags	./include/ncnn/allocator.h	/^    mutable VkAccessFlags access_flags;$/;"	m	class:ncnn::VkBufferMemory	access:public
access_flags	./include/ncnn/allocator.h	/^    mutable VkAccessFlags access_flags;$/;"	m	class:ncnn::VkImageMemory	access:public
acquire_blob_allocator	./include/ncnn/gpu.h	/^    VkAllocator* acquire_blob_allocator() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
acquire_queue	./include/ncnn/gpu.h	/^    VkQueue acquire_queue(uint32_t queue_family_index) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t queue_family_index) const
acquire_staging_allocator	./include/ncnn/gpu.h	/^    VkAllocator* acquire_staging_allocator() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
addref	./include/ncnn/mat.h	/^    void addref();$/;"	p	class:ncnn::Mat	access:public	signature:()
addref	./include/ncnn/mat.h	/^    void addref();$/;"	p	class:ncnn::VkImageMat	access:public	signature:()
addref	./include/ncnn/mat.h	/^    void addref();$/;"	p	class:ncnn::VkMat	access:public	signature:()
addref	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::addref()$/;"	f	class:ncnn::Mat	signature:()
addref	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void VkImageMat::addref()$/;"	f	class:ncnn::VkImageMat	signature:()
addref	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void VkMat::addref()$/;"	f	class:ncnn::VkMat	signature:()
alignPtr	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE _Tp* alignPtr(_Tp* ptr, int n = (int)sizeof(_Tp))$/;"	f	namespace:ncnn	signature:(_Tp* ptr, int n = (int)sizeof(_Tp))
alignSize	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE size_t alignSize(size_t sz, int n)$/;"	f	namespace:ncnn	signature:(size_t sz, int n)
allocate_dedicated_memory	./include/ncnn/allocator.h	/^    VkDeviceMemory allocate_dedicated_memory(size_t size, uint32_t memory_type_index, VkImage image, VkBuffer buffer);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(size_t size, uint32_t memory_type_index, VkImage image, VkBuffer buffer)
allocate_memory	./include/ncnn/allocator.h	/^    VkDeviceMemory allocate_memory(size_t size, uint32_t memory_type_index);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(size_t size, uint32_t memory_type_index)
allocator	./include/ncnn/mat.h	/^    Allocator* allocator;$/;"	m	class:ncnn::Mat	access:public
allocator	./include/ncnn/mat.h	/^    VkAllocator* allocator;$/;"	m	class:ncnn::VkImageMat	access:public
allocator	./include/ncnn/mat.h	/^    VkAllocator* allocator;$/;"	m	class:ncnn::VkMat	access:public
angle	./src/FastestDet.cpp	/^    std::vector<float>angle;$/;"	m	struct:Object	file:	access:public
api_version	./include/ncnn/gpu.h	/^    uint32_t api_version() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
area	./include/ncnn/simpleocv.h	/^    _Tp area() const$/;"	f	struct:cv::Rect_	access:public	signature:() const
aspectMask	./include/ncnn/vulkan_header_fix.h	/^    VkImageAspectFlags aspectMask;$/;"	m	struct:VkAttachmentReference2KHR	access:public
attachment	./include/ncnn/vulkan_header_fix.h	/^    uint32_t attachment;$/;"	m	struct:VkAttachmentReference2KHR	access:public
attachmentCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t attachmentCount;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
barrier_readonly	./include/ncnn/command.h	/^    void barrier_readonly(const VkImageMat& binding);$/;"	p	class:ncnn::VkCompute	access:protected	signature:(const VkImageMat& binding)
barrier_readwrite	./include/ncnn/command.h	/^    void barrier_readwrite(const VkImageMat& binding);$/;"	p	class:ncnn::VkCompute	access:protected	signature:(const VkImageMat& binding)
barrier_readwrite	./include/ncnn/command.h	/^    void barrier_readwrite(const VkMat& binding);$/;"	p	class:ncnn::VkCompute	access:protected	signature:(const VkMat& binding)
begin	./include/ncnn/simplestl.h	/^    T* begin() const$/;"	f	struct:std::vector	access:public	signature:() const
begin	./include/ncnn/simplestl.h	/^    iter_list<T> begin() const$/;"	f	struct:std::list	access:public	signature:() const
benchmark	./include/ncnn/benchmark.h	/^NCNN_EXPORT void benchmark(const Layer* layer, const Mat& bottom_blob, Mat& top_blob, double start, double end);$/;"	p	namespace:ncnn	signature:(const Layer* layer, const Mat& bottom_blob, Mat& top_blob, double start, double end)
benchmark	./include/ncnn/benchmark.h	/^NCNN_EXPORT void benchmark(const Layer* layer, double start, double end);$/;"	p	namespace:ncnn	signature:(const Layer* layer, double start, double end)
bfloat16_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT NCNN_FORCEINLINE float bfloat16_to_float32(unsigned short value)$/;"	f	namespace:ncnn	signature:(unsigned short value)
bind_capacity	./include/ncnn/allocator.h	/^    size_t bind_capacity;$/;"	m	class:ncnn::VkImageMemory	access:public
bind_offset	./include/ncnn/allocator.h	/^    size_t bind_offset;$/;"	m	class:ncnn::VkImageMemory	access:public
binding_count	./include/ncnn/gpu.h	/^    int binding_count;$/;"	m	class:ncnn::ShaderInfo	access:public
binding_types	./include/ncnn/gpu.h	/^    int binding_types[16]; \/\/ 16 is large enough I think ...$/;"	m	class:ncnn::ShaderInfo	access:public
blob_allocator	./include/ncnn/option.h	/^    Allocator* blob_allocator;$/;"	m	class:ncnn::Option	access:public
blob_vkallocator	./include/ncnn/option.h	/^    VkAllocator* blob_vkallocator;$/;"	m	class:ncnn::Option	access:public
blobs	./include/ncnn/net.h	/^    const std::vector<Blob>& blobs() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
bottom_shapes	./include/ncnn/layer.h	/^    std::vector<Mat> bottom_shapes;$/;"	m	class:ncnn::Layer	access:public
bottoms	./include/ncnn/layer.h	/^    std::vector<int> bottoms;$/;"	m	class:ncnn::Layer	access:public
bpp	./src/FastestDet.cpp	/^static unsigned int bpp;    \/\/像素深度bpp$/;"	v	file:
broadcast	./include/ncnn/platform.h	/^    void broadcast() { WakeAllConditionVariable(&condvar); }$/;"	f	class:ncnn::ConditionVariable	access:public	signature:()
buf_infos	./src/FastestDet.cpp	/^static cam_buf_info buf_infos[FRAMEBUFFER_COUNT];$/;"	v	file:
buffer	./include/ncnn/allocator.h	/^    VkBuffer buffer;$/;"	m	class:ncnn::VkBufferMemory	access:public
buffer	./include/ncnn/mat.h	/^    VkBuffer buffer() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
buffer	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkBuffer VkMat::buffer() const$/;"	f	class:ncnn::VkMat	signature:() const
bufferDesc	./include/ncnn/allocator.h	/^    AHardwareBuffer_Desc bufferDesc;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
bufferFormatProperties	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferFormatPropertiesANDROID bufferFormatProperties;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
bufferProperties	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferPropertiesANDROID bufferProperties;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
buffer_capacity	./include/ncnn/mat.h	/^    size_t buffer_capacity() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
buffer_capacity	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t VkMat::buffer_capacity() const$/;"	f	class:ncnn::VkMat	signature:() const
buffer_image_granularity	./include/ncnn/gpu.h	/^    size_t buffer_image_granularity() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
buffer_memory_type_index	./include/ncnn/allocator.h	/^    uint32_t buffer_memory_type_index;$/;"	m	class:ncnn::VkAllocator	access:public
buffer_offset	./include/ncnn/mat.h	/^    size_t buffer_offset() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
buffer_offset	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t VkMat::buffer_offset() const$/;"	f	class:ncnn::VkMat	signature:() const
buffer_offset_alignment	./include/ncnn/gpu.h	/^    size_t buffer_offset_alignment() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
bug_buffer_image_load_zero	./include/ncnn/gpu.h	/^    bool bug_buffer_image_load_zero() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
bug_corrupted_online_pipeline_cache	./include/ncnn/gpu.h	/^    bool bug_corrupted_online_pipeline_cache() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
bug_implicit_fp16_arithmetic	./include/ncnn/gpu.h	/^    bool bug_implicit_fp16_arithmetic() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
bug_storage_buffer_no_l1	./include/ncnn/gpu.h	/^    bool bug_storage_buffer_no_l1() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
c	./include/ncnn/mat.h	/^    int c;$/;"	m	class:ncnn::Mat	access:public
c	./include/ncnn/mat.h	/^    int c;$/;"	m	class:ncnn::VkImageMat	access:public
c	./include/ncnn/mat.h	/^    int c;$/;"	m	class:ncnn::VkMat	access:public
c	./include/ncnn/simpleocv.h	/^    int c;$/;"	m	struct:cv::Mat	access:public
c_str	./include/ncnn/simplestl.h	/^    const char* c_str() const$/;"	f	struct:std::string	access:public	signature:() const
cam_buf_info	./src/FastestDet.cpp	/^typedef struct cam_buf_info {$/;"	s	file:
cam_buf_info	./src/FastestDet.cpp	/^} cam_buf_info;$/;"	t	typeref:struct:cam_buf_info	file:
cam_buf_info::length	./src/FastestDet.cpp	/^    unsigned long length;       \/\/帧缓冲长度$/;"	m	struct:cam_buf_info	file:	access:public
cam_buf_info::start	./src/FastestDet.cpp	/^    unsigned short *start;      \/\/帧缓冲起始地址$/;"	m	struct:cam_buf_info	file:	access:public
cam_fmt	./src/FastestDet.cpp	/^} cam_fmt;$/;"	t	typeref:struct:camera_format	file:
cam_fmts	./src/FastestDet.cpp	/^static cam_fmt cam_fmts[10];$/;"	v	file:
camera_format	./src/FastestDet.cpp	/^typedef struct camera_format {$/;"	s	file:
camera_format::description	./src/FastestDet.cpp	/^    unsigned char description[32];  \/\/字符串描述信息$/;"	m	struct:camera_format	file:	access:public
camera_format::pixelformat	./src/FastestDet.cpp	/^    unsigned int pixelformat;       \/\/像素格式$/;"	m	struct:camera_format	file:	access:public
capacity	./include/ncnn/allocator.h	/^    size_t capacity;$/;"	m	class:ncnn::VkBufferMemory	access:public
capacity_	./include/ncnn/simplestl.h	/^    size_t capacity_;$/;"	m	struct:std::vector	access:protected
cast_bfloat16_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_bfloat16_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
cast_float16_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_float16_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
cast_float32_to_bfloat16	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_float32_to_bfloat16(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
cast_float32_to_float16	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_float32_to_float16(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
cast_int8_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_int8_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
channel	./include/ncnn/mat.h	/^    Mat channel(int c);$/;"	p	class:ncnn::Mat	access:public	signature:(int c)
channel	./include/ncnn/mat.h	/^    const Mat channel(int c) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int c) const
channel	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::channel(int _c)$/;"	f	class:ncnn::Mat	signature:(int _c)
channel	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::channel(int _c) const$/;"	f	class:ncnn::Mat	signature:(int _c) const
channel_range	./include/ncnn/mat.h	/^    Mat channel_range(int c, int channels);$/;"	p	class:ncnn::Mat	access:public	signature:(int c, int channels)
channel_range	./include/ncnn/mat.h	/^    const Mat channel_range(int c, int channels) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int c, int channels) const
channel_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::channel_range(int _c, int channels)$/;"	f	class:ncnn::Mat	signature:(int _c, int channels)
channel_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::channel_range(int _c, int channels) const$/;"	f	class:ncnn::Mat	signature:(int _c, int channels) const
channels	./include/ncnn/simpleocv.h	/^    int channels() const$/;"	f	struct:cv::Mat	access:public	signature:() const
circle	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void circle(Mat& img, Point center, int radius, const Scalar& color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, Point center, int radius, const Scalar& color, int thickness = 1)
class_name	./src/FastestDet.cpp	/^    std::string class_name;  \/\/类别标签$/;"	m	struct:Object	file:	access:public
class_names	./src/FastestDet.cpp	/^    vector<string> class_names;$/;"	m	class:FastestDet	file:	access:private
clear	./include/ncnn/allocator.h	/^    virtual void clear();$/;"	p	class:ncnn::VkAllocator	access:public	signature:()
clear	./include/ncnn/allocator.h	/^    virtual void clear();$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:()
clear	./include/ncnn/allocator.h	/^    virtual void clear();$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:()
clear	./include/ncnn/allocator.h	/^    virtual void clear();$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:()
clear	./include/ncnn/allocator.h	/^    void clear();$/;"	p	class:ncnn::PoolAllocator	access:public	signature:()
clear	./include/ncnn/allocator.h	/^    void clear();$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:()
clear	./include/ncnn/net.h	/^    void clear();$/;"	p	class:ncnn::Extractor	access:public	signature:()
clear	./include/ncnn/net.h	/^    void clear();$/;"	p	class:ncnn::Net	access:public	signature:()
clear	./include/ncnn/paramdict.h	/^    void clear();$/;"	p	class:ncnn::ParamDict	access:protected	signature:()
clear	./include/ncnn/pipelinecache.h	/^    void clear();$/;"	p	class:ncnn::PipelineCache	access:public	signature:()
clear	./include/ncnn/simplestl.h	/^    void clear()$/;"	f	struct:std::list	access:public	signature:()
clear	./include/ncnn/simplestl.h	/^    void clear()$/;"	f	struct:std::vector	access:public	signature:()
clone	./include/ncnn/mat.h	/^    Mat clone(Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(Allocator* allocator = 0) const
clone	./include/ncnn/simpleocv.h	/^    Mat clone() const$/;"	f	struct:cv::Mat	access:public	signature:() const
clone_from	./include/ncnn/mat.h	/^    void clone_from(const ncnn::Mat& mat, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const ncnn::Mat& mat, Allocator* allocator = 0)
coherent	./include/ncnn/allocator.h	/^    bool coherent;$/;"	m	class:ncnn::VkAllocator	access:public
colorAttachmentCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t colorAttachmentCount;$/;"	m	struct:VkSubpassDescription2KHR	access:public
cols	./include/ncnn/simpleocv.h	/^    int cols;$/;"	m	struct:cv::Mat	access:public
command_refcount	./include/ncnn/allocator.h	/^    mutable int command_refcount;$/;"	m	class:ncnn::VkImageMemory	access:public
compile_shader_module	./include/ncnn/gpu.h	/^    VkShaderModule compile_shader_module(const uint32_t* spv_data, size_t spv_data_size) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const uint32_t* spv_data, size_t spv_data_size) const
compile_shader_module	./include/ncnn/gpu.h	/^    VkShaderModule compile_shader_module(const uint32_t* spv_data, size_t spv_data_size, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const uint32_t* spv_data, size_t spv_data_size, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z) const
compile_spirv_module	./include/ncnn/gpu.h	/^NCNN_EXPORT int compile_spirv_module(const char* comp_data, int comp_data_size, const Option& opt, std::vector<uint32_t>& spirv);$/;"	p	namespace:ncnn	signature:(const char* comp_data, int comp_data_size, const Option& opt, std::vector<uint32_t>& spirv)
compile_spirv_module	./include/ncnn/gpu.h	/^NCNN_EXPORT int compile_spirv_module(const char* comp_string, const Option& opt, std::vector<uint32_t>& spirv);$/;"	p	namespace:ncnn	signature:(const char* comp_string, const Option& opt, std::vector<uint32_t>& spirv)
compile_spirv_module	./include/ncnn/gpu.h	/^NCNN_EXPORT int compile_spirv_module(int shader_type_index, const Option& opt, std::vector<uint32_t>& spirv);$/;"	p	namespace:ncnn	signature:(int shader_type_index, const Option& opt, std::vector<uint32_t>& spirv)
compute_queue_count	./include/ncnn/gpu.h	/^    uint32_t compute_queue_count() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
compute_queue_family_index	./include/ncnn/gpu.h	/^    uint32_t compute_queue_family_index() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
cond	./src/FastestDet.cpp	/^pthread_cond_t cond = PTHREAD_COND_INITIALIZER;$/;"	v
cond2	./src/FastestDet.cpp	/^pthread_cond_t cond2 = PTHREAD_COND_INITIALIZER;$/;"	v
condvar	./include/ncnn/platform.h	/^    CONDITION_VARIABLE condvar;$/;"	m	class:ncnn::ConditionVariable	access:private
confThreshold	./src/FastestDet.cpp	/^    float confThreshold;$/;"	m	class:FastestDet	file:	access:private
const	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
consumer	./include/ncnn/blob.h	/^    int consumer;$/;"	m	class:ncnn::Blob	access:public
contents	./include/ncnn/vulkan_header_fix.h	/^    VkSubpassContents contents;$/;"	m	struct:VkSubpassBeginInfoKHR	access:public
convert_packing	./include/ncnn/gpu.h	/^    void convert_packing(const VkImageMat& src, VkImageMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const VkImageMat& src, VkImageMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const
convert_packing	./include/ncnn/gpu.h	/^    void convert_packing(const VkImageMat& src, VkMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const VkImageMat& src, VkMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const
convert_packing	./include/ncnn/gpu.h	/^    void convert_packing(const VkMat& src, VkImageMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const VkMat& src, VkImageMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const
convert_packing	./include/ncnn/gpu.h	/^    void convert_packing(const VkMat& src, VkMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const VkMat& src, VkMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const
convert_packing	./include/ncnn/mat.h	/^NCNN_EXPORT void convert_packing(const Mat& src, Mat& dst, int elempack, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int elempack, const Option& opt = Option())
cooperativeMatrix	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 cooperativeMatrix;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV	access:public
cooperativeMatrixRobustBufferAccess	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 cooperativeMatrixRobustBufferAccess;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV	access:public
cooperativeMatrixSupportedStages	./include/ncnn/vulkan_header_fix.h	/^    VkShaderStageFlags cooperativeMatrixSupportedStages;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixPropertiesNV	access:public
copy_cut_border	./include/ncnn/mat.h	/^NCNN_EXPORT void copy_cut_border(const Mat& src, Mat& dst, int top, int bottom, int left, int right, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int top, int bottom, int left, int right, const Option& opt = Option())
copy_cut_border_3d	./include/ncnn/mat.h	/^NCNN_EXPORT void copy_cut_border_3d(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int front, int behind, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int front, int behind, const Option& opt = Option())
copy_file	./src/FastestDet.cpp	/^int copy_file(const char *srcPath, char *destPath)$/;"	f	signature:(const char *srcPath, char *destPath)
copy_make_border	./include/ncnn/mat.h	/^NCNN_EXPORT void copy_make_border(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int type, float v, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int type, float v, const Option& opt = Option())
copy_make_border_3d	./include/ncnn/mat.h	/^NCNN_EXPORT void copy_make_border_3d(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int front, int behind, int type, float v, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int front, int behind, int type, float v, const Option& opt = Option())
correlatedViewMaskCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t correlatedViewMaskCount;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
count_	./include/ncnn/simplestl.h	/^    size_t count_;$/;"	m	struct:std::list	access:protected
cp_screen_base	./src/FastestDet.cpp	/^static unsigned short *screen_base = NULL, *cp_screen_base = NULL;\/\/LCD显存基地址$/;"	v	file:
cpu_riscv_vlenb	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_riscv_vlenb();$/;"	p	namespace:ncnn	signature:()
cpu_set	./include/ncnn/cpu.h	/^    cpu_set_t cpu_set;$/;"	m	class:ncnn::CpuSet	access:public
cpu_support_arm_asimddp	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_arm_asimddp();$/;"	p	namespace:ncnn	signature:()
cpu_support_arm_asimdhp	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_arm_asimdhp();$/;"	p	namespace:ncnn	signature:()
cpu_support_arm_neon	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_arm_neon();$/;"	p	namespace:ncnn	signature:()
cpu_support_arm_vfpv4	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_arm_vfpv4();$/;"	p	namespace:ncnn	signature:()
cpu_support_loongson_mmi	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_loongson_mmi();$/;"	p	namespace:ncnn	signature:()
cpu_support_mips_msa	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_mips_msa();$/;"	p	namespace:ncnn	signature:()
cpu_support_riscv_v	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_riscv_v();$/;"	p	namespace:ncnn	signature:()
cpu_support_riscv_zfh	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_riscv_zfh();$/;"	p	namespace:ncnn	signature:()
cpu_support_x86_avx	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx();$/;"	p	namespace:ncnn	signature:()
cpu_support_x86_avx2	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx2();$/;"	p	namespace:ncnn	signature:()
cpu_support_x86_avx512	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx512();$/;"	p	namespace:ncnn	signature:()
cpu_support_x86_avx512_vnni	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx512_vnni();$/;"	p	namespace:ncnn	signature:()
cpu_support_x86_avx_vnni	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx_vnni();$/;"	p	namespace:ncnn	signature:()
cpu_support_x86_f16c	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_f16c();$/;"	p	namespace:ncnn	signature:()
cpu_support_x86_fma	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_fma();$/;"	p	namespace:ncnn	signature:()
cpu_support_x86_xop	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_xop();$/;"	p	namespace:ncnn	signature:()
create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, size_t elemsize = 4u, Allocator* allocator = 0)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, size_t elemsize, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, size_t elemsize, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, Allocator* allocator = 0)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, size_t elemsize = 4u, Allocator* allocator = 0)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, Allocator* allocator = 0)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, size_t elemsize = 4u, Allocator* allocator = 0)
create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, size_t elemsize, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, size_t elemsize, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, size_t elemsize, int elempack, Allocator* allocator = 0)
create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, size_t elemsize = 4u, Allocator* allocator = 0)
create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, size_t elemsize, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, size_t elemsize, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, size_t elemsize, int elempack, Allocator* allocator = 0)
create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, size_t elemsize, int elempack, VkAllocator* allocator)
create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, size_t elemsize, int elempack, VkAllocator* allocator)
create	./include/ncnn/pipeline.h	/^    int create(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator, int type_to, int rotate_from, const Option& opt);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator, int type_to, int rotate_from, const Option& opt)
create	./include/ncnn/pipeline.h	/^    int create(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator, int type_to, int rotate_from, int target_width, int target_height, const Option& opt);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator, int type_to, int rotate_from, int target_width, int target_height, const Option& opt)
create	./include/ncnn/pipeline.h	/^    int create(const uint32_t* spv_data, size_t spv_data_size, const std::vector<vk_specialization_type>& specializations);$/;"	p	class:ncnn::Pipeline	access:public	signature:(const uint32_t* spv_data, size_t spv_data_size, const std::vector<vk_specialization_type>& specializations)
create	./include/ncnn/pipeline.h	/^    int create(int shader_type_index, const Option& opt, const std::vector<vk_specialization_type>& specializations);$/;"	p	class:ncnn::Pipeline	access:public	signature:(int shader_type_index, const Option& opt, const std::vector<vk_specialization_type>& specializations)
create	./include/ncnn/simpleocv.h	/^    void create(int _rows, int _cols, int flags)$/;"	f	struct:cv::Mat	access:public	signature:(int _rows, int _cols, int flags)
create_buffer	./include/ncnn/allocator.h	/^    VkBuffer create_buffer(size_t size, VkBufferUsageFlags usage);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(size_t size, VkBufferUsageFlags usage)
create_custom_layer	./include/ncnn/net.h	/^    virtual Layer* create_custom_layer(const char* type);$/;"	p	class:ncnn::Net	access:protected	signature:(const char* type)
create_custom_layer	./include/ncnn/net.h	/^    virtual Layer* create_custom_layer(int index);$/;"	p	class:ncnn::Net	access:protected	signature:(int index)
create_descriptor_update_template	./include/ncnn/gpu.h	/^    int create_descriptor_update_template(int binding_count, const int* binding_types, VkDescriptorSetLayout descriptorset_layout, VkPipelineLayout pipeline_layout, VkDescriptorUpdateTemplateKHR* descriptor_update_template) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(int binding_count, const int* binding_types, VkDescriptorSetLayout descriptorset_layout, VkPipelineLayout pipeline_layout, VkDescriptorUpdateTemplateKHR* descriptor_update_template) const
create_descriptorset_layout	./include/ncnn/gpu.h	/^    int create_descriptorset_layout(int binding_count, const int* binding_types, VkDescriptorSetLayout* descriptorset_layout) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(int binding_count, const int* binding_types, VkDescriptorSetLayout* descriptorset_layout) const
create_descriptorset_layout	./include/ncnn/pipeline.h	/^    int create_descriptorset_layout();$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:protected	signature:()
create_extractor	./include/ncnn/net.h	/^    Extractor create_extractor() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
create_extractor	./include/ncnn/net.h	/^    friend Extractor Net::create_extractor() const;$/;"	p	class:ncnn::Extractor::Net	access:friend	signature:() const
create_gpu_instance	./include/ncnn/gpu.h	/^    friend int create_gpu_instance();$/;"	p	class:ncnn::GpuInfo	access:friend	signature:()
create_gpu_instance	./include/ncnn/gpu.h	/^NCNN_EXPORT int create_gpu_instance();$/;"	p	namespace:ncnn	signature:()
create_image	./include/ncnn/allocator.h	/^    VkImage create_image(int width, int height, int depth, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(int width, int height, int depth, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage)
create_imageview	./include/ncnn/allocator.h	/^    VkImageView create_imageview(VkImage image, VkFormat format);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(VkImage image, VkFormat format)
create_layer	./include/ncnn/layer.h	/^NCNN_EXPORT Layer* create_layer(const char* type);$/;"	p	namespace:ncnn	signature:(const char* type)
create_layer	./include/ncnn/layer.h	/^NCNN_EXPORT Layer* create_layer(int index);$/;"	p	namespace:ncnn	signature:(int index)
create_like	./include/ncnn/mat.h	/^    void create_like(const Mat& m, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const Mat& m, Allocator* allocator = 0)
create_like	./include/ncnn/mat.h	/^    void create_like(const Mat& m, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const Mat& m, VkAllocator* allocator)
create_like	./include/ncnn/mat.h	/^    void create_like(const Mat& m, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(const Mat& m, VkAllocator* allocator)
create_like	./include/ncnn/mat.h	/^    void create_like(const VkImageMat& im, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const VkImageMat& im, Allocator* allocator = 0)
create_like	./include/ncnn/mat.h	/^    void create_like(const VkImageMat& im, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const VkImageMat& im, VkAllocator* allocator)
create_like	./include/ncnn/mat.h	/^    void create_like(const VkImageMat& im, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(const VkImageMat& im, VkAllocator* allocator)
create_like	./include/ncnn/mat.h	/^    void create_like(const VkMat& m, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const VkMat& m, Allocator* allocator = 0)
create_like	./include/ncnn/mat.h	/^    void create_like(const VkMat& m, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const VkMat& m, VkAllocator* allocator)
create_like	./include/ncnn/mat.h	/^    void create_like(const VkMat& m, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(const VkMat& m, VkAllocator* allocator)
create_pipeline	./include/ncnn/c_api.h	/^    int (*create_pipeline)(ncnn_layer_t layer, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
create_pipeline	./include/ncnn/gpu.h	/^    int create_pipeline(VkShaderModule shader_module, VkPipelineLayout pipeline_layout, const std::vector<vk_specialization_type>& specializations, VkPipeline* pipeline) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(VkShaderModule shader_module, VkPipelineLayout pipeline_layout, const std::vector<vk_specialization_type>& specializations, VkPipeline* pipeline) const
create_pipeline	./include/ncnn/layer.h	/^    virtual int create_pipeline(const Option& opt);$/;"	p	class:ncnn::Layer	access:public	signature:(const Option& opt)
create_pipeline_layout	./include/ncnn/gpu.h	/^    int create_pipeline_layout(int push_constant_count, VkDescriptorSetLayout descriptorset_layout, VkPipelineLayout* pipeline_layout) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(int push_constant_count, VkDescriptorSetLayout descriptorset_layout, VkPipelineLayout* pipeline_layout) const
create_query_pool	./include/ncnn/command.h	/^    int create_query_pool(uint32_t query_count);$/;"	p	class:ncnn::VkCompute	access:public	signature:(uint32_t query_count)
create_sampler	./include/ncnn/pipeline.h	/^    int create_sampler(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:protected	signature:(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator)
create_shader_module	./include/ncnn/pipeline.h	/^    int create_shader_module(const Option& opt);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:protected	signature:(const Option& opt)
create_shader_module	./include/ncnn/pipelinecache.h	/^    int create_shader_module(int shader_type_index, const Option& opt, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z,$/;"	p	class:ncnn::PipelineCache	access:protected	signature:(int shader_type_index, const Option& opt, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z, VkShaderModule* _shader_module, ShaderInfo& si) const
creator	./include/ncnn/c_api.h	/^    ncnn_layer_creator_t creator;$/;"	m	struct:__ncnn_net_custom_layer_factory_t	access:public
creator	./include/ncnn/layer.h	/^    layer_creator_func creator;$/;"	m	struct:ncnn::custom_layer_registry_entry	access:public
creator	./include/ncnn/layer.h	/^    layer_creator_func creator;$/;"	m	struct:ncnn::layer_registry_entry	access:public
crop_rect	./src/FastestDet.cpp	/^    cv::Rect crop_rect;$/;"	m	struct:Object	file:	access:public
cstep	./include/ncnn/mat.h	/^    size_t cstep;$/;"	m	class:ncnn::Mat	access:public
cstep	./include/ncnn/mat.h	/^    size_t cstep;$/;"	m	class:ncnn::VkMat	access:public
curr_	./include/ncnn/simplestl.h	/^    node<T>* curr_;$/;"	m	struct:std::iter_list	access:public
custom_layer_factory	./include/ncnn/c_api.h	/^    ncnn_net_custom_layer_factory_t custom_layer_factory;$/;"	m	struct:__ncnn_net_t	access:public
custom_layer_registry_entry	./include/ncnn/layer.h	/^struct custom_layer_registry_entry$/;"	s	namespace:ncnn
custom_layer_to_index	./include/ncnn/net.h	/^    virtual int custom_layer_to_index(const char* type);$/;"	p	class:ncnn::Net	access:public	signature:(const char* type)
cv	./include/ncnn/simpleocv.h	/^namespace cv {$/;"	n
cv::FILLED	./include/ncnn/simpleocv.h	/^    FILLED = -1$/;"	e	enum:cv::__anon3
cv::FONT_HERSHEY_SIMPLEX	./include/ncnn/simpleocv.h	/^    FONT_HERSHEY_SIMPLEX = 0$/;"	e	enum:cv::__anon4
cv::IMREAD_COLOR	./include/ncnn/simpleocv.h	/^    IMREAD_COLOR = 1$/;"	e	enum:cv::ImreadModes
cv::IMREAD_GRAYSCALE	./include/ncnn/simpleocv.h	/^    IMREAD_GRAYSCALE = 0,$/;"	e	enum:cv::ImreadModes
cv::IMREAD_UNCHANGED	./include/ncnn/simpleocv.h	/^    IMREAD_UNCHANGED = -1,$/;"	e	enum:cv::ImreadModes
cv::IMWRITE_JPEG_QUALITY	./include/ncnn/simpleocv.h	/^    IMWRITE_JPEG_QUALITY = 1$/;"	e	enum:cv::ImwriteFlags
cv::ImreadModes	./include/ncnn/simpleocv.h	/^enum ImreadModes$/;"	g	namespace:cv
cv::ImwriteFlags	./include/ncnn/simpleocv.h	/^enum ImwriteFlags$/;"	g	namespace:cv
cv::Mat	./include/ncnn/simpleocv.h	/^struct NCNN_EXPORT Mat$/;"	s	namespace:cv
cv::Mat::Mat	./include/ncnn/simpleocv.h	/^    Mat()$/;"	f	struct:cv::Mat	access:public	signature:()
cv::Mat::Mat	./include/ncnn/simpleocv.h	/^    Mat(const Mat& m)$/;"	f	struct:cv::Mat	access:public	signature:(const Mat& m)
cv::Mat::Mat	./include/ncnn/simpleocv.h	/^    Mat(int _rows, int _cols, int flags)$/;"	f	struct:cv::Mat	access:public	signature:(int _rows, int _cols, int flags)
cv::Mat::Mat	./include/ncnn/simpleocv.h	/^    Mat(int _rows, int _cols, int flags, void* _data)$/;"	f	struct:cv::Mat	access:public	signature:(int _rows, int _cols, int flags, void* _data)
cv::Mat::c	./include/ncnn/simpleocv.h	/^    int c;$/;"	m	struct:cv::Mat	access:public
cv::Mat::channels	./include/ncnn/simpleocv.h	/^    int channels() const$/;"	f	struct:cv::Mat	access:public	signature:() const
cv::Mat::clone	./include/ncnn/simpleocv.h	/^    Mat clone() const$/;"	f	struct:cv::Mat	access:public	signature:() const
cv::Mat::cols	./include/ncnn/simpleocv.h	/^    int cols;$/;"	m	struct:cv::Mat	access:public
cv::Mat::create	./include/ncnn/simpleocv.h	/^    void create(int _rows, int _cols, int flags)$/;"	f	struct:cv::Mat	access:public	signature:(int _rows, int _cols, int flags)
cv::Mat::data	./include/ncnn/simpleocv.h	/^    uchar* data;$/;"	m	struct:cv::Mat	access:public
cv::Mat::empty	./include/ncnn/simpleocv.h	/^    bool empty() const$/;"	f	struct:cv::Mat	access:public	signature:() const
cv::Mat::operator ()	./include/ncnn/simpleocv.h	/^    Mat operator()(const Rect& roi) const$/;"	f	struct:cv::Mat	access:public	signature:(const Rect& roi) const
cv::Mat::operator =	./include/ncnn/simpleocv.h	/^    Mat& operator=(const Mat& m)$/;"	f	struct:cv::Mat	access:public	signature:(const Mat& m)
cv::Mat::operator =	./include/ncnn/simpleocv.h	/^    Mat& operator=(const Scalar& s)$/;"	f	struct:cv::Mat	access:public	signature:(const Scalar& s)
cv::Mat::ptr	./include/ncnn/simpleocv.h	/^    _Tp* ptr(int y)$/;"	f	struct:cv::Mat	access:public	signature:(int y)
cv::Mat::ptr	./include/ncnn/simpleocv.h	/^    const _Tp* ptr(int y) const$/;"	f	struct:cv::Mat	access:public	signature:(int y) const
cv::Mat::ptr	./include/ncnn/simpleocv.h	/^    const uchar* ptr(int y) const$/;"	f	struct:cv::Mat	access:public	signature:(int y) const
cv::Mat::ptr	./include/ncnn/simpleocv.h	/^    uchar* ptr(int y)$/;"	f	struct:cv::Mat	access:public	signature:(int y)
cv::Mat::refcount	./include/ncnn/simpleocv.h	/^    int* refcount;$/;"	m	struct:cv::Mat	access:public
cv::Mat::release	./include/ncnn/simpleocv.h	/^    void release()$/;"	f	struct:cv::Mat	access:public	signature:()
cv::Mat::rows	./include/ncnn/simpleocv.h	/^    int rows;$/;"	m	struct:cv::Mat	access:public
cv::Mat::total	./include/ncnn/simpleocv.h	/^    size_t total() const$/;"	f	struct:cv::Mat	access:public	signature:() const
cv::Mat::type	./include/ncnn/simpleocv.h	/^    int type() const$/;"	f	struct:cv::Mat	access:public	signature:() const
cv::Mat::~Mat	./include/ncnn/simpleocv.h	/^    ~Mat()$/;"	f	struct:cv::Mat	access:public	signature:()
cv::Point	./include/ncnn/simpleocv.h	/^typedef Point_<int> Point;$/;"	t	namespace:cv
cv::Point2f	./include/ncnn/simpleocv.h	/^typedef Point_<float> Point2f;$/;"	t	namespace:cv
cv::Point_	./include/ncnn/simpleocv.h	/^struct Point_$/;"	s	namespace:cv
cv::Point_::Point_	./include/ncnn/simpleocv.h	/^    Point_()$/;"	f	struct:cv::Point_	access:public	signature:()
cv::Point_::Point_	./include/ncnn/simpleocv.h	/^    Point_(_Tp _x, _Tp _y)$/;"	f	struct:cv::Point_	access:public	signature:(_Tp _x, _Tp _y)
cv::Point_::operator Point_<_Tp2>	./include/ncnn/simpleocv.h	/^    operator Point_<_Tp2>() const$/;"	f	struct:cv::Point_	access:public	signature:() const
cv::Point_::x	./include/ncnn/simpleocv.h	/^    _Tp x;$/;"	m	struct:cv::Point_	access:public
cv::Point_::y	./include/ncnn/simpleocv.h	/^    _Tp y;$/;"	m	struct:cv::Point_	access:public
cv::Rect	./include/ncnn/simpleocv.h	/^typedef Rect_<int> Rect;$/;"	t	namespace:cv
cv::Rect2f	./include/ncnn/simpleocv.h	/^typedef Rect_<float> Rect2f;$/;"	t	namespace:cv
cv::Rect_	./include/ncnn/simpleocv.h	/^struct Rect_$/;"	s	namespace:cv
cv::Rect_::Rect_	./include/ncnn/simpleocv.h	/^    Rect_()$/;"	f	struct:cv::Rect_	access:public	signature:()
cv::Rect_::Rect_	./include/ncnn/simpleocv.h	/^    Rect_(Point_<_Tp> _p, Size_<_Tp> _size)$/;"	f	struct:cv::Rect_	access:public	signature:(Point_<_Tp> _p, Size_<_Tp> _size)
cv::Rect_::Rect_	./include/ncnn/simpleocv.h	/^    Rect_(_Tp _x, _Tp _y, _Tp _w, _Tp _h)$/;"	f	struct:cv::Rect_	access:public	signature:(_Tp _x, _Tp _y, _Tp _w, _Tp _h)
cv::Rect_::area	./include/ncnn/simpleocv.h	/^    _Tp area() const$/;"	f	struct:cv::Rect_	access:public	signature:() const
cv::Rect_::height	./include/ncnn/simpleocv.h	/^    _Tp height;$/;"	m	struct:cv::Rect_	access:public
cv::Rect_::operator Rect_<_Tp2>	./include/ncnn/simpleocv.h	/^    operator Rect_<_Tp2>() const$/;"	f	struct:cv::Rect_	access:public	signature:() const
cv::Rect_::width	./include/ncnn/simpleocv.h	/^    _Tp width;$/;"	m	struct:cv::Rect_	access:public
cv::Rect_::x	./include/ncnn/simpleocv.h	/^    _Tp x;$/;"	m	struct:cv::Rect_	access:public
cv::Rect_::y	./include/ncnn/simpleocv.h	/^    _Tp y;$/;"	m	struct:cv::Rect_	access:public
cv::Scalar	./include/ncnn/simpleocv.h	/^typedef Scalar_<uchar> Scalar;$/;"	t	namespace:cv
cv::Scalar_	./include/ncnn/simpleocv.h	/^struct Scalar_$/;"	s	namespace:cv
cv::Scalar_::Scalar_	./include/ncnn/simpleocv.h	/^    Scalar_()$/;"	f	struct:cv::Scalar_	access:public	signature:()
cv::Scalar_::Scalar_	./include/ncnn/simpleocv.h	/^    Scalar_(_Tp _v0)$/;"	f	struct:cv::Scalar_	access:public	signature:(_Tp _v0)
cv::Scalar_::Scalar_	./include/ncnn/simpleocv.h	/^    Scalar_(_Tp _v0, _Tp _v1, _Tp _v2)$/;"	f	struct:cv::Scalar_	access:public	signature:(_Tp _v0, _Tp _v1, _Tp _v2)
cv::Scalar_::Scalar_	./include/ncnn/simpleocv.h	/^    Scalar_(_Tp _v0, _Tp _v1, _Tp _v2, _Tp _v3)$/;"	f	struct:cv::Scalar_	access:public	signature:(_Tp _v0, _Tp _v1, _Tp _v2, _Tp _v3)
cv::Scalar_::operator []	./include/ncnn/simpleocv.h	/^    _Tp operator[](const int i)$/;"	f	struct:cv::Scalar_	access:public	signature:(const int i)
cv::Scalar_::operator []	./include/ncnn/simpleocv.h	/^    const _Tp operator[](const int i) const$/;"	f	struct:cv::Scalar_	access:public	signature:(const int i) const
cv::Scalar_::v	./include/ncnn/simpleocv.h	/^    _Tp v[4];$/;"	m	struct:cv::Scalar_	access:public
cv::Size	./include/ncnn/simpleocv.h	/^typedef Size_<int> Size;$/;"	t	namespace:cv
cv::Size2f	./include/ncnn/simpleocv.h	/^typedef Size_<float> Size2f;$/;"	t	namespace:cv
cv::Size_	./include/ncnn/simpleocv.h	/^struct Size_$/;"	s	namespace:cv
cv::Size_::Size_	./include/ncnn/simpleocv.h	/^    Size_()$/;"	f	struct:cv::Size_	access:public	signature:()
cv::Size_::Size_	./include/ncnn/simpleocv.h	/^    Size_(_Tp _w, _Tp _h)$/;"	f	struct:cv::Size_	access:public	signature:(_Tp _w, _Tp _h)
cv::Size_::height	./include/ncnn/simpleocv.h	/^    _Tp height;$/;"	m	struct:cv::Size_	access:public
cv::Size_::operator Size_<_Tp2>	./include/ncnn/simpleocv.h	/^    operator Size_<_Tp2>() const$/;"	f	struct:cv::Size_	access:public	signature:() const
cv::Size_::width	./include/ncnn/simpleocv.h	/^    _Tp width;$/;"	m	struct:cv::Size_	access:public
cv::circle	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void circle(Mat& img, Point center, int radius, const Scalar& color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, Point center, int radius, const Scalar& color, int thickness = 1)
cv::getTextSize	./include/ncnn/simpleocv.h	/^NCNN_EXPORT Size getTextSize(const std::string& text, int fontFace, double fontScale, int thickness, int* baseLine);$/;"	p	namespace:cv	signature:(const std::string& text, int fontFace, double fontScale, int thickness, int* baseLine)
cv::imread	./include/ncnn/simpleocv.h	/^NCNN_EXPORT Mat imread(const std::string& path, int flags = IMREAD_COLOR);$/;"	p	namespace:cv	signature:(const std::string& path, int flags = IMREAD_COLOR)
cv::imshow	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void imshow(const std::string& name, const Mat& m);$/;"	p	namespace:cv	signature:(const std::string& name, const Mat& m)
cv::imwrite	./include/ncnn/simpleocv.h	/^NCNN_EXPORT bool imwrite(const std::string& path, const Mat& m, const std::vector<int>& params = std::vector<int>());$/;"	p	namespace:cv	signature:(const std::string& path, const Mat& m, const std::vector<int>& params = std::vector<int>())
cv::line	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void line(Mat& img, Point p0, Point p1, const Scalar& color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, Point p0, Point p1, const Scalar& color, int thickness = 1)
cv::operator &	./include/ncnn/simpleocv.h	/^static inline Rect_<_Tp> operator&(const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv	signature:(const Rect_<_Tp>& a, const Rect_<_Tp>& b)
cv::operator &=	./include/ncnn/simpleocv.h	/^static inline Rect_<_Tp>& operator&=(Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv	signature:(Rect_<_Tp>& a, const Rect_<_Tp>& b)
cv::operator |	./include/ncnn/simpleocv.h	/^static inline Rect_<_Tp> operator|(const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv	signature:(const Rect_<_Tp>& a, const Rect_<_Tp>& b)
cv::operator |=	./include/ncnn/simpleocv.h	/^static inline Rect_<_Tp>& operator|=(Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv	signature:(Rect_<_Tp>& a, const Rect_<_Tp>& b)
cv::putText	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void putText(Mat& img, const std::string& text, Point org, int fontFace, double fontScale, Scalar color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, const std::string& text, Point org, int fontFace, double fontScale, Scalar color, int thickness = 1)
cv::rectangle	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void rectangle(Mat& img, Point pt1, Point pt2, const Scalar& color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, Point pt1, Point pt2, const Scalar& color, int thickness = 1)
cv::rectangle	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void rectangle(Mat& img, Rect rec, const Scalar& color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, Rect rec, const Scalar& color, int thickness = 1)
cv::resize	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void resize(const Mat& src, Mat& dst, const Size& size, float sw = 0.f, float sh = 0.f, int flags = 0);$/;"	p	namespace:cv	signature:(const Mat& src, Mat& dst, const Size& size, float sw = 0.f, float sh = 0.f, int flags = 0)
cv::saturate_cast	./include/ncnn/simpleocv.h	/^inline uchar saturate_cast<uchar>(int v)$/;"	f	namespace:cv	signature:(int v)
cv::saturate_cast	./include/ncnn/simpleocv.h	/^static inline _Tp saturate_cast(int v)$/;"	f	namespace:cv	signature:(int v)
cv::waitKey	./include/ncnn/simpleocv.h	/^NCNN_EXPORT int waitKey(int delay = 0);$/;"	p	namespace:cv	signature:(int delay = 0)
d	./include/ncnn/allocator.h	/^    PoolAllocatorPrivate* const d;$/;"	m	class:ncnn::PoolAllocator	access:private
d	./include/ncnn/allocator.h	/^    UnlockedPoolAllocatorPrivate* const d;$/;"	m	class:ncnn::UnlockedPoolAllocator	access:private
d	./include/ncnn/allocator.h	/^    VkBlobAllocatorPrivate* const d;$/;"	m	class:ncnn::VkBlobAllocator	access:private
d	./include/ncnn/allocator.h	/^    VkStagingAllocatorPrivate* const d;$/;"	m	class:ncnn::VkStagingAllocator	access:private
d	./include/ncnn/allocator.h	/^    VkWeightAllocatorPrivate* const d;$/;"	m	class:ncnn::VkWeightAllocator	access:private
d	./include/ncnn/allocator.h	/^    VkWeightStagingAllocatorPrivate* const d;$/;"	m	class:ncnn::VkWeightStagingAllocator	access:private
d	./include/ncnn/command.h	/^    VkComputePrivate* const d;$/;"	m	class:ncnn::VkCompute	access:private
d	./include/ncnn/command.h	/^    VkTransferPrivate* const d;$/;"	m	class:ncnn::VkTransfer	access:private
d	./include/ncnn/datareader.h	/^    DataReaderFromAndroidAssetPrivate* const d;$/;"	m	class:ncnn::DataReaderFromAndroidAsset	access:private
d	./include/ncnn/datareader.h	/^    DataReaderFromMemoryPrivate* const d;$/;"	m	class:ncnn::DataReaderFromMemory	access:private
d	./include/ncnn/datareader.h	/^    DataReaderFromStdioPrivate* const d;$/;"	m	class:ncnn::DataReaderFromStdio	access:private
d	./include/ncnn/gpu.h	/^    GpuInfoPrivate* const d;$/;"	m	class:ncnn::GpuInfo	access:private
d	./include/ncnn/gpu.h	/^    VulkanDevicePrivate* const d;$/;"	m	class:ncnn::VulkanDevice	access:private
d	./include/ncnn/mat.h	/^    int d;$/;"	m	class:ncnn::Mat	access:public
d	./include/ncnn/mat.h	/^    int d;$/;"	m	class:ncnn::VkImageMat	access:public
d	./include/ncnn/mat.h	/^    int d;$/;"	m	class:ncnn::VkMat	access:public
d	./include/ncnn/modelbin.h	/^    ModelBinFromDataReaderPrivate* const d;$/;"	m	class:ncnn::ModelBinFromDataReader	access:private
d	./include/ncnn/modelbin.h	/^    ModelBinFromMatArrayPrivate* const d;$/;"	m	class:ncnn::ModelBinFromMatArray	access:private
d	./include/ncnn/net.h	/^    ExtractorPrivate* const d;$/;"	m	class:ncnn::Extractor	access:private
d	./include/ncnn/net.h	/^    NetPrivate* const d;$/;"	m	class:ncnn::Net	access:private
d	./include/ncnn/paramdict.h	/^    ParamDictPrivate* const d;$/;"	m	class:ncnn::ParamDict	access:private
d	./include/ncnn/pipeline.h	/^    PipelinePrivate* const d;$/;"	m	class:ncnn::Pipeline	access:private
d	./include/ncnn/pipelinecache.h	/^    PipelineCachePrivate* const d;$/;"	m	class:ncnn::PipelineCache	access:private
data	./include/ncnn/mat.h	/^    VkBufferMemory* data;$/;"	m	class:ncnn::VkMat	access:public
data	./include/ncnn/mat.h	/^    VkImageMemory* data;$/;"	m	class:ncnn::VkImageMat	access:public
data	./include/ncnn/mat.h	/^    void* data;$/;"	m	class:ncnn::Mat	access:public
data	./include/ncnn/simpleocv.h	/^    uchar* data;$/;"	m	struct:cv::Mat	access:public
data	./include/ncnn/simplestl.h	/^    T* data() const$/;"	f	struct:std::vector	access:public	signature:() const
data_	./include/ncnn/simplestl.h	/^    T data_;$/;"	m	struct:std::node	access:public
data_	./include/ncnn/simplestl.h	/^    T* data_;$/;"	m	struct:std::vector	access:protected
dependencyCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t dependencyCount;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
dependencyFlags	./include/ncnn/vulkan_header_fix.h	/^    VkDependencyFlags dependencyFlags;$/;"	m	struct:VkSubpassDependency2KHR	access:public
depth	./include/ncnn/allocator.h	/^    int depth;$/;"	m	class:ncnn::VkImageMemory	access:public
depth	./include/ncnn/mat.h	/^    Mat depth(int z);$/;"	p	class:ncnn::Mat	access:public	signature:(int z)
depth	./include/ncnn/mat.h	/^    const Mat depth(int z) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int z) const
depth	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::depth(int z)$/;"	f	class:ncnn::Mat	signature:(int z)
depth	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::depth(int z) const$/;"	f	class:ncnn::Mat	signature:(int z) const
depth_range	./include/ncnn/mat.h	/^    Mat depth_range(int z, int depths);$/;"	p	class:ncnn::Mat	access:public	signature:(int z, int depths)
depth_range	./include/ncnn/mat.h	/^    const Mat depth_range(int z, int depths) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int z, int depths) const
depth_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::depth_range(int z, int depths)$/;"	f	class:ncnn::Mat	signature:(int z, int depths)
depth_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::depth_range(int z, int depths) const$/;"	f	class:ncnn::Mat	signature:(int z, int depths) const
dequantize_from_int32	./include/ncnn/mat.h	/^NCNN_EXPORT void dequantize_from_int32(const Mat& src, Mat& dst, const Mat& scale_data, const Mat& bias_data, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Mat& scale_data, const Mat& bias_data, const Option& opt = Option())
description	./src/FastestDet.cpp	/^    unsigned char description[32];  \/\/字符串描述信息$/;"	m	struct:camera_format	file:	access:public
descriptor_update_template	./include/ncnn/pipeline.h	/^    VkDescriptorUpdateTemplateKHR descriptor_update_template() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
descriptorset_layout	./include/ncnn/pipeline.h	/^    VkDescriptorSetLayout descriptorset_layout() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
destroy	./include/ncnn/pipeline.h	/^    void destroy();$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:()
destroy_gpu_instance	./include/ncnn/gpu.h	/^NCNN_EXPORT void destroy_gpu_instance();$/;"	p	namespace:ncnn	signature:()
destroy_pipeline	./include/ncnn/c_api.h	/^    int (*destroy_pipeline)(ncnn_layer_t layer, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
destroy_pipeline	./include/ncnn/layer.h	/^    virtual int destroy_pipeline(const Option& opt);$/;"	p	class:ncnn::Layer	access:public	signature:(const Option& opt)
destroyer	./include/ncnn/c_api.h	/^    ncnn_layer_destroyer_t destroyer;$/;"	m	struct:__ncnn_net_custom_layer_factory_t	access:public
destroyer	./include/ncnn/layer.h	/^    layer_destroyer_func destroyer;$/;"	m	struct:ncnn::custom_layer_registry_entry	access:public
detect	./src/FastestDet.cpp	/^    vector<Object> detect(Mat frame);$/;"	p	class:FastestDet	file:	access:public	signature:(Mat frame)
detect	./src/FastestDet.cpp	/^vector<Object> FastestDet::detect(Mat frame)$/;"	f	class:FastestDet	signature:(Mat frame)
device_id	./include/ncnn/gpu.h	/^    uint32_t device_id() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
device_name	./include/ncnn/gpu.h	/^    const char* device_name() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
dims	./include/ncnn/mat.h	/^    int dims;$/;"	m	class:ncnn::Mat	access:public
dims	./include/ncnn/mat.h	/^    int dims;$/;"	m	class:ncnn::VkImageMat	access:public
dims	./include/ncnn/mat.h	/^    int dims;$/;"	m	class:ncnn::VkMat	access:public
directory_empty	./src/FastestDet.cpp	/^int directory_empty = 1;$/;"	v
disable	./include/ncnn/cpu.h	/^    void disable(int cpu);$/;"	p	class:ncnn::CpuSet	access:public	signature:(int cpu)
disable_all	./include/ncnn/cpu.h	/^    void disable_all();$/;"	p	class:ncnn::CpuSet	access:public	signature:()
distance_to_my_car	./src/FastestDet.cpp	/^    float distance_to_my_car;$/;"	m	struct:Object	file:	access:public
drawPred	./src/FastestDet.cpp	/^    void drawPred(float conf, int left, int top, int right, int bottom, Mat& frame, int classid);$/;"	p	class:FastestDet	file:	access:private	signature:(float conf, int left, int top, int right, int bottom, Mat& frame, int classid)
draw_circle_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c1(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
draw_circle_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c1(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness)
draw_circle_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c2(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
draw_circle_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c2(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness)
draw_circle_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c3(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
draw_circle_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c3(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness)
draw_circle_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c4(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
draw_circle_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c4(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness)
draw_circle_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_yuv420sp(unsigned char* yuv420sp, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* yuv420sp, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
draw_line_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c1(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_line_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c1(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_line_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c2(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_line_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c2(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_line_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c3(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_line_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c3(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_line_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c4(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_line_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c4(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_line_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_yuv420sp(unsigned char* yuv420sp, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* yuv420sp, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
draw_rectangle_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c1(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_rectangle_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c1(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_rectangle_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c2(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_rectangle_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c2(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_rectangle_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c3(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_rectangle_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c3(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_rectangle_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c4(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_rectangle_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c4(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_rectangle_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_yuv420sp(unsigned char* yuv420sp, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* yuv420sp, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
draw_text_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c1(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
draw_text_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c1(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color)
draw_text_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c2(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
draw_text_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c2(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color)
draw_text_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c3(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
draw_text_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c3(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color)
draw_text_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c4(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
draw_text_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c4(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color)
draw_text_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_yuv420sp(unsigned char* yuv420sp, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* yuv420sp, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
driver_version	./include/ncnn/gpu.h	/^    uint32_t driver_version() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
dstAccessMask	./include/ncnn/vulkan_header_fix.h	/^    VkAccessFlags dstAccessMask;$/;"	m	struct:VkSubpassDependency2KHR	access:public
dstStageMask	./include/ncnn/vulkan_header_fix.h	/^    VkPipelineStageFlags dstStageMask;$/;"	m	struct:VkSubpassDependency2KHR	access:public
dstSubpass	./include/ncnn/vulkan_header_fix.h	/^    uint32_t dstSubpass;$/;"	m	struct:VkSubpassDependency2KHR	access:public
elembits	./include/ncnn/mat.h	/^    int elembits() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
elembits	./include/ncnn/mat.h	/^    int elembits() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
elembits	./include/ncnn/mat.h	/^    int elembits() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
elembits	./include/ncnn/mat.h	/^NCNN_FORCEINLINE int Mat::elembits() const$/;"	f	class:ncnn::Mat	signature:() const
elembits	./include/ncnn/mat.h	/^NCNN_FORCEINLINE int VkImageMat::elembits() const$/;"	f	class:ncnn::VkImageMat	signature:() const
elembits	./include/ncnn/mat.h	/^NCNN_FORCEINLINE int VkMat::elembits() const$/;"	f	class:ncnn::VkMat	signature:() const
elempack	./include/ncnn/mat.h	/^    int elempack;$/;"	m	class:ncnn::Mat	access:public
elempack	./include/ncnn/mat.h	/^    int elempack;$/;"	m	class:ncnn::VkImageMat	access:public
elempack	./include/ncnn/mat.h	/^    int elempack;$/;"	m	class:ncnn::VkMat	access:public
elemsize	./include/ncnn/mat.h	/^    size_t elemsize;$/;"	m	class:ncnn::Mat	access:public
elemsize	./include/ncnn/mat.h	/^    size_t elemsize;$/;"	m	class:ncnn::VkImageMat	access:public
elemsize	./include/ncnn/mat.h	/^    size_t elemsize;$/;"	m	class:ncnn::VkMat	access:public
empty	./include/ncnn/mat.h	/^    bool empty() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
empty	./include/ncnn/mat.h	/^    bool empty() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
empty	./include/ncnn/mat.h	/^    bool empty() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
empty	./include/ncnn/mat.h	/^NCNN_FORCEINLINE bool Mat::empty() const$/;"	f	class:ncnn::Mat	signature:() const
empty	./include/ncnn/mat.h	/^NCNN_FORCEINLINE bool VkImageMat::empty() const$/;"	f	class:ncnn::VkImageMat	signature:() const
empty	./include/ncnn/mat.h	/^NCNN_FORCEINLINE bool VkMat::empty() const$/;"	f	class:ncnn::VkMat	signature:() const
empty	./include/ncnn/simpleocv.h	/^    bool empty() const$/;"	f	struct:cv::Mat	access:public	signature:() const
empty	./include/ncnn/simplestl.h	/^    bool empty() const$/;"	f	struct:std::list	access:public	signature:() const
empty	./include/ncnn/simplestl.h	/^    bool empty() const$/;"	f	struct:std::vector	access:public	signature:() const
enable	./include/ncnn/cpu.h	/^    void enable(int cpu);$/;"	p	class:ncnn::CpuSet	access:public	signature:(int cpu)
end	./include/ncnn/simplestl.h	/^    T* end() const$/;"	f	struct:std::vector	access:public	signature:() const
end	./include/ncnn/simplestl.h	/^    iter_list<T> end() const$/;"	f	struct:std::list	access:public	signature:() const
erase	./include/ncnn/simplestl.h	/^    T* erase(T* pos)$/;"	f	struct:std::vector	access:public	signature:(T* pos)
erase	./include/ncnn/simplestl.h	/^    iter_list<T> erase(iter_list<T> pos)$/;"	f	struct:std::list	access:public	signature:(iter_list<T> pos)
external_format	./include/ncnn/allocator.h	/^    uint64_t external_format() const;$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:() const
extract	./include/ncnn/net.h	/^    int extract(const char* blob_name, Mat& feat, int type = 0);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, Mat& feat, int type = 0)
extract	./include/ncnn/net.h	/^    int extract(const char* blob_name, VkImageMat& feat, VkCompute& cmd);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, VkImageMat& feat, VkCompute& cmd)
extract	./include/ncnn/net.h	/^    int extract(const char* blob_name, VkMat& feat, VkCompute& cmd);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, VkMat& feat, VkCompute& cmd)
extract	./include/ncnn/net.h	/^    int extract(int blob_index, Mat& feat, int type = 0);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, Mat& feat, int type = 0)
extract	./include/ncnn/net.h	/^    int extract(int blob_index, VkImageMat& feat, VkCompute& cmd);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, VkImageMat& feat, VkCompute& cmd)
extract	./include/ncnn/net.h	/^    int extract(int blob_index, VkMat& feat, VkCompute& cmd);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, VkMat& feat, VkCompute& cmd)
f	./include/ncnn/mat.h	/^    float f;$/;"	m	union:ncnn::vk_constant_type	access:public
f	./include/ncnn/mat.h	/^    float f;$/;"	m	union:ncnn::vk_specialization_type	access:public
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr) = 0;$/;"	p	class:ncnn::VkAllocator	access:public	signature:(VkBufferMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(VkBufferMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(VkBufferMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(VkBufferMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(VkBufferMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(VkBufferMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr) = 0;$/;"	p	class:ncnn::VkAllocator	access:public	signature:(VkImageMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(VkImageMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(VkImageMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(VkImageMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(VkImageMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(VkImageMemory* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(void* ptr) = 0;$/;"	p	class:ncnn::Allocator	access:public	signature:(void* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(void* ptr);$/;"	p	class:ncnn::PoolAllocator	access:public	signature:(void* ptr)
fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(void* ptr);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:(void* ptr)
fastFree	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE void fastFree(void* ptr)$/;"	f	namespace:ncnn	signature:(void* ptr)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size) = 0;$/;"	p	class:ncnn::VkAllocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack) = 0;$/;"	p	class:ncnn::VkAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
fastMalloc	./include/ncnn/allocator.h	/^    virtual void* fastMalloc(size_t size) = 0;$/;"	p	class:ncnn::Allocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^    virtual void* fastMalloc(size_t size);$/;"	p	class:ncnn::PoolAllocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^    virtual void* fastMalloc(size_t size);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:(size_t size)
fastMalloc	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE void* fastMalloc(size_t size)$/;"	f	namespace:ncnn	signature:(size_t size)
fast_free	./include/ncnn/c_api.h	/^    void (*fast_free)(ncnn_allocator_t allocator, void* ptr);$/;"	m	struct:__ncnn_allocator_t	access:public
fast_malloc	./include/ncnn/c_api.h	/^    void* (*fast_malloc)(ncnn_allocator_t allocator, size_t size);$/;"	m	struct:__ncnn_allocator_t	access:public
fb_dev_init	./src/FastestDet.cpp	/^static int fb_dev_init(void)$/;"	f	file:	signature:(void)
fb_fd	./src/FastestDet.cpp	/^static int fb_fd = -1;                  \/\/LCD设备文件描述符$/;"	v	file:
filename	./src/FastestDet.cpp	/^const char* filename = ".\/Fast_res_image.png";$/;"	v
fill	./include/ncnn/mat.h	/^    void fill(T v);$/;"	p	class:ncnn::Mat	access:public	signature:(T v)
fill	./include/ncnn/mat.h	/^    void fill(__m128i _v);$/;"	p	class:ncnn::Mat	access:public	signature:(__m128i _v)
fill	./include/ncnn/mat.h	/^    void fill(__m256 _v);$/;"	p	class:ncnn::Mat	access:public	signature:(__m256 _v)
fill	./include/ncnn/mat.h	/^    void fill(float v);$/;"	p	class:ncnn::Mat	access:public	signature:(float v)
fill	./include/ncnn/mat.h	/^    void fill(float16x4_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(float16x4_t _v)
fill	./include/ncnn/mat.h	/^    void fill(float16x8_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(float16x8_t _v)
fill	./include/ncnn/mat.h	/^    void fill(float32x4_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(float32x4_t _v)
fill	./include/ncnn/mat.h	/^    void fill(int v);$/;"	p	class:ncnn::Mat	access:public	signature:(int v)
fill	./include/ncnn/mat.h	/^    void fill(int32x4_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(int32x4_t _v)
fill	./include/ncnn/mat.h	/^    void fill(int32x4_t _v0, int32x4_t _v1);$/;"	p	class:ncnn::Mat	access:public	signature:(int32x4_t _v0, int32x4_t _v1)
fill	./include/ncnn/mat.h	/^    void fill(uint16x4_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(uint16x4_t _v)
fill	./include/ncnn/mat.h	/^    void fill(v4f32 _v);$/;"	p	class:ncnn::Mat	access:public	signature:(v4f32 _v)
fill	./include/ncnn/mat.h	/^    void fill(vfloat16m1_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(vfloat16m1_t _v)
fill	./include/ncnn/mat.h	/^    void fill(vfloat32m1_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(vfloat32m1_t _v)
fill	./include/ncnn/mat.h	/^    void fill(vint8m1_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(vint8m1_t _v)
fill	./include/ncnn/mat.h	/^    void fill(vuint16m1_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(vuint16m1_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(T _v)$/;"	f	class:ncnn::Mat	signature:(T _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(__m128i _v)$/;"	f	class:ncnn::Mat	signature:(__m128i _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(__m256 _v)$/;"	f	class:ncnn::Mat	signature:(__m256 _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(float _v)$/;"	f	class:ncnn::Mat	signature:(float _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(float16x4_t _v)$/;"	f	class:ncnn::Mat	signature:(float16x4_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(float16x8_t _v)$/;"	f	class:ncnn::Mat	signature:(float16x8_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(float32x4_t _v)$/;"	f	class:ncnn::Mat	signature:(float32x4_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(int _v)$/;"	f	class:ncnn::Mat	signature:(int _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(int32x4_t _v)$/;"	f	class:ncnn::Mat	signature:(int32x4_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(int32x4_t _v0, int32x4_t _v1)$/;"	f	class:ncnn::Mat	signature:(int32x4_t _v0, int32x4_t _v1)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(uint16x4_t _v)$/;"	f	class:ncnn::Mat	signature:(uint16x4_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(v4f32 _v)$/;"	f	class:ncnn::Mat	signature:(v4f32 _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(vfloat16m1_t _v)$/;"	f	class:ncnn::Mat	signature:(vfloat16m1_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(vfloat32m1_t _v)$/;"	f	class:ncnn::Mat	signature:(vfloat32m1_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(vint8m1_t _v)$/;"	f	class:ncnn::Mat	signature:(vint8m1_t _v)
fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(vuint16m1_t _v)$/;"	f	class:ncnn::Mat	signature:(vuint16m1_t _v)
finalLayout	./include/ncnn/vulkan_header_fix.h	/^    VkImageLayout finalLayout;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
find_blob_index_by_name	./include/ncnn/net.h	/^    int find_blob_index_by_name(const char* name) const;$/;"	p	class:ncnn::Net	access:protected	signature:(const char* name) const
find_layer_index_by_name	./include/ncnn/net.h	/^    int find_layer_index_by_name(const char* name) const;$/;"	p	class:ncnn::Net	access:protected	signature:(const char* name) const
find_memory_index	./include/ncnn/gpu.h	/^    uint32_t find_memory_index(uint32_t memory_type_bits, VkFlags required, VkFlags preferred, VkFlags preferred_not) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t memory_type_bits, VkFlags required, VkFlags preferred, VkFlags preferred_not) const
first	./include/ncnn/simplestl.h	/^    T1 first;$/;"	m	struct:std::pair	access:public
flags	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentDescriptionFlags flags;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
flags	./include/ncnn/vulkan_header_fix.h	/^    VkRenderPassCreateFlags flags;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
flags	./include/ncnn/vulkan_header_fix.h	/^    VkSubpassDescriptionFlags flags;$/;"	m	struct:VkSubpassDescription2KHR	access:public
flatten	./include/ncnn/mat.h	/^NCNN_EXPORT void flatten(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
float16_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT float float16_to_float32(unsigned short value);$/;"	p	namespace:ncnn	signature:(unsigned short value)
float32_to_bfloat16	./include/ncnn/mat.h	/^NCNN_EXPORT NCNN_FORCEINLINE unsigned short float32_to_bfloat16(float value)$/;"	f	namespace:ncnn	signature:(float value)
float32_to_float16	./include/ncnn/mat.h	/^NCNN_EXPORT unsigned short float32_to_float16(float value);$/;"	p	namespace:ncnn	signature:(float value)
flush	./include/ncnn/allocator.h	/^    virtual int flush(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkAllocator	access:public	signature:(VkBufferMemory* ptr)
flush_denormals	./include/ncnn/option.h	/^    int flush_denormals;$/;"	m	class:ncnn::Option	access:public
format	./include/ncnn/allocator.h	/^    VkFormat format;$/;"	m	class:ncnn::VkImageMemory	access:public
format	./include/ncnn/vulkan_header_fix.h	/^    VkFormat format;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
forward	./include/ncnn/layer.h	/^    virtual int forward(const Mat& bottom_blob, Mat& top_blob, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const Mat& bottom_blob, Mat& top_blob, const Option& opt) const
forward	./include/ncnn/layer.h	/^    virtual int forward(const VkImageMat& bottom_blob, VkImageMat& top_blob, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const VkImageMat& bottom_blob, VkImageMat& top_blob, VkCompute& cmd, const Option& opt) const
forward	./include/ncnn/layer.h	/^    virtual int forward(const VkMat& bottom_blob, VkMat& top_blob, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const VkMat& bottom_blob, VkMat& top_blob, VkCompute& cmd, const Option& opt) const
forward	./include/ncnn/layer.h	/^    virtual int forward(const std::vector<Mat>& bottom_blobs, std::vector<Mat>& top_blobs, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const std::vector<Mat>& bottom_blobs, std::vector<Mat>& top_blobs, const Option& opt) const
forward	./include/ncnn/layer.h	/^    virtual int forward(const std::vector<VkImageMat>& bottom_blobs, std::vector<VkImageMat>& top_blobs, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const std::vector<VkImageMat>& bottom_blobs, std::vector<VkImageMat>& top_blobs, VkCompute& cmd, const Option& opt) const
forward	./include/ncnn/layer.h	/^    virtual int forward(const std::vector<VkMat>& bottom_blobs, std::vector<VkMat>& top_blobs, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const std::vector<VkMat>& bottom_blobs, std::vector<VkMat>& top_blobs, VkCompute& cmd, const Option& opt) const
forward_1	./include/ncnn/c_api.h	/^    int (*forward_1)(const ncnn_layer_t layer, const ncnn_mat_t bottom_blob, ncnn_mat_t* top_blob, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(Mat& bottom_top_blob, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(Mat& bottom_top_blob, const Option& opt) const
forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(VkImageMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(VkImageMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const
forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(VkMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(VkMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const
forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(std::vector<Mat>& bottom_top_blobs, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(std::vector<Mat>& bottom_top_blobs, const Option& opt) const
forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(std::vector<VkImageMat>& bottom_top_blobs, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(std::vector<VkImageMat>& bottom_top_blobs, VkCompute& cmd, const Option& opt) const
forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(std::vector<VkMat>& bottom_top_blobs, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(std::vector<VkMat>& bottom_top_blobs, VkCompute& cmd, const Option& opt) const
forward_inplace_1	./include/ncnn/c_api.h	/^    int (*forward_inplace_1)(const ncnn_layer_t layer, ncnn_mat_t bottom_top_blob, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
forward_inplace_n	./include/ncnn/c_api.h	/^    int (*forward_inplace_n)(const ncnn_layer_t layer, ncnn_mat_t* bottom_top_blobs, int n, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
forward_n	./include/ncnn/c_api.h	/^    int (*forward_n)(const ncnn_layer_t layer, const ncnn_mat_t* bottom_blobs, int n, ncnn_mat_t* top_blobs, int n2, const ncnn_option_t opt);$/;"	m	struct:__ncnn_layer_t	access:public
frm_height	./src/FastestDet.cpp	/^static int frm_width, frm_height;   \/\/视频帧宽度和高度$/;"	v	file:
frm_width	./src/FastestDet.cpp	/^static int frm_width, frm_height;   \/\/视频帧宽度和高度$/;"	v	file:
from_android_bitmap	./include/ncnn/mat.h	/^    static Mat from_android_bitmap(JNIEnv* env, jobject bitmap, int type_to, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_to, Allocator* allocator = 0)
from_android_bitmap_resize	./include/ncnn/mat.h	/^    static Mat from_android_bitmap_resize(JNIEnv* env, jobject bitmap, int type_to, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_to, int target_width, int target_height, Allocator* allocator = 0)
from_android_bitmap_roi	./include/ncnn/mat.h	/^    static Mat from_android_bitmap_roi(JNIEnv* env, jobject bitmap, int type_to, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_to, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0)
from_android_bitmap_roi_resize	./include/ncnn/mat.h	/^    static Mat from_android_bitmap_roi_resize(JNIEnv* env, jobject bitmap, int type_to, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_to, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0)
from_android_hardware_buffer	./include/ncnn/mat.h	/^    static VkImageMat from_android_hardware_buffer(VkAndroidHardwareBufferImageAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(VkAndroidHardwareBufferImageAllocator* allocator)
from_float16	./include/ncnn/mat.h	/^    static Mat from_float16(const unsigned short* data, int size);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned short* data, int size)
from_pixels	./include/ncnn/mat.h	/^    static Mat from_pixels(const unsigned char* pixels, int type, int w, int h, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, Allocator* allocator = 0)
from_pixels	./include/ncnn/mat.h	/^    static Mat from_pixels(const unsigned char* pixels, int type, int w, int h, int stride, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int stride, Allocator* allocator = 0)
from_pixels_resize	./include/ncnn/mat.h	/^    static Mat from_pixels_resize(const unsigned char* pixels, int type, int w, int h, int stride, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int target_width, int target_height, Allocator* allocator = 0)
from_pixels_resize	./include/ncnn/mat.h	/^    static Mat from_pixels_resize(const unsigned char* pixels, int type, int w, int h, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int target_width, int target_height, Allocator* allocator = 0)
from_pixels_roi	./include/ncnn/mat.h	/^    static Mat from_pixels_roi(const unsigned char* pixels, int type, int w, int h, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0)
from_pixels_roi	./include/ncnn/mat.h	/^    static Mat from_pixels_roi(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0)
from_pixels_roi_resize	./include/ncnn/mat.h	/^    static Mat from_pixels_roi_resize(const unsigned char* pixels, int type, int w, int h, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0)
from_pixels_roi_resize	./include/ncnn/mat.h	/^    static Mat from_pixels_roi_resize(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0)
get	./include/ncnn/paramdict.h	/^    Mat get(int id, const Mat& def) const;$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, const Mat& def) const
get	./include/ncnn/paramdict.h	/^    float get(int id, float def) const;$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, float def) const
get	./include/ncnn/paramdict.h	/^    int get(int id, int def) const;$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, int def) const
get	./include/ncnn/platform.h	/^    void* get() { return (void*)TlsGetValue(key); }$/;"	f	class:ncnn::ThreadLocalStorage	access:public	signature:()
getTextSize	./include/ncnn/simpleocv.h	/^NCNN_EXPORT Size getTextSize(const std::string& text, int fontFace, double fontScale, int thickness, int* baseLine);$/;"	p	namespace:cv	signature:(const std::string& text, int fontFace, double fontScale, int thickness, int* baseLine)
get_affine_transform	./include/ncnn/mat.h	/^NCNN_EXPORT void get_affine_transform(const float* points_from, const float* points_to, int num_point, float* tm);$/;"	p	namespace:ncnn	signature:(const float* points_from, const float* points_to, int num_point, float* tm)
get_big_cpu_count	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_big_cpu_count();$/;"	p	namespace:ncnn	signature:()
get_cpu_count	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_cpu_count();$/;"	p	namespace:ncnn	signature:()
get_cpu_powersave	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_cpu_powersave();$/;"	p	namespace:ncnn	signature:()
get_cpu_thread_affinity_mask	./include/ncnn/cpu.h	/^NCNN_EXPORT const CpuSet& get_cpu_thread_affinity_mask(int powersave);$/;"	p	namespace:ncnn	signature:(int powersave)
get_current_time	./include/ncnn/benchmark.h	/^NCNN_EXPORT double get_current_time();$/;"	p	namespace:ncnn	signature:()
get_default_gpu_index	./include/ncnn/gpu.h	/^NCNN_EXPORT int get_default_gpu_index();$/;"	p	namespace:ncnn	signature:()
get_dummy_buffer	./include/ncnn/gpu.h	/^    VkMat get_dummy_buffer() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
get_dummy_image	./include/ncnn/gpu.h	/^    VkImageMat get_dummy_image() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
get_dummy_image_readonly	./include/ncnn/gpu.h	/^    VkImageMat get_dummy_image_readonly() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
get_flush_denormals	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_flush_denormals();$/;"	p	namespace:ncnn	signature:()
get_gpu_count	./include/ncnn/gpu.h	/^NCNN_EXPORT int get_gpu_count();$/;"	p	namespace:ncnn	signature:()
get_gpu_device	./include/ncnn/gpu.h	/^NCNN_EXPORT VulkanDevice* get_gpu_device(int device_index = get_default_gpu_index());$/;"	p	namespace:ncnn	signature:(int device_index = get_default_gpu_index())
get_gpu_info	./include/ncnn/gpu.h	/^NCNN_EXPORT const GpuInfo& get_gpu_info(int device_index = get_default_gpu_index());$/;"	p	namespace:ncnn	signature:(int device_index = get_default_gpu_index())
get_heap_budget	./include/ncnn/gpu.h	/^    uint32_t get_heap_budget() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
get_kmp_blocktime	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_kmp_blocktime();$/;"	p	namespace:ncnn	signature:()
get_little_cpu_count	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_little_cpu_count();$/;"	p	namespace:ncnn	signature:()
get_omp_dynamic	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_omp_dynamic();$/;"	p	namespace:ncnn	signature:()
get_omp_num_threads	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_omp_num_threads();$/;"	p	namespace:ncnn	signature:()
get_omp_thread_num	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_omp_thread_num();$/;"	p	namespace:ncnn	signature:()
get_pipeline	./include/ncnn/pipelinecache.h	/^    int get_pipeline(const uint32_t* spv_data, size_t spv_data_size, const std::vector<vk_specialization_type>& specializations,$/;"	p	class:ncnn::PipelineCache	access:public	signature:(const uint32_t* spv_data, size_t spv_data_size, const std::vector<vk_specialization_type>& specializations, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z, VkShaderModule* shader_module, VkDescriptorSetLayout* descriptorset_layout, VkPipelineLayout* pipeline_layout, VkPipeline* pipeline, VkDescriptorUpdateTemplateKHR* descriptor_update_template, ShaderInfo& shader_info) const
get_pipeline	./include/ncnn/pipelinecache.h	/^    int get_pipeline(int shader_type_index, const Option& opt, const std::vector<vk_specialization_type>& specializations,$/;"	p	class:ncnn::PipelineCache	access:public	signature:(int shader_type_index, const Option& opt, const std::vector<vk_specialization_type>& specializations, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z, VkShaderModule* shader_module, VkDescriptorSetLayout* descriptorset_layout, VkPipelineLayout* pipeline_layout, VkPipeline* pipeline, VkDescriptorUpdateTemplateKHR* descriptor_update_template, ShaderInfo& shader_info) const
get_pipeline_cache	./include/ncnn/gpu.h	/^    const PipelineCache* get_pipeline_cache() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
get_query_pool_results	./include/ncnn/command.h	/^    int get_query_pool_results(uint32_t first_query, uint32_t query_count, std::vector<uint64_t>& results);$/;"	p	class:ncnn::VkCompute	access:public	signature:(uint32_t first_query, uint32_t query_count, std::vector<uint64_t>& results)
get_rotation_matrix	./include/ncnn/mat.h	/^NCNN_EXPORT void get_rotation_matrix(float angle, float scale, float dx, float dy, float* tm);$/;"	p	namespace:ncnn	signature:(float angle, float scale, float dx, float dy, float* tm)
get_text_drawing_size	./include/ncnn/mat.h	/^NCNN_EXPORT void get_text_drawing_size(const char* text, int fontpixelsize, int* w, int* h);$/;"	p	namespace:ncnn	signature:(const char* text, int fontpixelsize, int* w, int* h)
graphics_queue_count	./include/ncnn/gpu.h	/^    uint32_t graphics_queue_count() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
graphics_queue_family_index	./include/ncnn/gpu.h	/^    uint32_t graphics_queue_family_index() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
greater	./include/ncnn/simplestl.h	/^struct greater$/;"	s	namespace:std
h	./include/ncnn/mat.h	/^    int h;$/;"	m	class:ncnn::Mat	access:public
h	./include/ncnn/mat.h	/^    int h;$/;"	m	class:ncnn::VkImageMat	access:public
h	./include/ncnn/mat.h	/^    int h;$/;"	m	class:ncnn::VkMat	access:public
handle	./include/ncnn/platform.h	/^    HANDLE handle;$/;"	m	class:ncnn::Thread	access:private
hb	./include/ncnn/allocator.h	/^    AHardwareBuffer* hb;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
head_	./include/ncnn/simplestl.h	/^    node<T>* head_;$/;"	m	struct:std::list	access:protected
heapBudget	./include/ncnn/vulkan_header_fix.h	/^    VkDeviceSize heapBudget[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT	access:public
heapUsage	./include/ncnn/vulkan_header_fix.h	/^    VkDeviceSize heapUsage[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT	access:public
height	./include/ncnn/allocator.h	/^    int height() const;$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:() const
height	./include/ncnn/allocator.h	/^    int height;$/;"	m	class:ncnn::VkImageMemory	access:public
height	./include/ncnn/simpleocv.h	/^    _Tp height;$/;"	m	struct:cv::Rect_	access:public
height	./include/ncnn/simpleocv.h	/^    _Tp height;$/;"	m	struct:cv::Size_	access:public
height	./src/FastestDet.cpp	/^static int height;                      \/\/LCD高度$/;"	v	file:
i	./include/ncnn/mat.h	/^    int i;$/;"	m	union:ncnn::vk_constant_type	access:public
i	./include/ncnn/mat.h	/^    int i;$/;"	m	union:ncnn::vk_specialization_type	access:public
ii	./src/FastestDet.cpp	/^static int ii = 0, jj = 0;$/;"	v	file:
image	./include/ncnn/allocator.h	/^    VkImage image;$/;"	m	class:ncnn::VkImageMemory	access:public
image	./include/ncnn/mat.h	/^    VkImage image() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
image	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImage VkImageMat::image() const$/;"	f	class:ncnn::VkImageMat	signature:() const
image_layout	./include/ncnn/allocator.h	/^    mutable VkImageLayout image_layout;$/;"	m	class:ncnn::VkImageMemory	access:public
image_memory_type_index	./include/ncnn/allocator.h	/^    uint32_t image_memory_type_index;$/;"	m	class:ncnn::VkAllocator	access:public
imagepath	./src/FastestDet.cpp	/^const char* imagepath = ".\/my_pic.png";$/;"	v
imageview	./include/ncnn/allocator.h	/^    VkImageView imageview;$/;"	m	class:ncnn::VkImageMemory	access:public
imageview	./include/ncnn/mat.h	/^    VkImageView imageview() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
imageview	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageView VkImageMat::imageview() const$/;"	f	class:ncnn::VkImageMat	signature:() const
immutable_texelfetch_sampler	./include/ncnn/gpu.h	/^    const VkSampler* immutable_texelfetch_sampler() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
imread	./include/ncnn/simpleocv.h	/^NCNN_EXPORT Mat imread(const std::string& path, int flags = IMREAD_COLOR);$/;"	p	namespace:cv	signature:(const std::string& path, int flags = IMREAD_COLOR)
imshow	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void imshow(const std::string& name, const Mat& m);$/;"	p	namespace:cv	signature:(const std::string& name, const Mat& m)
imwrite	./include/ncnn/simpleocv.h	/^NCNN_EXPORT bool imwrite(const std::string& path, const Mat& m, const std::vector<int>& params = std::vector<int>());$/;"	p	namespace:cv	signature:(const std::string& path, const Mat& m, const std::vector<int>& params = std::vector<int>())
info	./include/ncnn/gpu.h	/^    const GpuInfo& info;$/;"	m	class:ncnn::VulkanDevice	access:public
info_arch	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
init	./include/ncnn/allocator.h	/^    int init();$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:()
init_device_extension	./include/ncnn/gpu.h	/^    int init_device_extension();$/;"	p	class:ncnn::VulkanDevice	access:protected	signature:()
initialLayout	./include/ncnn/vulkan_header_fix.h	/^    VkImageLayout initialLayout;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
inpHeight	./src/FastestDet.cpp	/^    const int inpHeight = 512;$/;"	m	class:FastestDet	file:	access:private
inpWidth	./src/FastestDet.cpp	/^    const int inpWidth = 512;$/;"	m	class:FastestDet	file:	access:private
input	./include/ncnn/net.h	/^    int input(const char* blob_name, const Mat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, const Mat& in)
input	./include/ncnn/net.h	/^    int input(const char* blob_name, const VkImageMat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, const VkImageMat& in)
input	./include/ncnn/net.h	/^    int input(const char* blob_name, const VkMat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, const VkMat& in)
input	./include/ncnn/net.h	/^    int input(int blob_index, const Mat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, const Mat& in)
input	./include/ncnn/net.h	/^    int input(int blob_index, const VkImageMat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, const VkImageMat& in)
input	./include/ncnn/net.h	/^    int input(int blob_index, const VkMat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, const VkMat& in)
inputAttachmentCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t inputAttachmentCount;$/;"	m	struct:VkSubpassDescription2KHR	access:public
input_indexes	./include/ncnn/net.h	/^    const std::vector<int>& input_indexes() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
input_names	./include/ncnn/net.h	/^    const std::vector<const char*>& input_names() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
insert	./include/ncnn/simplestl.h	/^    void insert(T* pos, T* b, T* e)$/;"	f	struct:std::vector	access:public	signature:(T* pos, T* b, T* e)
int_exit	./src/FastestDet.cpp	/^void int_exit(int _) {$/;"	f	signature:(int _)
intersection_area	./src/FastestDet.cpp	/^    inline float intersection_area(const Object& a, const Object& b);$/;"	p	class:FastestDet	file:	access:private	signature:(const Object& a, const Object& b)
intersection_area	./src/FastestDet.cpp	/^inline float FastestDet::intersection_area(const Object& a, const Object& b)$/;"	f	class:FastestDet	signature:(const Object& a, const Object& b)
invalidate	./include/ncnn/allocator.h	/^    virtual int invalidate(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkAllocator	access:public	signature:(VkBufferMemory* ptr)
invert_affine_transform	./include/ncnn/mat.h	/^NCNN_EXPORT void invert_affine_transform(const float* tm, float* tm_inv);$/;"	p	namespace:ncnn	signature:(const float* tm, float* tm_inv)
is_coherent	./include/ncnn/gpu.h	/^    bool is_coherent(uint32_t memory_type_index) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t memory_type_index) const
is_enabled	./include/ncnn/cpu.h	/^    bool is_enabled(int cpu) const;$/;"	p	class:ncnn::CpuSet	access:public	signature:(int cpu) const
is_mappable	./include/ncnn/gpu.h	/^    bool is_mappable(uint32_t memory_type_index) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t memory_type_index) const
iter_list	./include/ncnn/simplestl.h	/^    iter_list()$/;"	f	struct:std::iter_list	access:public	signature:()
iter_list	./include/ncnn/simplestl.h	/^    iter_list(const iter_list& i)$/;"	f	struct:std::iter_list	access:public	signature:(const iter_list& i)
iter_list	./include/ncnn/simplestl.h	/^    iter_list(node<T>* n)$/;"	f	struct:std::iter_list	access:public	signature:(node<T>* n)
iter_list	./include/ncnn/simplestl.h	/^struct iter_list$/;"	s	namespace:std
iterator	./include/ncnn/simplestl.h	/^    typedef iter_list<T> iterator;$/;"	t	struct:std::list	access:public
jj	./src/FastestDet.cpp	/^static int ii = 0, jj = 0;$/;"	v	file:
join	./include/ncnn/platform.h	/^    void join() { WaitForSingleObject(handle, INFINITE); CloseHandle(handle); }$/;"	f	class:ncnn::Thread	access:public	signature:()
kanna_rotate_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type)
kanna_rotate_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
kanna_rotate_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type)
kanna_rotate_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
kanna_rotate_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type)
kanna_rotate_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
kanna_rotate_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type)
kanna_rotate_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
kanna_rotate_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
key	./include/ncnn/platform.h	/^    DWORD key;$/;"	m	class:ncnn::ThreadLocalStorage	access:private
key_cc	./src/FastestDet.cpp	/^static int key_cc = 0;$/;"	v	file:
key_fd	./src/FastestDet.cpp	/^static int key_fd = 0;$/;"	v	file:
key_flag	./src/FastestDet.cpp	/^static int key_flag = 0;$/;"	v	file:
kmp_get_blocktime	./include/ncnn/simpleomp.h	/^NCNN_EXPORT int kmp_get_blocktime();$/;"	p	signature:()
kmp_set_blocktime	./include/ncnn/simpleomp.h	/^NCNN_EXPORT void kmp_set_blocktime(int blocktime);$/;"	p	signature:(int blocktime)
label	./src/FastestDet.cpp	/^    int label;$/;"	m	struct:Object	file:	access:public
landmark	./src/FastestDet.cpp	/^    std::vector<cv::Point2d>landmark;$/;"	m	struct:Object	file:	access:public
layer_creator_func	./include/ncnn/layer.h	/^typedef Layer* (*layer_creator_func)(void*);$/;"	t	namespace:ncnn
layer_destroyer_func	./include/ncnn/layer.h	/^typedef void (*layer_destroyer_func)(Layer*, void*);$/;"	t	namespace:ncnn
layer_registry_entry	./include/ncnn/layer.h	/^struct layer_registry_entry$/;"	s	namespace:ncnn
layer_to_index	./include/ncnn/layer.h	/^NCNN_EXPORT int layer_to_index(const char* type);$/;"	p	namespace:ncnn	signature:(const char* type)
layers	./include/ncnn/net.h	/^    const std::vector<Layer*>& layers() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
layout	./include/ncnn/vulkan_header_fix.h	/^    VkImageLayout layout;$/;"	m	struct:VkAttachmentReference2KHR	access:public
length	./src/FastestDet.cpp	/^    unsigned long length;       \/\/帧缓冲长度$/;"	m	struct:cam_buf_info	file:	access:public
less	./include/ncnn/simplestl.h	/^struct less$/;"	s	namespace:std
lightmode	./include/ncnn/option.h	/^    bool lightmode;$/;"	m	class:ncnn::Option	access:public
line	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void line(Mat& img, Point p0, Point p1, const Scalar& color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, Point p0, Point p1, const Scalar& color, int thickness = 1)
line_length	./src/FastestDet.cpp	/^static unsigned long line_length;       \/\/LCD一行的长度（字节为单位）$/;"	v	file:
list	./include/ncnn/simplestl.h	/^    list()$/;"	f	struct:std::list	access:public	signature:()
list	./include/ncnn/simplestl.h	/^    list(const list& l)$/;"	f	struct:std::list	access:public	signature:(const list& l)
list	./include/ncnn/simplestl.h	/^struct list$/;"	s	namespace:std
load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int h, int c, int type) const;$/;"	p	class:ncnn::ModelBin	access:public	signature:(int w, int h, int c, int type) const
load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int h, int type) const;$/;"	p	class:ncnn::ModelBin	access:public	signature:(int w, int h, int type) const
load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int type) const = 0;$/;"	p	class:ncnn::ModelBin	access:public	signature:(int w, int type) const
load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int type) const;$/;"	p	class:ncnn::ModelBinFromDataReader	access:public	signature:(int w, int type) const
load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int type) const;$/;"	p	class:ncnn::ModelBinFromMatArray	access:public	signature:(int w, int type) const
loadOp	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentLoadOp loadOp;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
load_1d	./include/ncnn/c_api.h	/^    ncnn_mat_t (*load_1d)(const ncnn_modelbin_t mb, int w, int type);$/;"	m	struct:__ncnn_modelbin_t	access:public
load_2d	./include/ncnn/c_api.h	/^    ncnn_mat_t (*load_2d)(const ncnn_modelbin_t mb, int w, int h, int type);$/;"	m	struct:__ncnn_modelbin_t	access:public
load_3d	./include/ncnn/c_api.h	/^    ncnn_mat_t (*load_3d)(const ncnn_modelbin_t mb, int w, int h, int c, int type);$/;"	m	struct:__ncnn_modelbin_t	access:public
load_model	./include/ncnn/c_api.h	/^    int (*load_model)(ncnn_layer_t layer, const ncnn_modelbin_t mb);$/;"	m	struct:__ncnn_layer_t	access:public
load_model	./include/ncnn/layer.h	/^    virtual int load_model(const ModelBin& mb);$/;"	p	class:ncnn::Layer	access:public	signature:(const ModelBin& mb)
load_model	./include/ncnn/net.h	/^    int load_model(AAsset* asset);$/;"	p	class:ncnn::Net	access:public	signature:(AAsset* asset)
load_model	./include/ncnn/net.h	/^    int load_model(AAssetManager* mgr, const char* assetpath);$/;"	p	class:ncnn::Net	access:public	signature:(AAssetManager* mgr, const char* assetpath)
load_model	./include/ncnn/net.h	/^    int load_model(FILE* fp);$/;"	p	class:ncnn::Net	access:public	signature:(FILE* fp)
load_model	./include/ncnn/net.h	/^    int load_model(const DataReader& dr);$/;"	p	class:ncnn::Net	access:public	signature:(const DataReader& dr)
load_model	./include/ncnn/net.h	/^    int load_model(const char* modelpath);$/;"	p	class:ncnn::Net	access:public	signature:(const char* modelpath)
load_model	./include/ncnn/net.h	/^    int load_model(const unsigned char* mem);$/;"	p	class:ncnn::Net	access:public	signature:(const unsigned char* mem)
load_param	./include/ncnn/c_api.h	/^    int (*load_param)(ncnn_layer_t layer, const ncnn_paramdict_t pd);$/;"	m	struct:__ncnn_layer_t	access:public
load_param	./include/ncnn/layer.h	/^    virtual int load_param(const ParamDict& pd);$/;"	p	class:ncnn::Layer	access:public	signature:(const ParamDict& pd)
load_param	./include/ncnn/net.h	/^    int load_param(AAsset* asset);$/;"	p	class:ncnn::Net	access:public	signature:(AAsset* asset)
load_param	./include/ncnn/net.h	/^    int load_param(AAssetManager* mgr, const char* assetpath);$/;"	p	class:ncnn::Net	access:public	signature:(AAssetManager* mgr, const char* assetpath)
load_param	./include/ncnn/net.h	/^    int load_param(FILE* fp);$/;"	p	class:ncnn::Net	access:public	signature:(FILE* fp)
load_param	./include/ncnn/net.h	/^    int load_param(const DataReader& dr);$/;"	p	class:ncnn::Net	access:public	signature:(const DataReader& dr)
load_param	./include/ncnn/net.h	/^    int load_param(const char* protopath);$/;"	p	class:ncnn::Net	access:public	signature:(const char* protopath)
load_param	./include/ncnn/net.h	/^    int load_param(const unsigned char* mem);$/;"	p	class:ncnn::Net	access:public	signature:(const unsigned char* mem)
load_param	./include/ncnn/paramdict.h	/^    int load_param(const DataReader& dr);$/;"	p	class:ncnn::ParamDict	access:protected	signature:(const DataReader& dr)
load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(AAsset* asset);$/;"	p	class:ncnn::Net	access:public	signature:(AAsset* asset)
load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(AAssetManager* mgr, const char* assetpath);$/;"	p	class:ncnn::Net	access:public	signature:(AAssetManager* mgr, const char* assetpath)
load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(FILE* fp);$/;"	p	class:ncnn::Net	access:public	signature:(FILE* fp)
load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(const DataReader& dr);$/;"	p	class:ncnn::Net	access:public	signature:(const DataReader& dr)
load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(const char* protopath);$/;"	p	class:ncnn::Net	access:public	signature:(const char* protopath)
load_param_bin	./include/ncnn/paramdict.h	/^    int load_param_bin(const DataReader& dr);$/;"	p	class:ncnn::ParamDict	access:protected	signature:(const DataReader& dr)
load_param_mem	./include/ncnn/net.h	/^    int load_param_mem(const char* mem);$/;"	p	class:ncnn::Net	access:public	signature:(const char* mem)
local_size_x	./include/ncnn/pipeline.h	/^    uint32_t local_size_x() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
local_size_y	./include/ncnn/pipeline.h	/^    uint32_t local_size_y() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
local_size_z	./include/ncnn/pipeline.h	/^    uint32_t local_size_z() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
lock	./include/ncnn/platform.h	/^    void lock() { AcquireSRWLockExclusive(&srwlock); }$/;"	f	class:ncnn::Mutex	access:public	signature:()
main	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	./build/CMakeFiles/FindOpenMP/OpenMPCheckVersion.c	/^int main(void)$/;"	f	signature:(void)
main	./build/CMakeFiles/FindOpenMP/OpenMPCheckVersion.cpp	/^int main(void)$/;"	f	signature:(void)
main	./build/CMakeFiles/FindOpenMP/OpenMPTryFlag.c	/^int main(void) {$/;"	f	signature:(void)
main	./build/CMakeFiles/FindOpenMP/OpenMPTryFlag.cpp	/^int main(void) {$/;"	f	signature:(void)
main	./src/FastestDet.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
make_pair	./include/ncnn/simplestl.h	/^pair<T1, T2> make_pair(const T1& t1, const T2& t2)$/;"	f	namespace:std	signature:(const T1& t1, const T2& t2)
make_wite_png	./src/FastestDet.cpp	/^int make_wite_png(const char *outfile, int width, int height, int buf_idx)$/;"	f	signature:(const char *outfile, int width, int height, int buf_idx)
make_wite_png	./src/FastestDet.cpp	/^int make_wite_png(const char *outfile, int width, int height, int buf_idx);$/;"	p	file:	signature:(const char *outfile, int width, int height, int buf_idx)
mappable	./include/ncnn/allocator.h	/^    bool mappable;$/;"	m	class:ncnn::VkAllocator	access:public
mapped	./include/ncnn/mat.h	/^    Mat mapped() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
mapped	./include/ncnn/mat.h	/^    Mat mapped() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
mapped	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat VkImageMat::mapped() const$/;"	f	class:ncnn::VkImageMat	signature:() const
mapped	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat VkMat::mapped() const$/;"	f	class:ncnn::VkMat	signature:() const
mapped_ptr	./include/ncnn/allocator.h	/^    void* mapped_ptr;$/;"	m	class:ncnn::VkBufferMemory	access:public
mapped_ptr	./include/ncnn/allocator.h	/^    void* mapped_ptr;$/;"	m	class:ncnn::VkImageMemory	access:public
mapped_ptr	./include/ncnn/mat.h	/^    void* mapped_ptr() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
mapped_ptr	./include/ncnn/mat.h	/^    void* mapped_ptr() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
mapped_ptr	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void* VkImageMat::mapped_ptr() const$/;"	f	class:ncnn::VkImageMat	signature:() const
mapped_ptr	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void* VkMat::mapped_ptr() const$/;"	f	class:ncnn::VkMat	signature:() const
max	./include/ncnn/simpleocv.h	31;"	d
max	./include/ncnn/simplestl.h	/^const T& max(const T& a, const T& b)$/;"	f	namespace:std	signature:(const T& a, const T& b)
maxMemoryAllocationSize	./include/ncnn/vulkan_header_fix.h	/^    VkDeviceSize maxMemoryAllocationSize;$/;"	m	struct:VkPhysicalDeviceMaintenance3Properties	access:public
maxPerSetDescriptors	./include/ncnn/vulkan_header_fix.h	/^    uint32_t maxPerSetDescriptors;$/;"	m	struct:VkPhysicalDeviceMaintenance3Properties	access:public
max_image_dimension_1d	./include/ncnn/gpu.h	/^    uint32_t max_image_dimension_1d() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_image_dimension_2d	./include/ncnn/gpu.h	/^    uint32_t max_image_dimension_2d() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_image_dimension_3d	./include/ncnn/gpu.h	/^    uint32_t max_image_dimension_3d() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_shared_memory_size	./include/ncnn/gpu.h	/^    uint32_t max_shared_memory_size() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_workgroup_count_x	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_count_x() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_workgroup_count_y	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_count_y() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_workgroup_count_z	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_count_z() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_workgroup_invocations	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_invocations() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_workgroup_size_x	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_size_x() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_workgroup_size_y	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_size_y() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
max_workgroup_size_z	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_size_z() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
memory	./include/ncnn/allocator.h	/^    VkDeviceMemory memory;$/;"	m	class:ncnn::VkBufferMemory	access:public
memory	./include/ncnn/allocator.h	/^    VkDeviceMemory memory;$/;"	m	class:ncnn::VkImageMemory	access:public
memory_map_alignment	./include/ncnn/gpu.h	/^    size_t memory_map_alignment() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
min	./include/ncnn/simpleocv.h	30;"	d
min	./include/ncnn/simplestl.h	/^const T& min(const T& a, const T& b)$/;"	f	namespace:std	signature:(const T& a, const T& b)
mode	./src/FastestDet.cpp	44;"	d	file:
model_function	./src/FastestDet.cpp	/^void *model_function(void *arg) {$/;"	f	signature:(void *arg)
model_thread_id	./src/FastestDet.cpp	/^pthread_t model_thread_id, show_thread_id;$/;"	v
mutable_blobs	./include/ncnn/net.h	/^    std::vector<Blob>& mutable_blobs();$/;"	p	class:ncnn::Net	access:public	signature:()
mutable_layers	./include/ncnn/net.h	/^    std::vector<Layer*>& mutable_layers();$/;"	p	class:ncnn::Net	access:public	signature:()
mutex	./include/ncnn/platform.h	/^    Mutex& mutex;$/;"	m	class:ncnn::MutexLockGuard	access:private
mutex	./src/FastestDet.cpp	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mutex2	./src/FastestDet.cpp	/^pthread_mutex_t mutex2 = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mutex3	./src/FastestDet.cpp	/^pthread_mutex_t mutex3 = PTHREAD_MUTEX_INITIALIZER;$/;"	v
name	./include/ncnn/blob.h	/^    std::string name;$/;"	m	class:ncnn::Blob	access:public
name	./include/ncnn/layer.h	/^    const char* name;$/;"	m	struct:ncnn::custom_layer_registry_entry	access:public
name	./include/ncnn/layer.h	/^    const char* name;$/;"	m	struct:ncnn::layer_registry_entry	access:public
name	./include/ncnn/layer.h	/^    std::string name;$/;"	m	class:ncnn::Layer	access:public
name	./src/FastestDet.cpp	/^char name[20];$/;"	v
ncnn	./include/ncnn/allocator.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/benchmark.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/blob.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/command.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/cpu.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/datareader.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/gpu.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/layer.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/layer_shader_type.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/layer_type.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/mat.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/modelbin.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/net.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/option.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/paramdict.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/pipeline.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/pipelinecache.h	/^namespace ncnn {$/;"	n
ncnn	./include/ncnn/platform.h	/^namespace ncnn {$/;"	n
ncnn::Allocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT Allocator$/;"	c	namespace:ncnn
ncnn::Allocator	./include/ncnn/option.h	/^class Allocator;$/;"	x
ncnn::Allocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(void* ptr) = 0;$/;"	p	class:ncnn::Allocator	access:public	signature:(void* ptr)
ncnn::Allocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual void* fastMalloc(size_t size) = 0;$/;"	p	class:ncnn::Allocator	access:public	signature:(size_t size)
ncnn::Allocator::~Allocator	./include/ncnn/allocator.h	/^    virtual ~Allocator();$/;"	p	class:ncnn::Allocator	access:public	signature:()
ncnn::BORDER_CONSTANT	./include/ncnn/mat.h	/^    BORDER_CONSTANT = 0,$/;"	e	enum:ncnn::BorderType
ncnn::BORDER_REPLICATE	./include/ncnn/mat.h	/^    BORDER_REPLICATE = 1,$/;"	e	enum:ncnn::BorderType
ncnn::BORDER_TRANSPARENT	./include/ncnn/mat.h	/^    BORDER_TRANSPARENT = -233,$/;"	e	enum:ncnn::BorderType
ncnn::Blob	./include/ncnn/blob.h	/^class NCNN_EXPORT Blob$/;"	c	namespace:ncnn
ncnn::Blob::Blob	./include/ncnn/blob.h	/^    Blob();$/;"	p	class:ncnn::Blob	access:public	signature:()
ncnn::Blob::consumer	./include/ncnn/blob.h	/^    int consumer;$/;"	m	class:ncnn::Blob	access:public
ncnn::Blob::name	./include/ncnn/blob.h	/^    std::string name;$/;"	m	class:ncnn::Blob	access:public
ncnn::Blob::producer	./include/ncnn/blob.h	/^    int producer;$/;"	m	class:ncnn::Blob	access:public
ncnn::Blob::shape	./include/ncnn/blob.h	/^    Mat shape;$/;"	m	class:ncnn::Blob	access:public
ncnn::BorderType	./include/ncnn/mat.h	/^enum BorderType$/;"	g	namespace:ncnn
ncnn::ConditionVariable	./include/ncnn/platform.h	/^class NCNN_EXPORT ConditionVariable$/;"	c	namespace:ncnn
ncnn::ConditionVariable::ConditionVariable	./include/ncnn/platform.h	/^    ConditionVariable() { InitializeConditionVariable(&condvar); }$/;"	f	class:ncnn::ConditionVariable	access:public	signature:()
ncnn::ConditionVariable::broadcast	./include/ncnn/platform.h	/^    void broadcast() { WakeAllConditionVariable(&condvar); }$/;"	f	class:ncnn::ConditionVariable	access:public	signature:()
ncnn::ConditionVariable::condvar	./include/ncnn/platform.h	/^    CONDITION_VARIABLE condvar;$/;"	m	class:ncnn::ConditionVariable	access:private
ncnn::ConditionVariable::signal	./include/ncnn/platform.h	/^    void signal() { WakeConditionVariable(&condvar); }$/;"	f	class:ncnn::ConditionVariable	access:public	signature:()
ncnn::ConditionVariable::wait	./include/ncnn/platform.h	/^    void wait(Mutex& mutex) { SleepConditionVariableSRW(&condvar, &mutex.srwlock, INFINITE, 0); }$/;"	f	class:ncnn::ConditionVariable	access:public	signature:(Mutex& mutex)
ncnn::ConditionVariable::~ConditionVariable	./include/ncnn/platform.h	/^    ~ConditionVariable() {}$/;"	f	class:ncnn::ConditionVariable	access:public	signature:()
ncnn::CpuSet	./include/ncnn/cpu.h	/^class NCNN_EXPORT CpuSet$/;"	c	namespace:ncnn
ncnn::CpuSet::CpuSet	./include/ncnn/cpu.h	/^    CpuSet();$/;"	p	class:ncnn::CpuSet	access:public	signature:()
ncnn::CpuSet::cpu_set	./include/ncnn/cpu.h	/^    cpu_set_t cpu_set;$/;"	m	class:ncnn::CpuSet	access:public
ncnn::CpuSet::disable	./include/ncnn/cpu.h	/^    void disable(int cpu);$/;"	p	class:ncnn::CpuSet	access:public	signature:(int cpu)
ncnn::CpuSet::disable_all	./include/ncnn/cpu.h	/^    void disable_all();$/;"	p	class:ncnn::CpuSet	access:public	signature:()
ncnn::CpuSet::enable	./include/ncnn/cpu.h	/^    void enable(int cpu);$/;"	p	class:ncnn::CpuSet	access:public	signature:(int cpu)
ncnn::CpuSet::is_enabled	./include/ncnn/cpu.h	/^    bool is_enabled(int cpu) const;$/;"	p	class:ncnn::CpuSet	access:public	signature:(int cpu) const
ncnn::CpuSet::num_enabled	./include/ncnn/cpu.h	/^    int num_enabled() const;$/;"	p	class:ncnn::CpuSet	access:public	signature:() const
ncnn::CpuSet::policy	./include/ncnn/cpu.h	/^    unsigned int policy;$/;"	m	class:ncnn::CpuSet	access:public
ncnn::DataReader	./include/ncnn/datareader.h	/^class NCNN_EXPORT DataReader$/;"	c	namespace:ncnn
ncnn::DataReader	./include/ncnn/modelbin.h	/^class DataReader;$/;"	x
ncnn::DataReader	./include/ncnn/net.h	/^class DataReader;$/;"	x
ncnn::DataReader	./include/ncnn/paramdict.h	/^class DataReader;$/;"	x
ncnn::DataReader::DataReader	./include/ncnn/datareader.h	/^    DataReader();$/;"	p	class:ncnn::DataReader	access:public	signature:()
ncnn::DataReader::read	./include/ncnn/datareader.h	/^    virtual size_t read(void* buf, size_t size) const;$/;"	p	class:ncnn::DataReader	access:public	signature:(void* buf, size_t size) const
ncnn::DataReader::reference	./include/ncnn/datareader.h	/^    virtual size_t reference(size_t size, const void** buf) const;$/;"	p	class:ncnn::DataReader	access:public	signature:(size_t size, const void** buf) const
ncnn::DataReader::scan	./include/ncnn/datareader.h	/^    virtual int scan(const char* format, void* p) const;$/;"	p	class:ncnn::DataReader	access:public	signature:(const char* format, void* p) const
ncnn::DataReader::~DataReader	./include/ncnn/datareader.h	/^    virtual ~DataReader();$/;"	p	class:ncnn::DataReader	access:public	signature:()
ncnn::DataReaderFromAndroidAsset	./include/ncnn/datareader.h	/^class NCNN_EXPORT DataReaderFromAndroidAsset : public DataReader$/;"	c	namespace:ncnn	inherits:DataReader
ncnn::DataReaderFromAndroidAsset::DataReaderFromAndroidAsset	./include/ncnn/datareader.h	/^    DataReaderFromAndroidAsset(const DataReaderFromAndroidAsset&);$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:private	signature:(const DataReaderFromAndroidAsset&)
ncnn::DataReaderFromAndroidAsset::DataReaderFromAndroidAsset	./include/ncnn/datareader.h	/^    explicit DataReaderFromAndroidAsset(AAsset* asset);$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:public	signature:(AAsset* asset)
ncnn::DataReaderFromAndroidAsset::d	./include/ncnn/datareader.h	/^    DataReaderFromAndroidAssetPrivate* const d;$/;"	m	class:ncnn::DataReaderFromAndroidAsset	access:private
ncnn::DataReaderFromAndroidAsset::operator =	./include/ncnn/datareader.h	/^    DataReaderFromAndroidAsset& operator=(const DataReaderFromAndroidAsset&);$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:private	signature:(const DataReaderFromAndroidAsset&)
ncnn::DataReaderFromAndroidAsset::read	./include/ncnn/datareader.h	/^    virtual size_t read(void* buf, size_t size) const;$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:public	signature:(void* buf, size_t size) const
ncnn::DataReaderFromAndroidAsset::scan	./include/ncnn/datareader.h	/^    virtual int scan(const char* format, void* p) const;$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:public	signature:(const char* format, void* p) const
ncnn::DataReaderFromAndroidAsset::~DataReaderFromAndroidAsset	./include/ncnn/datareader.h	/^    virtual ~DataReaderFromAndroidAsset();$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:public	signature:()
ncnn::DataReaderFromAndroidAssetPrivate	./include/ncnn/datareader.h	/^class DataReaderFromAndroidAssetPrivate;$/;"	x
ncnn::DataReaderFromMemory	./include/ncnn/datareader.h	/^class NCNN_EXPORT DataReaderFromMemory : public DataReader$/;"	c	namespace:ncnn	inherits:DataReader
ncnn::DataReaderFromMemory::DataReaderFromMemory	./include/ncnn/datareader.h	/^    DataReaderFromMemory(const DataReaderFromMemory&);$/;"	p	class:ncnn::DataReaderFromMemory	access:private	signature:(const DataReaderFromMemory&)
ncnn::DataReaderFromMemory::DataReaderFromMemory	./include/ncnn/datareader.h	/^    explicit DataReaderFromMemory(const unsigned char*& mem);$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:(const unsigned char*& mem)
ncnn::DataReaderFromMemory::d	./include/ncnn/datareader.h	/^    DataReaderFromMemoryPrivate* const d;$/;"	m	class:ncnn::DataReaderFromMemory	access:private
ncnn::DataReaderFromMemory::operator =	./include/ncnn/datareader.h	/^    DataReaderFromMemory& operator=(const DataReaderFromMemory&);$/;"	p	class:ncnn::DataReaderFromMemory	access:private	signature:(const DataReaderFromMemory&)
ncnn::DataReaderFromMemory::read	./include/ncnn/datareader.h	/^    virtual size_t read(void* buf, size_t size) const;$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:(void* buf, size_t size) const
ncnn::DataReaderFromMemory::reference	./include/ncnn/datareader.h	/^    virtual size_t reference(size_t size, const void** buf) const;$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:(size_t size, const void** buf) const
ncnn::DataReaderFromMemory::scan	./include/ncnn/datareader.h	/^    virtual int scan(const char* format, void* p) const;$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:(const char* format, void* p) const
ncnn::DataReaderFromMemory::~DataReaderFromMemory	./include/ncnn/datareader.h	/^    virtual ~DataReaderFromMemory();$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:()
ncnn::DataReaderFromMemoryPrivate	./include/ncnn/datareader.h	/^class DataReaderFromMemoryPrivate;$/;"	x
ncnn::DataReaderFromStdio	./include/ncnn/datareader.h	/^class NCNN_EXPORT DataReaderFromStdio : public DataReader$/;"	c	namespace:ncnn	inherits:DataReader
ncnn::DataReaderFromStdio::DataReaderFromStdio	./include/ncnn/datareader.h	/^    DataReaderFromStdio(const DataReaderFromStdio&);$/;"	p	class:ncnn::DataReaderFromStdio	access:private	signature:(const DataReaderFromStdio&)
ncnn::DataReaderFromStdio::DataReaderFromStdio	./include/ncnn/datareader.h	/^    explicit DataReaderFromStdio(FILE* fp);$/;"	p	class:ncnn::DataReaderFromStdio	access:public	signature:(FILE* fp)
ncnn::DataReaderFromStdio::d	./include/ncnn/datareader.h	/^    DataReaderFromStdioPrivate* const d;$/;"	m	class:ncnn::DataReaderFromStdio	access:private
ncnn::DataReaderFromStdio::operator =	./include/ncnn/datareader.h	/^    DataReaderFromStdio& operator=(const DataReaderFromStdio&);$/;"	p	class:ncnn::DataReaderFromStdio	access:private	signature:(const DataReaderFromStdio&)
ncnn::DataReaderFromStdio::read	./include/ncnn/datareader.h	/^    virtual size_t read(void* buf, size_t size) const;$/;"	p	class:ncnn::DataReaderFromStdio	access:public	signature:(void* buf, size_t size) const
ncnn::DataReaderFromStdio::scan	./include/ncnn/datareader.h	/^    virtual int scan(const char* format, void* p) const;$/;"	p	class:ncnn::DataReaderFromStdio	access:public	signature:(const char* format, void* p) const
ncnn::DataReaderFromStdio::~DataReaderFromStdio	./include/ncnn/datareader.h	/^    virtual ~DataReaderFromStdio();$/;"	p	class:ncnn::DataReaderFromStdio	access:public	signature:()
ncnn::DataReaderFromStdioPrivate	./include/ncnn/datareader.h	/^class DataReaderFromStdioPrivate;$/;"	x
ncnn::Extractor	./include/ncnn/net.h	/^class Extractor;$/;"	x
ncnn::Extractor	./include/ncnn/net.h	/^class NCNN_EXPORT Extractor$/;"	c	namespace:ncnn
ncnn::Extractor::Extractor	./include/ncnn/net.h	/^    Extractor(const Extractor&);$/;"	p	class:ncnn::Extractor	access:public	signature:(const Extractor&)
ncnn::Extractor::Extractor	./include/ncnn/net.h	/^    Extractor(const Net* net, size_t blob_count);$/;"	p	class:ncnn::Extractor	access:protected	signature:(const Net* net, size_t blob_count)
ncnn::Extractor::Net::create_extractor	./include/ncnn/net.h	/^    friend Extractor Net::create_extractor() const;$/;"	p	class:ncnn::Extractor::Net	access:friend	signature:() const
ncnn::Extractor::clear	./include/ncnn/net.h	/^    void clear();$/;"	p	class:ncnn::Extractor	access:public	signature:()
ncnn::Extractor::d	./include/ncnn/net.h	/^    ExtractorPrivate* const d;$/;"	m	class:ncnn::Extractor	access:private
ncnn::Extractor::extract	./include/ncnn/net.h	/^    int extract(const char* blob_name, Mat& feat, int type = 0);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, Mat& feat, int type = 0)
ncnn::Extractor::extract	./include/ncnn/net.h	/^    int extract(const char* blob_name, VkImageMat& feat, VkCompute& cmd);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, VkImageMat& feat, VkCompute& cmd)
ncnn::Extractor::extract	./include/ncnn/net.h	/^    int extract(const char* blob_name, VkMat& feat, VkCompute& cmd);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, VkMat& feat, VkCompute& cmd)
ncnn::Extractor::extract	./include/ncnn/net.h	/^    int extract(int blob_index, Mat& feat, int type = 0);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, Mat& feat, int type = 0)
ncnn::Extractor::extract	./include/ncnn/net.h	/^    int extract(int blob_index, VkImageMat& feat, VkCompute& cmd);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, VkImageMat& feat, VkCompute& cmd)
ncnn::Extractor::extract	./include/ncnn/net.h	/^    int extract(int blob_index, VkMat& feat, VkCompute& cmd);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, VkMat& feat, VkCompute& cmd)
ncnn::Extractor::input	./include/ncnn/net.h	/^    int input(const char* blob_name, const Mat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, const Mat& in)
ncnn::Extractor::input	./include/ncnn/net.h	/^    int input(const char* blob_name, const VkImageMat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, const VkImageMat& in)
ncnn::Extractor::input	./include/ncnn/net.h	/^    int input(const char* blob_name, const VkMat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(const char* blob_name, const VkMat& in)
ncnn::Extractor::input	./include/ncnn/net.h	/^    int input(int blob_index, const Mat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, const Mat& in)
ncnn::Extractor::input	./include/ncnn/net.h	/^    int input(int blob_index, const VkImageMat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, const VkImageMat& in)
ncnn::Extractor::input	./include/ncnn/net.h	/^    int input(int blob_index, const VkMat& in);$/;"	p	class:ncnn::Extractor	access:public	signature:(int blob_index, const VkMat& in)
ncnn::Extractor::operator =	./include/ncnn/net.h	/^    Extractor& operator=(const Extractor&);$/;"	p	class:ncnn::Extractor	access:public	signature:(const Extractor&)
ncnn::Extractor::set_blob_allocator	./include/ncnn/net.h	/^    void set_blob_allocator(Allocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(Allocator* allocator)
ncnn::Extractor::set_blob_vkallocator	./include/ncnn/net.h	/^    void set_blob_vkallocator(VkAllocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(VkAllocator* allocator)
ncnn::Extractor::set_light_mode	./include/ncnn/net.h	/^    void set_light_mode(bool enable);$/;"	p	class:ncnn::Extractor	access:public	signature:(bool enable)
ncnn::Extractor::set_num_threads	./include/ncnn/net.h	/^    void set_num_threads(int num_threads);$/;"	p	class:ncnn::Extractor	access:public	signature:(int num_threads)
ncnn::Extractor::set_staging_vkallocator	./include/ncnn/net.h	/^    void set_staging_vkallocator(VkAllocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(VkAllocator* allocator)
ncnn::Extractor::set_vulkan_compute	./include/ncnn/net.h	/^    void set_vulkan_compute(bool enable);$/;"	p	class:ncnn::Extractor	access:public	signature:(bool enable)
ncnn::Extractor::set_workspace_allocator	./include/ncnn/net.h	/^    void set_workspace_allocator(Allocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(Allocator* allocator)
ncnn::Extractor::set_workspace_vkallocator	./include/ncnn/net.h	/^    void set_workspace_vkallocator(VkAllocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(VkAllocator* allocator)
ncnn::Extractor::~Extractor	./include/ncnn/net.h	/^    virtual ~Extractor();$/;"	p	class:ncnn::Extractor	access:public	signature:()
ncnn::ExtractorPrivate	./include/ncnn/net.h	/^class ExtractorPrivate;$/;"	x
ncnn::GpuInfo	./include/ncnn/gpu.h	/^class NCNN_EXPORT GpuInfo$/;"	c	namespace:ncnn
ncnn::GpuInfo::GpuInfo	./include/ncnn/gpu.h	/^    GpuInfo(const GpuInfo&);$/;"	p	class:ncnn::GpuInfo	access:private	signature:(const GpuInfo&)
ncnn::GpuInfo::GpuInfo	./include/ncnn/gpu.h	/^    explicit GpuInfo();$/;"	p	class:ncnn::GpuInfo	access:public	signature:()
ncnn::GpuInfo::api_version	./include/ncnn/gpu.h	/^    uint32_t api_version() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::buffer_image_granularity	./include/ncnn/gpu.h	/^    size_t buffer_image_granularity() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::buffer_offset_alignment	./include/ncnn/gpu.h	/^    size_t buffer_offset_alignment() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::bug_buffer_image_load_zero	./include/ncnn/gpu.h	/^    bool bug_buffer_image_load_zero() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::bug_corrupted_online_pipeline_cache	./include/ncnn/gpu.h	/^    bool bug_corrupted_online_pipeline_cache() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::bug_implicit_fp16_arithmetic	./include/ncnn/gpu.h	/^    bool bug_implicit_fp16_arithmetic() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::bug_storage_buffer_no_l1	./include/ncnn/gpu.h	/^    bool bug_storage_buffer_no_l1() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::compute_queue_count	./include/ncnn/gpu.h	/^    uint32_t compute_queue_count() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::compute_queue_family_index	./include/ncnn/gpu.h	/^    uint32_t compute_queue_family_index() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::create_gpu_instance	./include/ncnn/gpu.h	/^    friend int create_gpu_instance();$/;"	p	class:ncnn::GpuInfo	access:friend	signature:()
ncnn::GpuInfo::d	./include/ncnn/gpu.h	/^    GpuInfoPrivate* const d;$/;"	m	class:ncnn::GpuInfo	access:private
ncnn::GpuInfo::device_id	./include/ncnn/gpu.h	/^    uint32_t device_id() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::device_name	./include/ncnn/gpu.h	/^    const char* device_name() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::driver_version	./include/ncnn/gpu.h	/^    uint32_t driver_version() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::graphics_queue_count	./include/ncnn/gpu.h	/^    uint32_t graphics_queue_count() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::graphics_queue_family_index	./include/ncnn/gpu.h	/^    uint32_t graphics_queue_family_index() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_image_dimension_1d	./include/ncnn/gpu.h	/^    uint32_t max_image_dimension_1d() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_image_dimension_2d	./include/ncnn/gpu.h	/^    uint32_t max_image_dimension_2d() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_image_dimension_3d	./include/ncnn/gpu.h	/^    uint32_t max_image_dimension_3d() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_shared_memory_size	./include/ncnn/gpu.h	/^    uint32_t max_shared_memory_size() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_workgroup_count_x	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_count_x() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_workgroup_count_y	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_count_y() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_workgroup_count_z	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_count_z() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_workgroup_invocations	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_invocations() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_workgroup_size_x	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_size_x() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_workgroup_size_y	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_size_y() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::max_workgroup_size_z	./include/ncnn/gpu.h	/^    uint32_t max_workgroup_size_z() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::memory_map_alignment	./include/ncnn/gpu.h	/^    size_t memory_map_alignment() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::non_coherent_atom_size	./include/ncnn/gpu.h	/^    size_t non_coherent_atom_size() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::operator =	./include/ncnn/gpu.h	/^    GpuInfo& operator=(const GpuInfo&);$/;"	p	class:ncnn::GpuInfo	access:private	signature:(const GpuInfo&)
ncnn::GpuInfo::physical_device	./include/ncnn/gpu.h	/^    VkPhysicalDevice physical_device() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::physical_device_memory_properties	./include/ncnn/gpu.h	/^    const VkPhysicalDeviceMemoryProperties& physical_device_memory_properties() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::pipeline_cache_uuid	./include/ncnn/gpu.h	/^    uint8_t* pipeline_cache_uuid() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::subgroup_size	./include/ncnn/gpu.h	/^    uint32_t subgroup_size() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_ANDROID_external_memory_android_hardware_buffer	./include/ncnn/gpu.h	/^    int support_VK_ANDROID_external_memory_android_hardware_buffer() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_EXT_descriptor_indexing	./include/ncnn/gpu.h	/^    int support_VK_EXT_descriptor_indexing() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_EXT_memory_budget	./include/ncnn/gpu.h	/^    int support_VK_EXT_memory_budget() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_EXT_queue_family_foreign	./include/ncnn/gpu.h	/^    int support_VK_EXT_queue_family_foreign() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_16bit_storage	./include/ncnn/gpu.h	/^    int support_VK_KHR_16bit_storage() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_8bit_storage	./include/ncnn/gpu.h	/^    int support_VK_KHR_8bit_storage() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_bind_memory2	./include/ncnn/gpu.h	/^    int support_VK_KHR_bind_memory2() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_create_renderpass2	./include/ncnn/gpu.h	/^    int support_VK_KHR_create_renderpass2() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_dedicated_allocation	./include/ncnn/gpu.h	/^    int support_VK_KHR_dedicated_allocation() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_descriptor_update_template	./include/ncnn/gpu.h	/^    int support_VK_KHR_descriptor_update_template() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_external_memory	./include/ncnn/gpu.h	/^    int support_VK_KHR_external_memory() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_get_memory_requirements2	./include/ncnn/gpu.h	/^    int support_VK_KHR_get_memory_requirements2() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_maintenance1	./include/ncnn/gpu.h	/^    int support_VK_KHR_maintenance1() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_maintenance2	./include/ncnn/gpu.h	/^    int support_VK_KHR_maintenance2() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_maintenance3	./include/ncnn/gpu.h	/^    int support_VK_KHR_maintenance3() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_multiview	./include/ncnn/gpu.h	/^    int support_VK_KHR_multiview() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_push_descriptor	./include/ncnn/gpu.h	/^    int support_VK_KHR_push_descriptor() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_sampler_ycbcr_conversion	./include/ncnn/gpu.h	/^    int support_VK_KHR_sampler_ycbcr_conversion() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_shader_float16_int8	./include/ncnn/gpu.h	/^    int support_VK_KHR_shader_float16_int8() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_shader_float_controls	./include/ncnn/gpu.h	/^    int support_VK_KHR_shader_float_controls() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_storage_buffer_storage_class	./include/ncnn/gpu.h	/^    int support_VK_KHR_storage_buffer_storage_class() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_KHR_swapchain	./include/ncnn/gpu.h	/^    int support_VK_KHR_swapchain() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_VK_NV_cooperative_matrix	./include/ncnn/gpu.h	/^    int support_VK_NV_cooperative_matrix() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_cooperative_matrix	./include/ncnn/gpu.h	/^    bool support_cooperative_matrix() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_cooperative_matrix_16_8_8	./include/ncnn/gpu.h	/^    bool support_cooperative_matrix_16_8_8() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_fp16_arithmetic	./include/ncnn/gpu.h	/^    bool support_fp16_arithmetic() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_fp16_packed	./include/ncnn/gpu.h	/^    bool support_fp16_packed() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_fp16_storage	./include/ncnn/gpu.h	/^    bool support_fp16_storage() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_int8_arithmetic	./include/ncnn/gpu.h	/^    bool support_int8_arithmetic() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_int8_packed	./include/ncnn/gpu.h	/^    bool support_int8_packed() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_int8_storage	./include/ncnn/gpu.h	/^    bool support_int8_storage() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_subgroup_ballot	./include/ncnn/gpu.h	/^    bool support_subgroup_ballot() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_subgroup_basic	./include/ncnn/gpu.h	/^    bool support_subgroup_basic() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_subgroup_shuffle	./include/ncnn/gpu.h	/^    bool support_subgroup_shuffle() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_subgroup_vote	./include/ncnn/gpu.h	/^    bool support_subgroup_vote() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::support_ycbcr_conversion	./include/ncnn/gpu.h	/^    bool support_ycbcr_conversion() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::timestamp_period	./include/ncnn/gpu.h	/^    float timestamp_period() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::transfer_queue_count	./include/ncnn/gpu.h	/^    uint32_t transfer_queue_count() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::transfer_queue_family_index	./include/ncnn/gpu.h	/^    uint32_t transfer_queue_family_index() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::type	./include/ncnn/gpu.h	/^    int type() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::unified_compute_transfer_queue	./include/ncnn/gpu.h	/^    bool unified_compute_transfer_queue() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::vendor_id	./include/ncnn/gpu.h	/^    uint32_t vendor_id() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
ncnn::GpuInfo::~GpuInfo	./include/ncnn/gpu.h	/^    virtual ~GpuInfo();$/;"	p	class:ncnn::GpuInfo	access:public	signature:()
ncnn::GpuInfoPrivate	./include/ncnn/gpu.h	/^class GpuInfoPrivate;$/;"	x
ncnn::ImportAndroidHardwareBufferPipeline	./include/ncnn/command.h	/^class ImportAndroidHardwareBufferPipeline;$/;"	x
ncnn::ImportAndroidHardwareBufferPipeline	./include/ncnn/pipeline.h	/^class NCNN_EXPORT ImportAndroidHardwareBufferPipeline : private Pipeline$/;"	c	namespace:ncnn	inherits:Pipeline
ncnn::ImportAndroidHardwareBufferPipeline::ImportAndroidHardwareBufferPipeline	./include/ncnn/pipeline.h	/^    explicit ImportAndroidHardwareBufferPipeline(const VulkanDevice* vkdev);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:(const VulkanDevice* vkdev)
ncnn::ImportAndroidHardwareBufferPipeline::VkCompute	./include/ncnn/pipeline.h	/^    friend class VkCompute;$/;"	x
ncnn::ImportAndroidHardwareBufferPipeline::create	./include/ncnn/pipeline.h	/^    int create(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator, int type_to, int rotate_from, const Option& opt);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator, int type_to, int rotate_from, const Option& opt)
ncnn::ImportAndroidHardwareBufferPipeline::create	./include/ncnn/pipeline.h	/^    int create(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator, int type_to, int rotate_from, int target_width, int target_height, const Option& opt);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator, int type_to, int rotate_from, int target_width, int target_height, const Option& opt)
ncnn::ImportAndroidHardwareBufferPipeline::create_descriptorset_layout	./include/ncnn/pipeline.h	/^    int create_descriptorset_layout();$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:protected	signature:()
ncnn::ImportAndroidHardwareBufferPipeline::create_sampler	./include/ncnn/pipeline.h	/^    int create_sampler(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:protected	signature:(VkAndroidHardwareBufferImageAllocator* ahb_im_allocator)
ncnn::ImportAndroidHardwareBufferPipeline::create_shader_module	./include/ncnn/pipeline.h	/^    int create_shader_module(const Option& opt);$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:protected	signature:(const Option& opt)
ncnn::ImportAndroidHardwareBufferPipeline::destroy	./include/ncnn/pipeline.h	/^    void destroy();$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:()
ncnn::ImportAndroidHardwareBufferPipeline::need_resize	./include/ncnn/pipeline.h	/^    bool need_resize;$/;"	m	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public
ncnn::ImportAndroidHardwareBufferPipeline::rotate_from	./include/ncnn/pipeline.h	/^    int rotate_from;$/;"	m	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public
ncnn::ImportAndroidHardwareBufferPipeline::sampler	./include/ncnn/pipeline.h	/^    VkSampler sampler;$/;"	m	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public
ncnn::ImportAndroidHardwareBufferPipeline::type_to	./include/ncnn/pipeline.h	/^    int type_to;$/;"	m	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public
ncnn::ImportAndroidHardwareBufferPipeline::~ImportAndroidHardwareBufferPipeline	./include/ncnn/pipeline.h	/^    virtual ~ImportAndroidHardwareBufferPipeline();$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:()
ncnn::Layer	./include/ncnn/layer.h	/^class NCNN_EXPORT Layer$/;"	c	namespace:ncnn
ncnn::Layer::Layer	./include/ncnn/layer.h	/^    Layer();$/;"	p	class:ncnn::Layer	access:public	signature:()
ncnn::Layer::bottom_shapes	./include/ncnn/layer.h	/^    std::vector<Mat> bottom_shapes;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::bottoms	./include/ncnn/layer.h	/^    std::vector<int> bottoms;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::create_pipeline	./include/ncnn/layer.h	/^    virtual int create_pipeline(const Option& opt);$/;"	p	class:ncnn::Layer	access:public	signature:(const Option& opt)
ncnn::Layer::destroy_pipeline	./include/ncnn/layer.h	/^    virtual int destroy_pipeline(const Option& opt);$/;"	p	class:ncnn::Layer	access:public	signature:(const Option& opt)
ncnn::Layer::forward	./include/ncnn/layer.h	/^    virtual int forward(const Mat& bottom_blob, Mat& top_blob, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const Mat& bottom_blob, Mat& top_blob, const Option& opt) const
ncnn::Layer::forward	./include/ncnn/layer.h	/^    virtual int forward(const VkImageMat& bottom_blob, VkImageMat& top_blob, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const VkImageMat& bottom_blob, VkImageMat& top_blob, VkCompute& cmd, const Option& opt) const
ncnn::Layer::forward	./include/ncnn/layer.h	/^    virtual int forward(const VkMat& bottom_blob, VkMat& top_blob, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const VkMat& bottom_blob, VkMat& top_blob, VkCompute& cmd, const Option& opt) const
ncnn::Layer::forward	./include/ncnn/layer.h	/^    virtual int forward(const std::vector<Mat>& bottom_blobs, std::vector<Mat>& top_blobs, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const std::vector<Mat>& bottom_blobs, std::vector<Mat>& top_blobs, const Option& opt) const
ncnn::Layer::forward	./include/ncnn/layer.h	/^    virtual int forward(const std::vector<VkImageMat>& bottom_blobs, std::vector<VkImageMat>& top_blobs, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const std::vector<VkImageMat>& bottom_blobs, std::vector<VkImageMat>& top_blobs, VkCompute& cmd, const Option& opt) const
ncnn::Layer::forward	./include/ncnn/layer.h	/^    virtual int forward(const std::vector<VkMat>& bottom_blobs, std::vector<VkMat>& top_blobs, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(const std::vector<VkMat>& bottom_blobs, std::vector<VkMat>& top_blobs, VkCompute& cmd, const Option& opt) const
ncnn::Layer::forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(Mat& bottom_top_blob, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(Mat& bottom_top_blob, const Option& opt) const
ncnn::Layer::forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(VkImageMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(VkImageMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const
ncnn::Layer::forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(VkMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(VkMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const
ncnn::Layer::forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(std::vector<Mat>& bottom_top_blobs, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(std::vector<Mat>& bottom_top_blobs, const Option& opt) const
ncnn::Layer::forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(std::vector<VkImageMat>& bottom_top_blobs, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(std::vector<VkImageMat>& bottom_top_blobs, VkCompute& cmd, const Option& opt) const
ncnn::Layer::forward_inplace	./include/ncnn/layer.h	/^    virtual int forward_inplace(std::vector<VkMat>& bottom_top_blobs, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::Layer	access:public	signature:(std::vector<VkMat>& bottom_top_blobs, VkCompute& cmd, const Option& opt) const
ncnn::Layer::load_model	./include/ncnn/layer.h	/^    virtual int load_model(const ModelBin& mb);$/;"	p	class:ncnn::Layer	access:public	signature:(const ModelBin& mb)
ncnn::Layer::load_param	./include/ncnn/layer.h	/^    virtual int load_param(const ParamDict& pd);$/;"	p	class:ncnn::Layer	access:public	signature:(const ParamDict& pd)
ncnn::Layer::name	./include/ncnn/layer.h	/^    std::string name;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::one_blob_only	./include/ncnn/layer.h	/^    bool one_blob_only;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_bf16_storage	./include/ncnn/layer.h	/^    bool support_bf16_storage;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_fp16_storage	./include/ncnn/layer.h	/^    bool support_fp16_storage;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_image_storage	./include/ncnn/layer.h	/^    bool support_image_storage;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_inplace	./include/ncnn/layer.h	/^    bool support_inplace;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_int8_storage	./include/ncnn/layer.h	/^    bool support_int8_storage;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_packing	./include/ncnn/layer.h	/^    bool support_packing;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_0	./include/ncnn/layer.h	/^    bool support_reserved_0;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_00	./include/ncnn/layer.h	/^    bool support_reserved_00;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_1	./include/ncnn/layer.h	/^    bool support_reserved_1;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_10	./include/ncnn/layer.h	/^    bool support_reserved_10;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_11	./include/ncnn/layer.h	/^    bool support_reserved_11;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_12	./include/ncnn/layer.h	/^    bool support_reserved_12;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_13	./include/ncnn/layer.h	/^    bool support_reserved_13;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_2	./include/ncnn/layer.h	/^    bool support_reserved_2;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_3	./include/ncnn/layer.h	/^    bool support_reserved_3;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_4	./include/ncnn/layer.h	/^    bool support_reserved_4;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_5	./include/ncnn/layer.h	/^    bool support_reserved_5;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_6	./include/ncnn/layer.h	/^    bool support_reserved_6;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_7	./include/ncnn/layer.h	/^    bool support_reserved_7;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_8	./include/ncnn/layer.h	/^    bool support_reserved_8;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_reserved_9	./include/ncnn/layer.h	/^    bool support_reserved_9;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_tensor_storage	./include/ncnn/layer.h	/^    bool support_tensor_storage;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::support_vulkan	./include/ncnn/layer.h	/^    bool support_vulkan;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::top_shapes	./include/ncnn/layer.h	/^    std::vector<Mat> top_shapes;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::tops	./include/ncnn/layer.h	/^    std::vector<int> tops;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::type	./include/ncnn/layer.h	/^    std::string type;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::typeindex	./include/ncnn/layer.h	/^    int typeindex;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::upload_model	./include/ncnn/layer.h	/^    virtual int upload_model(VkTransfer& cmd, const Option& opt);$/;"	p	class:ncnn::Layer	access:public	signature:(VkTransfer& cmd, const Option& opt)
ncnn::Layer::userdata	./include/ncnn/layer.h	/^    void* userdata;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::vkdev	./include/ncnn/layer.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::Layer	access:public
ncnn::Layer::~Layer	./include/ncnn/layer.h	/^    virtual ~Layer();$/;"	p	class:ncnn::Layer	access:public	signature:()
ncnn::LayerShaderType	./include/ncnn/layer_shader_type.h	/^namespace LayerShaderType {$/;"	n	namespace:ncnn
ncnn::LayerShaderType::LayerShaderType	./include/ncnn/layer_shader_type.h	/^enum LayerShaderType$/;"	g	namespace:ncnn::LayerShaderType
ncnn::LayerType	./include/ncnn/layer_type.h	/^namespace LayerType {$/;"	n	namespace:ncnn
ncnn::LayerType::CustomBit	./include/ncnn/layer_type.h	/^    CustomBit = (1 << 8),$/;"	e	enum:ncnn::LayerType::LayerType
ncnn::LayerType::LayerType	./include/ncnn/layer_type.h	/^enum LayerType$/;"	g	namespace:ncnn::LayerType
ncnn::Mat	./include/ncnn/mat.h	/^class NCNN_EXPORT Mat$/;"	c	namespace:ncnn
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat();$/;"	p	class:ncnn::Mat	access:public	signature:()
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(const Mat& m);$/;"	p	class:ncnn::Mat	access:public	signature:(const Mat& m)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int c, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int c, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int c, void* data, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, void* data, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int c, void* data, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, void* data, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int d, int c, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int d, int c, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int d, int c, void* data, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, void* data, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, int d, int c, void* data, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, void* data, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, void* data, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, void* data, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, int h, void* data, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, void* data, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, void* data, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, void* data, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^    Mat(int w, void* data, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, void* data, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat()$/;"	f	class:ncnn::Mat	signature:()
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(const Mat& m)$/;"	f	class:ncnn::Mat	signature:(const Mat& m)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _c, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _c, size_t _elemsize, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _c, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _c, size_t _elemsize, int _elempack, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _c, void* _data, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _c, void* _data, size_t _elemsize, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _c, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _c, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _d, int _c, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _d, int _c, void* _data, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _d, int _c, void* _data, size_t _elemsize, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, int _d, int _c, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, int _d, int _c, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, size_t _elemsize, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, size_t _elemsize, int _elempack, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, void* _data, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, void* _data, size_t _elemsize, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, int _h, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, int _h, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, size_t _elemsize, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, size_t _elemsize, int _elempack, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, void* _data, size_t _elemsize, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, void* _data, size_t _elemsize, Allocator* _allocator)
ncnn::Mat::Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::Mat(int _w, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)$/;"	f	class:ncnn::Mat	signature:(int _w, void* _data, size_t _elemsize, int _elempack, Allocator* _allocator)
ncnn::Mat::PIXEL_BGR	./include/ncnn/mat.h	/^        PIXEL_BGR = 2,$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGR2BGRA	./include/ncnn/mat.h	/^        PIXEL_BGR2BGRA = PIXEL_BGR | (PIXEL_BGRA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGR2GRAY	./include/ncnn/mat.h	/^        PIXEL_BGR2GRAY = PIXEL_BGR | (PIXEL_GRAY << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGR2RGB	./include/ncnn/mat.h	/^        PIXEL_BGR2RGB = PIXEL_BGR | (PIXEL_RGB << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGR2RGBA	./include/ncnn/mat.h	/^        PIXEL_BGR2RGBA = PIXEL_BGR | (PIXEL_RGBA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGRA	./include/ncnn/mat.h	/^        PIXEL_BGRA = 5,$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGRA2BGR	./include/ncnn/mat.h	/^        PIXEL_BGRA2BGR = PIXEL_BGRA | (PIXEL_BGR << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGRA2GRAY	./include/ncnn/mat.h	/^        PIXEL_BGRA2GRAY = PIXEL_BGRA | (PIXEL_GRAY << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGRA2RGB	./include/ncnn/mat.h	/^        PIXEL_BGRA2RGB = PIXEL_BGRA | (PIXEL_RGB << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_BGRA2RGBA	./include/ncnn/mat.h	/^        PIXEL_BGRA2RGBA = PIXEL_BGRA | (PIXEL_RGBA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_CONVERT_MASK	./include/ncnn/mat.h	/^        PIXEL_CONVERT_MASK = 0xffff0000,$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_CONVERT_SHIFT	./include/ncnn/mat.h	/^        PIXEL_CONVERT_SHIFT = 16,$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_FORMAT_MASK	./include/ncnn/mat.h	/^        PIXEL_FORMAT_MASK = 0x0000ffff,$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_GRAY	./include/ncnn/mat.h	/^        PIXEL_GRAY = 3,$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_GRAY2BGR	./include/ncnn/mat.h	/^        PIXEL_GRAY2BGR = PIXEL_GRAY | (PIXEL_BGR << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_GRAY2BGRA	./include/ncnn/mat.h	/^        PIXEL_GRAY2BGRA = PIXEL_GRAY | (PIXEL_BGRA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_GRAY2RGB	./include/ncnn/mat.h	/^        PIXEL_GRAY2RGB = PIXEL_GRAY | (PIXEL_RGB << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_GRAY2RGBA	./include/ncnn/mat.h	/^        PIXEL_GRAY2RGBA = PIXEL_GRAY | (PIXEL_RGBA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGB	./include/ncnn/mat.h	/^        PIXEL_RGB = 1,$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGB2BGR	./include/ncnn/mat.h	/^        PIXEL_RGB2BGR = PIXEL_RGB | (PIXEL_BGR << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGB2BGRA	./include/ncnn/mat.h	/^        PIXEL_RGB2BGRA = PIXEL_RGB | (PIXEL_BGRA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGB2GRAY	./include/ncnn/mat.h	/^        PIXEL_RGB2GRAY = PIXEL_RGB | (PIXEL_GRAY << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGB2RGBA	./include/ncnn/mat.h	/^        PIXEL_RGB2RGBA = PIXEL_RGB | (PIXEL_RGBA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGBA	./include/ncnn/mat.h	/^        PIXEL_RGBA = 4,$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGBA2BGR	./include/ncnn/mat.h	/^        PIXEL_RGBA2BGR = PIXEL_RGBA | (PIXEL_BGR << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGBA2BGRA	./include/ncnn/mat.h	/^        PIXEL_RGBA2BGRA = PIXEL_RGBA | (PIXEL_BGRA << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGBA2GRAY	./include/ncnn/mat.h	/^        PIXEL_RGBA2GRAY = PIXEL_RGBA | (PIXEL_GRAY << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PIXEL_RGBA2RGB	./include/ncnn/mat.h	/^        PIXEL_RGBA2RGB = PIXEL_RGBA | (PIXEL_RGB << PIXEL_CONVERT_SHIFT),$/;"	e	enum:ncnn::Mat::PixelType
ncnn::Mat::PixelType	./include/ncnn/mat.h	/^    enum PixelType$/;"	g	class:ncnn::Mat	access:public
ncnn::Mat::addref	./include/ncnn/mat.h	/^    void addref();$/;"	p	class:ncnn::Mat	access:public	signature:()
ncnn::Mat::addref	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::addref()$/;"	f	class:ncnn::Mat	signature:()
ncnn::Mat::allocator	./include/ncnn/mat.h	/^    Allocator* allocator;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::c	./include/ncnn/mat.h	/^    int c;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::channel	./include/ncnn/mat.h	/^    Mat channel(int c);$/;"	p	class:ncnn::Mat	access:public	signature:(int c)
ncnn::Mat::channel	./include/ncnn/mat.h	/^    const Mat channel(int c) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int c) const
ncnn::Mat::channel	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::channel(int _c)$/;"	f	class:ncnn::Mat	signature:(int _c)
ncnn::Mat::channel	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::channel(int _c) const$/;"	f	class:ncnn::Mat	signature:(int _c) const
ncnn::Mat::channel_range	./include/ncnn/mat.h	/^    Mat channel_range(int c, int channels);$/;"	p	class:ncnn::Mat	access:public	signature:(int c, int channels)
ncnn::Mat::channel_range	./include/ncnn/mat.h	/^    const Mat channel_range(int c, int channels) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int c, int channels) const
ncnn::Mat::channel_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::channel_range(int _c, int channels)$/;"	f	class:ncnn::Mat	signature:(int _c, int channels)
ncnn::Mat::channel_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::channel_range(int _c, int channels) const$/;"	f	class:ncnn::Mat	signature:(int _c, int channels) const
ncnn::Mat::clone	./include/ncnn/mat.h	/^    Mat clone(Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(Allocator* allocator = 0) const
ncnn::Mat::clone_from	./include/ncnn/mat.h	/^    void clone_from(const ncnn::Mat& mat, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const ncnn::Mat& mat, Allocator* allocator = 0)
ncnn::Mat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize = 4u, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, size_t elemsize = 4u, Allocator* allocator = 0)
ncnn::Mat::create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, int elempack, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(int w, size_t elemsize, int elempack, Allocator* allocator = 0)
ncnn::Mat::create_like	./include/ncnn/mat.h	/^    void create_like(const Mat& m, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const Mat& m, Allocator* allocator = 0)
ncnn::Mat::create_like	./include/ncnn/mat.h	/^    void create_like(const VkImageMat& im, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const VkImageMat& im, Allocator* allocator = 0)
ncnn::Mat::create_like	./include/ncnn/mat.h	/^    void create_like(const VkMat& m, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const VkMat& m, Allocator* allocator = 0)
ncnn::Mat::cstep	./include/ncnn/mat.h	/^    size_t cstep;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::d	./include/ncnn/mat.h	/^    int d;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::data	./include/ncnn/mat.h	/^    void* data;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::depth	./include/ncnn/mat.h	/^    Mat depth(int z);$/;"	p	class:ncnn::Mat	access:public	signature:(int z)
ncnn::Mat::depth	./include/ncnn/mat.h	/^    const Mat depth(int z) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int z) const
ncnn::Mat::depth	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::depth(int z)$/;"	f	class:ncnn::Mat	signature:(int z)
ncnn::Mat::depth	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::depth(int z) const$/;"	f	class:ncnn::Mat	signature:(int z) const
ncnn::Mat::depth_range	./include/ncnn/mat.h	/^    Mat depth_range(int z, int depths);$/;"	p	class:ncnn::Mat	access:public	signature:(int z, int depths)
ncnn::Mat::depth_range	./include/ncnn/mat.h	/^    const Mat depth_range(int z, int depths) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int z, int depths) const
ncnn::Mat::depth_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::depth_range(int z, int depths)$/;"	f	class:ncnn::Mat	signature:(int z, int depths)
ncnn::Mat::depth_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::depth_range(int z, int depths) const$/;"	f	class:ncnn::Mat	signature:(int z, int depths) const
ncnn::Mat::dims	./include/ncnn/mat.h	/^    int dims;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::elembits	./include/ncnn/mat.h	/^    int elembits() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
ncnn::Mat::elembits	./include/ncnn/mat.h	/^NCNN_FORCEINLINE int Mat::elembits() const$/;"	f	class:ncnn::Mat	signature:() const
ncnn::Mat::elempack	./include/ncnn/mat.h	/^    int elempack;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::elemsize	./include/ncnn/mat.h	/^    size_t elemsize;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::empty	./include/ncnn/mat.h	/^    bool empty() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
ncnn::Mat::empty	./include/ncnn/mat.h	/^NCNN_FORCEINLINE bool Mat::empty() const$/;"	f	class:ncnn::Mat	signature:() const
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(T v);$/;"	p	class:ncnn::Mat	access:public	signature:(T v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(__m128i _v);$/;"	p	class:ncnn::Mat	access:public	signature:(__m128i _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(__m256 _v);$/;"	p	class:ncnn::Mat	access:public	signature:(__m256 _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(float v);$/;"	p	class:ncnn::Mat	access:public	signature:(float v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(float16x4_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(float16x4_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(float16x8_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(float16x8_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(float32x4_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(float32x4_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(int v);$/;"	p	class:ncnn::Mat	access:public	signature:(int v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(int32x4_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(int32x4_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(int32x4_t _v0, int32x4_t _v1);$/;"	p	class:ncnn::Mat	access:public	signature:(int32x4_t _v0, int32x4_t _v1)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(uint16x4_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(uint16x4_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(v4f32 _v);$/;"	p	class:ncnn::Mat	access:public	signature:(v4f32 _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(vfloat16m1_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(vfloat16m1_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(vfloat32m1_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(vfloat32m1_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(vint8m1_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(vint8m1_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^    void fill(vuint16m1_t _v);$/;"	p	class:ncnn::Mat	access:public	signature:(vuint16m1_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(T _v)$/;"	f	class:ncnn::Mat	signature:(T _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(__m128i _v)$/;"	f	class:ncnn::Mat	signature:(__m128i _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(__m256 _v)$/;"	f	class:ncnn::Mat	signature:(__m256 _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(float _v)$/;"	f	class:ncnn::Mat	signature:(float _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(float16x4_t _v)$/;"	f	class:ncnn::Mat	signature:(float16x4_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(float16x8_t _v)$/;"	f	class:ncnn::Mat	signature:(float16x8_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(float32x4_t _v)$/;"	f	class:ncnn::Mat	signature:(float32x4_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(int _v)$/;"	f	class:ncnn::Mat	signature:(int _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(int32x4_t _v)$/;"	f	class:ncnn::Mat	signature:(int32x4_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(int32x4_t _v0, int32x4_t _v1)$/;"	f	class:ncnn::Mat	signature:(int32x4_t _v0, int32x4_t _v1)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(uint16x4_t _v)$/;"	f	class:ncnn::Mat	signature:(uint16x4_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(v4f32 _v)$/;"	f	class:ncnn::Mat	signature:(v4f32 _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(vfloat16m1_t _v)$/;"	f	class:ncnn::Mat	signature:(vfloat16m1_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(vfloat32m1_t _v)$/;"	f	class:ncnn::Mat	signature:(vfloat32m1_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(vint8m1_t _v)$/;"	f	class:ncnn::Mat	signature:(vint8m1_t _v)
ncnn::Mat::fill	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::fill(vuint16m1_t _v)$/;"	f	class:ncnn::Mat	signature:(vuint16m1_t _v)
ncnn::Mat::from_android_bitmap	./include/ncnn/mat.h	/^    static Mat from_android_bitmap(JNIEnv* env, jobject bitmap, int type_to, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_to, Allocator* allocator = 0)
ncnn::Mat::from_android_bitmap_resize	./include/ncnn/mat.h	/^    static Mat from_android_bitmap_resize(JNIEnv* env, jobject bitmap, int type_to, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_to, int target_width, int target_height, Allocator* allocator = 0)
ncnn::Mat::from_android_bitmap_roi	./include/ncnn/mat.h	/^    static Mat from_android_bitmap_roi(JNIEnv* env, jobject bitmap, int type_to, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_to, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0)
ncnn::Mat::from_android_bitmap_roi_resize	./include/ncnn/mat.h	/^    static Mat from_android_bitmap_roi_resize(JNIEnv* env, jobject bitmap, int type_to, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_to, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0)
ncnn::Mat::from_float16	./include/ncnn/mat.h	/^    static Mat from_float16(const unsigned short* data, int size);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned short* data, int size)
ncnn::Mat::from_pixels	./include/ncnn/mat.h	/^    static Mat from_pixels(const unsigned char* pixels, int type, int w, int h, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, Allocator* allocator = 0)
ncnn::Mat::from_pixels	./include/ncnn/mat.h	/^    static Mat from_pixels(const unsigned char* pixels, int type, int w, int h, int stride, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int stride, Allocator* allocator = 0)
ncnn::Mat::from_pixels_resize	./include/ncnn/mat.h	/^    static Mat from_pixels_resize(const unsigned char* pixels, int type, int w, int h, int stride, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int target_width, int target_height, Allocator* allocator = 0)
ncnn::Mat::from_pixels_resize	./include/ncnn/mat.h	/^    static Mat from_pixels_resize(const unsigned char* pixels, int type, int w, int h, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int target_width, int target_height, Allocator* allocator = 0)
ncnn::Mat::from_pixels_roi	./include/ncnn/mat.h	/^    static Mat from_pixels_roi(const unsigned char* pixels, int type, int w, int h, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0)
ncnn::Mat::from_pixels_roi	./include/ncnn/mat.h	/^    static Mat from_pixels_roi(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, Allocator* allocator = 0)
ncnn::Mat::from_pixels_roi_resize	./include/ncnn/mat.h	/^    static Mat from_pixels_roi_resize(const unsigned char* pixels, int type, int w, int h, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0)
ncnn::Mat::from_pixels_roi_resize	./include/ncnn/mat.h	/^    static Mat from_pixels_roi_resize(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0);$/;"	p	class:ncnn::Mat	access:public	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, int target_width, int target_height, Allocator* allocator = 0)
ncnn::Mat::h	./include/ncnn/mat.h	/^    int h;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::operator =	./include/ncnn/mat.h	/^    Mat& operator=(const Mat& m);$/;"	p	class:ncnn::Mat	access:public	signature:(const Mat& m)
ncnn::Mat::operator =	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat& Mat::operator=(const Mat& m)$/;"	f	class:ncnn::Mat	signature:(const Mat& m)
ncnn::Mat::operator T*	./include/ncnn/mat.h	/^    operator T*();$/;"	p	class:ncnn::Mat	access:public	signature:()
ncnn::Mat::operator T*	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::operator T*()$/;"	f	class:ncnn::Mat	signature:()
ncnn::Mat::operator []	./include/ncnn/mat.h	/^    const float& operator[](size_t i) const;$/;"	p	class:ncnn::Mat	access:public	signature:(size_t i) const
ncnn::Mat::operator []	./include/ncnn/mat.h	/^    float& operator[](size_t i);$/;"	p	class:ncnn::Mat	access:public	signature:(size_t i)
ncnn::Mat::operator []	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const float& Mat::operator[](size_t i) const$/;"	f	class:ncnn::Mat	signature:(size_t i) const
ncnn::Mat::operator []	./include/ncnn/mat.h	/^NCNN_FORCEINLINE float& Mat::operator[](size_t i)$/;"	f	class:ncnn::Mat	signature:(size_t i)
ncnn::Mat::operator const T*	./include/ncnn/mat.h	/^    operator const T*() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
ncnn::Mat::operator const T*	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::operator const T*() const$/;"	f	class:ncnn::Mat	signature:() const
ncnn::Mat::range	./include/ncnn/mat.h	/^    Mat range(int x, int n);$/;"	p	class:ncnn::Mat	access:public	signature:(int x, int n)
ncnn::Mat::range	./include/ncnn/mat.h	/^    const Mat range(int x, int n) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int x, int n) const
ncnn::Mat::range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::range(int x, int n)$/;"	f	class:ncnn::Mat	signature:(int x, int n)
ncnn::Mat::range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::range(int x, int n) const$/;"	f	class:ncnn::Mat	signature:(int x, int n) const
ncnn::Mat::refcount	./include/ncnn/mat.h	/^    int* refcount;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::release	./include/ncnn/mat.h	/^    void release();$/;"	p	class:ncnn::Mat	access:public	signature:()
ncnn::Mat::release	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::release()$/;"	f	class:ncnn::Mat	signature:()
ncnn::Mat::reshape	./include/ncnn/mat.h	/^    Mat reshape(int w, Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int w, Allocator* allocator = 0) const
ncnn::Mat::reshape	./include/ncnn/mat.h	/^    Mat reshape(int w, int h, Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, Allocator* allocator = 0) const
ncnn::Mat::reshape	./include/ncnn/mat.h	/^    Mat reshape(int w, int h, int c, Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, Allocator* allocator = 0) const
ncnn::Mat::reshape	./include/ncnn/mat.h	/^    Mat reshape(int w, int h, int d, int c, Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, Allocator* allocator = 0) const
ncnn::Mat::row	./include/ncnn/mat.h	/^    T* row(int y);$/;"	p	class:ncnn::Mat	access:public	signature:(int y)
ncnn::Mat::row	./include/ncnn/mat.h	/^    const T* row(int y) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int y) const
ncnn::Mat::row	./include/ncnn/mat.h	/^    const float* row(int y) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int y) const
ncnn::Mat::row	./include/ncnn/mat.h	/^    float* row(int y);$/;"	p	class:ncnn::Mat	access:public	signature:(int y)
ncnn::Mat::row	./include/ncnn/mat.h	/^NCNN_FORCEINLINE T* Mat::row(int y)$/;"	f	class:ncnn::Mat	signature:(int y)
ncnn::Mat::row	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const T* Mat::row(int y) const$/;"	f	class:ncnn::Mat	signature:(int y) const
ncnn::Mat::row	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const float* Mat::row(int y) const$/;"	f	class:ncnn::Mat	signature:(int y) const
ncnn::Mat::row	./include/ncnn/mat.h	/^NCNN_FORCEINLINE float* Mat::row(int y)$/;"	f	class:ncnn::Mat	signature:(int y)
ncnn::Mat::row_range	./include/ncnn/mat.h	/^    Mat row_range(int y, int rows);$/;"	p	class:ncnn::Mat	access:public	signature:(int y, int rows)
ncnn::Mat::row_range	./include/ncnn/mat.h	/^    const Mat row_range(int y, int rows) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int y, int rows) const
ncnn::Mat::row_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::row_range(int y, int rows)$/;"	f	class:ncnn::Mat	signature:(int y, int rows)
ncnn::Mat::row_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::row_range(int y, int rows) const$/;"	f	class:ncnn::Mat	signature:(int y, int rows) const
ncnn::Mat::shape	./include/ncnn/mat.h	/^    Mat shape() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
ncnn::Mat::shape	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::shape() const$/;"	f	class:ncnn::Mat	signature:() const
ncnn::Mat::substract_mean_normalize	./include/ncnn/mat.h	/^    void substract_mean_normalize(const float* mean_vals, const float* norm_vals);$/;"	p	class:ncnn::Mat	access:public	signature:(const float* mean_vals, const float* norm_vals)
ncnn::Mat::to_android_bitmap	./include/ncnn/mat.h	/^    void to_android_bitmap(JNIEnv* env, jobject bitmap, int type_from) const;$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_from) const
ncnn::Mat::to_pixels	./include/ncnn/mat.h	/^    void to_pixels(unsigned char* pixels, int type) const;$/;"	p	class:ncnn::Mat	access:public	signature:(unsigned char* pixels, int type) const
ncnn::Mat::to_pixels	./include/ncnn/mat.h	/^    void to_pixels(unsigned char* pixels, int type, int stride) const;$/;"	p	class:ncnn::Mat	access:public	signature:(unsigned char* pixels, int type, int stride) const
ncnn::Mat::to_pixels_resize	./include/ncnn/mat.h	/^    void to_pixels_resize(unsigned char* pixels, int type, int target_width, int target_height) const;$/;"	p	class:ncnn::Mat	access:public	signature:(unsigned char* pixels, int type, int target_width, int target_height) const
ncnn::Mat::to_pixels_resize	./include/ncnn/mat.h	/^    void to_pixels_resize(unsigned char* pixels, int type, int target_width, int target_height, int target_stride) const;$/;"	p	class:ncnn::Mat	access:public	signature:(unsigned char* pixels, int type, int target_width, int target_height, int target_stride) const
ncnn::Mat::total	./include/ncnn/mat.h	/^    size_t total() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
ncnn::Mat::total	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t Mat::total() const$/;"	f	class:ncnn::Mat	signature:() const
ncnn::Mat::w	./include/ncnn/mat.h	/^    int w;$/;"	m	class:ncnn::Mat	access:public
ncnn::Mat::~Mat	./include/ncnn/mat.h	/^    ~Mat();$/;"	p	class:ncnn::Mat	access:public	signature:()
ncnn::Mat::~Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::~Mat()$/;"	f	class:ncnn::Mat	signature:()
ncnn::ModelBin	./include/ncnn/modelbin.h	/^class NCNN_EXPORT ModelBin$/;"	c	namespace:ncnn
ncnn::ModelBin::ModelBin	./include/ncnn/modelbin.h	/^    ModelBin();$/;"	p	class:ncnn::ModelBin	access:public	signature:()
ncnn::ModelBin::load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int h, int c, int type) const;$/;"	p	class:ncnn::ModelBin	access:public	signature:(int w, int h, int c, int type) const
ncnn::ModelBin::load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int h, int type) const;$/;"	p	class:ncnn::ModelBin	access:public	signature:(int w, int h, int type) const
ncnn::ModelBin::load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int type) const = 0;$/;"	p	class:ncnn::ModelBin	access:public	signature:(int w, int type) const
ncnn::ModelBin::~ModelBin	./include/ncnn/modelbin.h	/^    virtual ~ModelBin();$/;"	p	class:ncnn::ModelBin	access:public	signature:()
ncnn::ModelBinFromDataReader	./include/ncnn/modelbin.h	/^class NCNN_EXPORT ModelBinFromDataReader : public ModelBin$/;"	c	namespace:ncnn	inherits:ModelBin
ncnn::ModelBinFromDataReader::ModelBinFromDataReader	./include/ncnn/modelbin.h	/^    ModelBinFromDataReader(const ModelBinFromDataReader&);$/;"	p	class:ncnn::ModelBinFromDataReader	access:private	signature:(const ModelBinFromDataReader&)
ncnn::ModelBinFromDataReader::ModelBinFromDataReader	./include/ncnn/modelbin.h	/^    explicit ModelBinFromDataReader(const DataReader& dr);$/;"	p	class:ncnn::ModelBinFromDataReader	access:public	signature:(const DataReader& dr)
ncnn::ModelBinFromDataReader::d	./include/ncnn/modelbin.h	/^    ModelBinFromDataReaderPrivate* const d;$/;"	m	class:ncnn::ModelBinFromDataReader	access:private
ncnn::ModelBinFromDataReader::load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int type) const;$/;"	p	class:ncnn::ModelBinFromDataReader	access:public	signature:(int w, int type) const
ncnn::ModelBinFromDataReader::operator =	./include/ncnn/modelbin.h	/^    ModelBinFromDataReader& operator=(const ModelBinFromDataReader&);$/;"	p	class:ncnn::ModelBinFromDataReader	access:private	signature:(const ModelBinFromDataReader&)
ncnn::ModelBinFromDataReader::~ModelBinFromDataReader	./include/ncnn/modelbin.h	/^    virtual ~ModelBinFromDataReader();$/;"	p	class:ncnn::ModelBinFromDataReader	access:public	signature:()
ncnn::ModelBinFromDataReaderPrivate	./include/ncnn/modelbin.h	/^class ModelBinFromDataReaderPrivate;$/;"	x
ncnn::ModelBinFromMatArray	./include/ncnn/modelbin.h	/^class NCNN_EXPORT ModelBinFromMatArray : public ModelBin$/;"	c	namespace:ncnn	inherits:ModelBin
ncnn::ModelBinFromMatArray::ModelBinFromMatArray	./include/ncnn/modelbin.h	/^    ModelBinFromMatArray(const ModelBinFromMatArray&);$/;"	p	class:ncnn::ModelBinFromMatArray	access:private	signature:(const ModelBinFromMatArray&)
ncnn::ModelBinFromMatArray::ModelBinFromMatArray	./include/ncnn/modelbin.h	/^    explicit ModelBinFromMatArray(const Mat* weights);$/;"	p	class:ncnn::ModelBinFromMatArray	access:public	signature:(const Mat* weights)
ncnn::ModelBinFromMatArray::d	./include/ncnn/modelbin.h	/^    ModelBinFromMatArrayPrivate* const d;$/;"	m	class:ncnn::ModelBinFromMatArray	access:private
ncnn::ModelBinFromMatArray::load	./include/ncnn/modelbin.h	/^    virtual Mat load(int w, int type) const;$/;"	p	class:ncnn::ModelBinFromMatArray	access:public	signature:(int w, int type) const
ncnn::ModelBinFromMatArray::operator =	./include/ncnn/modelbin.h	/^    ModelBinFromMatArray& operator=(const ModelBinFromMatArray&);$/;"	p	class:ncnn::ModelBinFromMatArray	access:private	signature:(const ModelBinFromMatArray&)
ncnn::ModelBinFromMatArray::~ModelBinFromMatArray	./include/ncnn/modelbin.h	/^    virtual ~ModelBinFromMatArray();$/;"	p	class:ncnn::ModelBinFromMatArray	access:public	signature:()
ncnn::ModelBinFromMatArrayPrivate	./include/ncnn/modelbin.h	/^class ModelBinFromMatArrayPrivate;$/;"	x
ncnn::Mutex	./include/ncnn/platform.h	/^class NCNN_EXPORT Mutex$/;"	c	namespace:ncnn
ncnn::Mutex::ConditionVariable	./include/ncnn/platform.h	/^    friend class ConditionVariable;$/;"	x
ncnn::Mutex::Mutex	./include/ncnn/platform.h	/^    Mutex() { InitializeSRWLock(&srwlock); }$/;"	f	class:ncnn::Mutex	access:public	signature:()
ncnn::Mutex::lock	./include/ncnn/platform.h	/^    void lock() { AcquireSRWLockExclusive(&srwlock); }$/;"	f	class:ncnn::Mutex	access:public	signature:()
ncnn::Mutex::srwlock	./include/ncnn/platform.h	/^    SRWLOCK srwlock;$/;"	m	class:ncnn::Mutex	access:private
ncnn::Mutex::unlock	./include/ncnn/platform.h	/^    void unlock() { ReleaseSRWLockExclusive(&srwlock); }$/;"	f	class:ncnn::Mutex	access:public	signature:()
ncnn::Mutex::~Mutex	./include/ncnn/platform.h	/^    ~Mutex() {}$/;"	f	class:ncnn::Mutex	access:public	signature:()
ncnn::MutexLockGuard	./include/ncnn/platform.h	/^class NCNN_EXPORT MutexLockGuard$/;"	c	namespace:ncnn
ncnn::MutexLockGuard::MutexLockGuard	./include/ncnn/platform.h	/^    MutexLockGuard(Mutex& _mutex) : mutex(_mutex) { mutex.lock(); }$/;"	f	class:ncnn::MutexLockGuard	access:public	signature:(Mutex& _mutex)
ncnn::MutexLockGuard::mutex	./include/ncnn/platform.h	/^    Mutex& mutex;$/;"	m	class:ncnn::MutexLockGuard	access:private
ncnn::MutexLockGuard::~MutexLockGuard	./include/ncnn/platform.h	/^    ~MutexLockGuard() { mutex.unlock(); }$/;"	f	class:ncnn::MutexLockGuard	access:public	signature:()
ncnn::NCNN_XADD	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE int NCNN_XADD(int* addr, int delta)$/;"	f	namespace:ncnn	signature:(int* addr, int delta)
ncnn::Net	./include/ncnn/net.h	/^class NCNN_EXPORT Net$/;"	c	namespace:ncnn
ncnn::Net	./include/ncnn/paramdict.h	/^class Net;$/;"	x
ncnn::Net::Extractor	./include/ncnn/net.h	/^    friend class Extractor;$/;"	x
ncnn::Net::Net	./include/ncnn/net.h	/^    Net();$/;"	p	class:ncnn::Net	access:public	signature:()
ncnn::Net::Net	./include/ncnn/net.h	/^    Net(const Net&);$/;"	p	class:ncnn::Net	access:private	signature:(const Net&)
ncnn::Net::blobs	./include/ncnn/net.h	/^    const std::vector<Blob>& blobs() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
ncnn::Net::clear	./include/ncnn/net.h	/^    void clear();$/;"	p	class:ncnn::Net	access:public	signature:()
ncnn::Net::create_custom_layer	./include/ncnn/net.h	/^    virtual Layer* create_custom_layer(const char* type);$/;"	p	class:ncnn::Net	access:protected	signature:(const char* type)
ncnn::Net::create_custom_layer	./include/ncnn/net.h	/^    virtual Layer* create_custom_layer(int index);$/;"	p	class:ncnn::Net	access:protected	signature:(int index)
ncnn::Net::create_extractor	./include/ncnn/net.h	/^    Extractor create_extractor() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
ncnn::Net::custom_layer_to_index	./include/ncnn/net.h	/^    virtual int custom_layer_to_index(const char* type);$/;"	p	class:ncnn::Net	access:public	signature:(const char* type)
ncnn::Net::d	./include/ncnn/net.h	/^    NetPrivate* const d;$/;"	m	class:ncnn::Net	access:private
ncnn::Net::find_blob_index_by_name	./include/ncnn/net.h	/^    int find_blob_index_by_name(const char* name) const;$/;"	p	class:ncnn::Net	access:protected	signature:(const char* name) const
ncnn::Net::find_layer_index_by_name	./include/ncnn/net.h	/^    int find_layer_index_by_name(const char* name) const;$/;"	p	class:ncnn::Net	access:protected	signature:(const char* name) const
ncnn::Net::input_indexes	./include/ncnn/net.h	/^    const std::vector<int>& input_indexes() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
ncnn::Net::input_names	./include/ncnn/net.h	/^    const std::vector<const char*>& input_names() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
ncnn::Net::layers	./include/ncnn/net.h	/^    const std::vector<Layer*>& layers() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
ncnn::Net::load_model	./include/ncnn/net.h	/^    int load_model(AAsset* asset);$/;"	p	class:ncnn::Net	access:public	signature:(AAsset* asset)
ncnn::Net::load_model	./include/ncnn/net.h	/^    int load_model(AAssetManager* mgr, const char* assetpath);$/;"	p	class:ncnn::Net	access:public	signature:(AAssetManager* mgr, const char* assetpath)
ncnn::Net::load_model	./include/ncnn/net.h	/^    int load_model(FILE* fp);$/;"	p	class:ncnn::Net	access:public	signature:(FILE* fp)
ncnn::Net::load_model	./include/ncnn/net.h	/^    int load_model(const DataReader& dr);$/;"	p	class:ncnn::Net	access:public	signature:(const DataReader& dr)
ncnn::Net::load_model	./include/ncnn/net.h	/^    int load_model(const char* modelpath);$/;"	p	class:ncnn::Net	access:public	signature:(const char* modelpath)
ncnn::Net::load_model	./include/ncnn/net.h	/^    int load_model(const unsigned char* mem);$/;"	p	class:ncnn::Net	access:public	signature:(const unsigned char* mem)
ncnn::Net::load_param	./include/ncnn/net.h	/^    int load_param(AAsset* asset);$/;"	p	class:ncnn::Net	access:public	signature:(AAsset* asset)
ncnn::Net::load_param	./include/ncnn/net.h	/^    int load_param(AAssetManager* mgr, const char* assetpath);$/;"	p	class:ncnn::Net	access:public	signature:(AAssetManager* mgr, const char* assetpath)
ncnn::Net::load_param	./include/ncnn/net.h	/^    int load_param(FILE* fp);$/;"	p	class:ncnn::Net	access:public	signature:(FILE* fp)
ncnn::Net::load_param	./include/ncnn/net.h	/^    int load_param(const DataReader& dr);$/;"	p	class:ncnn::Net	access:public	signature:(const DataReader& dr)
ncnn::Net::load_param	./include/ncnn/net.h	/^    int load_param(const char* protopath);$/;"	p	class:ncnn::Net	access:public	signature:(const char* protopath)
ncnn::Net::load_param	./include/ncnn/net.h	/^    int load_param(const unsigned char* mem);$/;"	p	class:ncnn::Net	access:public	signature:(const unsigned char* mem)
ncnn::Net::load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(AAsset* asset);$/;"	p	class:ncnn::Net	access:public	signature:(AAsset* asset)
ncnn::Net::load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(AAssetManager* mgr, const char* assetpath);$/;"	p	class:ncnn::Net	access:public	signature:(AAssetManager* mgr, const char* assetpath)
ncnn::Net::load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(FILE* fp);$/;"	p	class:ncnn::Net	access:public	signature:(FILE* fp)
ncnn::Net::load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(const DataReader& dr);$/;"	p	class:ncnn::Net	access:public	signature:(const DataReader& dr)
ncnn::Net::load_param_bin	./include/ncnn/net.h	/^    int load_param_bin(const char* protopath);$/;"	p	class:ncnn::Net	access:public	signature:(const char* protopath)
ncnn::Net::load_param_mem	./include/ncnn/net.h	/^    int load_param_mem(const char* mem);$/;"	p	class:ncnn::Net	access:public	signature:(const char* mem)
ncnn::Net::mutable_blobs	./include/ncnn/net.h	/^    std::vector<Blob>& mutable_blobs();$/;"	p	class:ncnn::Net	access:public	signature:()
ncnn::Net::mutable_layers	./include/ncnn/net.h	/^    std::vector<Layer*>& mutable_layers();$/;"	p	class:ncnn::Net	access:public	signature:()
ncnn::Net::operator =	./include/ncnn/net.h	/^    Net& operator=(const Net&);$/;"	p	class:ncnn::Net	access:private	signature:(const Net&)
ncnn::Net::opt	./include/ncnn/net.h	/^    Option opt;$/;"	m	class:ncnn::Net	access:public
ncnn::Net::output_indexes	./include/ncnn/net.h	/^    const std::vector<int>& output_indexes() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
ncnn::Net::output_names	./include/ncnn/net.h	/^    const std::vector<const char*>& output_names() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
ncnn::Net::register_custom_layer	./include/ncnn/net.h	/^    int register_custom_layer(const char* type, layer_creator_func creator, layer_destroyer_func destroyer = 0, void* userdata = 0);$/;"	p	class:ncnn::Net	access:public	signature:(const char* type, layer_creator_func creator, layer_destroyer_func destroyer = 0, void* userdata = 0)
ncnn::Net::register_custom_layer	./include/ncnn/net.h	/^    int register_custom_layer(int index, layer_creator_func creator, layer_destroyer_func destroyer = 0, void* userdata = 0);$/;"	p	class:ncnn::Net	access:public	signature:(int index, layer_creator_func creator, layer_destroyer_func destroyer = 0, void* userdata = 0)
ncnn::Net::set_vulkan_device	./include/ncnn/net.h	/^    void set_vulkan_device(const VulkanDevice* vkdev);$/;"	p	class:ncnn::Net	access:public	signature:(const VulkanDevice* vkdev)
ncnn::Net::set_vulkan_device	./include/ncnn/net.h	/^    void set_vulkan_device(int device_index);$/;"	p	class:ncnn::Net	access:public	signature:(int device_index)
ncnn::Net::vulkan_device	./include/ncnn/net.h	/^    const VulkanDevice* vulkan_device() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
ncnn::Net::~Net	./include/ncnn/net.h	/^    virtual ~Net();$/;"	p	class:ncnn::Net	access:public	signature:()
ncnn::NetPrivate	./include/ncnn/net.h	/^class NetPrivate;$/;"	x
ncnn::Option	./include/ncnn/gpu.h	/^class Option;$/;"	x
ncnn::Option	./include/ncnn/option.h	/^class NCNN_EXPORT Option$/;"	c	namespace:ncnn
ncnn::Option	./include/ncnn/pipeline.h	/^class Option;$/;"	x
ncnn::Option::Option	./include/ncnn/option.h	/^    Option();$/;"	p	class:ncnn::Option	access:public	signature:()
ncnn::Option::blob_allocator	./include/ncnn/option.h	/^    Allocator* blob_allocator;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::blob_vkallocator	./include/ncnn/option.h	/^    VkAllocator* blob_vkallocator;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::flush_denormals	./include/ncnn/option.h	/^    int flush_denormals;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::lightmode	./include/ncnn/option.h	/^    bool lightmode;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::num_threads	./include/ncnn/option.h	/^    int num_threads;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::openmp_blocktime	./include/ncnn/option.h	/^    int openmp_blocktime;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::pipeline_cache	./include/ncnn/option.h	/^    PipelineCache* pipeline_cache;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::staging_vkallocator	./include/ncnn/option.h	/^    VkAllocator* staging_vkallocator;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_bf16_storage	./include/ncnn/option.h	/^    bool use_bf16_storage;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_cooperative_matrix	./include/ncnn/option.h	/^    bool use_cooperative_matrix;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_fp16_arithmetic	./include/ncnn/option.h	/^    bool use_fp16_arithmetic;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_fp16_packed	./include/ncnn/option.h	/^    bool use_fp16_packed;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_fp16_storage	./include/ncnn/option.h	/^    bool use_fp16_storage;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_image_storage	./include/ncnn/option.h	/^    bool use_image_storage;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_int8_arithmetic	./include/ncnn/option.h	/^    bool use_int8_arithmetic;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_int8_inference	./include/ncnn/option.h	/^    bool use_int8_inference;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_int8_packed	./include/ncnn/option.h	/^    bool use_int8_packed;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_int8_storage	./include/ncnn/option.h	/^    bool use_int8_storage;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_local_pool_allocator	./include/ncnn/option.h	/^    bool use_local_pool_allocator;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_packing_layout	./include/ncnn/option.h	/^    bool use_packing_layout;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_0	./include/ncnn/option.h	/^    bool use_reserved_0;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_10	./include/ncnn/option.h	/^    bool use_reserved_10;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_11	./include/ncnn/option.h	/^    bool use_reserved_11;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_3	./include/ncnn/option.h	/^    bool use_reserved_3;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_4	./include/ncnn/option.h	/^    bool use_reserved_4;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_5	./include/ncnn/option.h	/^    bool use_reserved_5;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_6	./include/ncnn/option.h	/^    bool use_reserved_6;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_7	./include/ncnn/option.h	/^    bool use_reserved_7;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_8	./include/ncnn/option.h	/^    bool use_reserved_8;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_reserved_9	./include/ncnn/option.h	/^    bool use_reserved_9;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_sgemm_convolution	./include/ncnn/option.h	/^    bool use_sgemm_convolution;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_shader_local_memory	./include/ncnn/option.h	/^    bool use_shader_local_memory;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_shader_pack8	./include/ncnn/option.h	/^    bool use_shader_pack8;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_subgroup_ballot	./include/ncnn/option.h	/^    bool use_subgroup_ballot;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_subgroup_basic	./include/ncnn/option.h	/^    bool use_subgroup_basic;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_subgroup_shuffle	./include/ncnn/option.h	/^    bool use_subgroup_shuffle;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_subgroup_vote	./include/ncnn/option.h	/^    bool use_subgroup_vote;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_tensor_storage	./include/ncnn/option.h	/^    bool use_tensor_storage;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_vulkan_compute	./include/ncnn/option.h	/^    bool use_vulkan_compute;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::use_winograd_convolution	./include/ncnn/option.h	/^    bool use_winograd_convolution;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::workspace_allocator	./include/ncnn/option.h	/^    Allocator* workspace_allocator;$/;"	m	class:ncnn::Option	access:public
ncnn::Option::workspace_vkallocator	./include/ncnn/option.h	/^    VkAllocator* workspace_vkallocator;$/;"	m	class:ncnn::Option	access:public
ncnn::ParamDict	./include/ncnn/paramdict.h	/^class NCNN_EXPORT ParamDict$/;"	c	namespace:ncnn
ncnn::ParamDict::Net	./include/ncnn/paramdict.h	/^    friend class Net;$/;"	x
ncnn::ParamDict::ParamDict	./include/ncnn/paramdict.h	/^    ParamDict();$/;"	p	class:ncnn::ParamDict	access:public	signature:()
ncnn::ParamDict::ParamDict	./include/ncnn/paramdict.h	/^    ParamDict(const ParamDict&);$/;"	p	class:ncnn::ParamDict	access:public	signature:(const ParamDict&)
ncnn::ParamDict::clear	./include/ncnn/paramdict.h	/^    void clear();$/;"	p	class:ncnn::ParamDict	access:protected	signature:()
ncnn::ParamDict::d	./include/ncnn/paramdict.h	/^    ParamDictPrivate* const d;$/;"	m	class:ncnn::ParamDict	access:private
ncnn::ParamDict::get	./include/ncnn/paramdict.h	/^    Mat get(int id, const Mat& def) const;$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, const Mat& def) const
ncnn::ParamDict::get	./include/ncnn/paramdict.h	/^    float get(int id, float def) const;$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, float def) const
ncnn::ParamDict::get	./include/ncnn/paramdict.h	/^    int get(int id, int def) const;$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, int def) const
ncnn::ParamDict::load_param	./include/ncnn/paramdict.h	/^    int load_param(const DataReader& dr);$/;"	p	class:ncnn::ParamDict	access:protected	signature:(const DataReader& dr)
ncnn::ParamDict::load_param_bin	./include/ncnn/paramdict.h	/^    int load_param_bin(const DataReader& dr);$/;"	p	class:ncnn::ParamDict	access:protected	signature:(const DataReader& dr)
ncnn::ParamDict::operator =	./include/ncnn/paramdict.h	/^    ParamDict& operator=(const ParamDict&);$/;"	p	class:ncnn::ParamDict	access:public	signature:(const ParamDict&)
ncnn::ParamDict::set	./include/ncnn/paramdict.h	/^    void set(int id, const Mat& v);$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, const Mat& v)
ncnn::ParamDict::set	./include/ncnn/paramdict.h	/^    void set(int id, float f);$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, float f)
ncnn::ParamDict::set	./include/ncnn/paramdict.h	/^    void set(int id, int i);$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, int i)
ncnn::ParamDict::type	./include/ncnn/paramdict.h	/^    int type(int id) const;$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id) const
ncnn::ParamDict::~ParamDict	./include/ncnn/paramdict.h	/^    virtual ~ParamDict();$/;"	p	class:ncnn::ParamDict	access:public	signature:()
ncnn::ParamDictPrivate	./include/ncnn/paramdict.h	/^class ParamDictPrivate;$/;"	x
ncnn::Pipeline	./include/ncnn/command.h	/^class Pipeline;$/;"	x
ncnn::Pipeline	./include/ncnn/pipeline.h	/^class NCNN_EXPORT Pipeline$/;"	c	namespace:ncnn
ncnn::Pipeline::Pipeline	./include/ncnn/pipeline.h	/^    Pipeline(const Pipeline&);$/;"	p	class:ncnn::Pipeline	access:private	signature:(const Pipeline&)
ncnn::Pipeline::Pipeline	./include/ncnn/pipeline.h	/^    explicit Pipeline(const VulkanDevice* vkdev);$/;"	p	class:ncnn::Pipeline	access:public	signature:(const VulkanDevice* vkdev)
ncnn::Pipeline::create	./include/ncnn/pipeline.h	/^    int create(const uint32_t* spv_data, size_t spv_data_size, const std::vector<vk_specialization_type>& specializations);$/;"	p	class:ncnn::Pipeline	access:public	signature:(const uint32_t* spv_data, size_t spv_data_size, const std::vector<vk_specialization_type>& specializations)
ncnn::Pipeline::create	./include/ncnn/pipeline.h	/^    int create(int shader_type_index, const Option& opt, const std::vector<vk_specialization_type>& specializations);$/;"	p	class:ncnn::Pipeline	access:public	signature:(int shader_type_index, const Option& opt, const std::vector<vk_specialization_type>& specializations)
ncnn::Pipeline::d	./include/ncnn/pipeline.h	/^    PipelinePrivate* const d;$/;"	m	class:ncnn::Pipeline	access:private
ncnn::Pipeline::descriptor_update_template	./include/ncnn/pipeline.h	/^    VkDescriptorUpdateTemplateKHR descriptor_update_template() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::descriptorset_layout	./include/ncnn/pipeline.h	/^    VkDescriptorSetLayout descriptorset_layout() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::local_size_x	./include/ncnn/pipeline.h	/^    uint32_t local_size_x() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::local_size_y	./include/ncnn/pipeline.h	/^    uint32_t local_size_y() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::local_size_z	./include/ncnn/pipeline.h	/^    uint32_t local_size_z() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::operator =	./include/ncnn/pipeline.h	/^    Pipeline& operator=(const Pipeline&);$/;"	p	class:ncnn::Pipeline	access:private	signature:(const Pipeline&)
ncnn::Pipeline::pipeline	./include/ncnn/pipeline.h	/^    VkPipeline pipeline() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::pipeline_layout	./include/ncnn/pipeline.h	/^    VkPipelineLayout pipeline_layout() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::set_descriptor_update_template	./include/ncnn/pipeline.h	/^    void set_descriptor_update_template(VkDescriptorUpdateTemplateKHR descriptor_update_template);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkDescriptorUpdateTemplateKHR descriptor_update_template)
ncnn::Pipeline::set_descriptorset_layout	./include/ncnn/pipeline.h	/^    void set_descriptorset_layout(VkDescriptorSetLayout descriptorset_layout);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkDescriptorSetLayout descriptorset_layout)
ncnn::Pipeline::set_local_size_xyz	./include/ncnn/pipeline.h	/^    void set_local_size_xyz(int w, int h, int c);$/;"	p	class:ncnn::Pipeline	access:public	signature:(int w, int h, int c)
ncnn::Pipeline::set_optimal_local_size_xyz	./include/ncnn/pipeline.h	/^    void set_optimal_local_size_xyz(const Mat& local_size_xyz);$/;"	p	class:ncnn::Pipeline	access:public	signature:(const Mat& local_size_xyz)
ncnn::Pipeline::set_optimal_local_size_xyz	./include/ncnn/pipeline.h	/^    void set_optimal_local_size_xyz(int w = 4, int h = 4, int c = 4);$/;"	p	class:ncnn::Pipeline	access:public	signature:(int w = 4, int h = 4, int c = 4)
ncnn::Pipeline::set_pipeline	./include/ncnn/pipeline.h	/^    void set_pipeline(VkPipeline pipeline);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkPipeline pipeline)
ncnn::Pipeline::set_pipeline_layout	./include/ncnn/pipeline.h	/^    void set_pipeline_layout(VkPipelineLayout pipeline_layout);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkPipelineLayout pipeline_layout)
ncnn::Pipeline::set_shader_info	./include/ncnn/pipeline.h	/^    void set_shader_info(const ShaderInfo& shader_info);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(const ShaderInfo& shader_info)
ncnn::Pipeline::set_shader_module	./include/ncnn/pipeline.h	/^    void set_shader_module(VkShaderModule shader_module);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkShaderModule shader_module)
ncnn::Pipeline::shader_info	./include/ncnn/pipeline.h	/^    const ShaderInfo& shader_info() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::shader_module	./include/ncnn/pipeline.h	/^    VkShaderModule shader_module() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
ncnn::Pipeline::vkdev	./include/ncnn/pipeline.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::Pipeline	access:public
ncnn::Pipeline::~Pipeline	./include/ncnn/pipeline.h	/^    virtual ~Pipeline();$/;"	p	class:ncnn::Pipeline	access:public	signature:()
ncnn::PipelineCache	./include/ncnn/gpu.h	/^class PipelineCache;$/;"	x
ncnn::PipelineCache	./include/ncnn/option.h	/^class PipelineCache;$/;"	x
ncnn::PipelineCache	./include/ncnn/pipelinecache.h	/^class NCNN_EXPORT PipelineCache$/;"	c	namespace:ncnn
ncnn::PipelineCache::PipelineCache	./include/ncnn/pipelinecache.h	/^    PipelineCache(const PipelineCache&);$/;"	p	class:ncnn::PipelineCache	access:private	signature:(const PipelineCache&)
ncnn::PipelineCache::PipelineCache	./include/ncnn/pipelinecache.h	/^    explicit PipelineCache(const VulkanDevice* _vkdev);$/;"	p	class:ncnn::PipelineCache	access:public	signature:(const VulkanDevice* _vkdev)
ncnn::PipelineCache::clear	./include/ncnn/pipelinecache.h	/^    void clear();$/;"	p	class:ncnn::PipelineCache	access:public	signature:()
ncnn::PipelineCache::create_shader_module	./include/ncnn/pipelinecache.h	/^    int create_shader_module(int shader_type_index, const Option& opt, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z,$/;"	p	class:ncnn::PipelineCache	access:protected	signature:(int shader_type_index, const Option& opt, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z, VkShaderModule* _shader_module, ShaderInfo& si) const
ncnn::PipelineCache::d	./include/ncnn/pipelinecache.h	/^    PipelineCachePrivate* const d;$/;"	m	class:ncnn::PipelineCache	access:private
ncnn::PipelineCache::get_pipeline	./include/ncnn/pipelinecache.h	/^    int get_pipeline(const uint32_t* spv_data, size_t spv_data_size, const std::vector<vk_specialization_type>& specializations,$/;"	p	class:ncnn::PipelineCache	access:public	signature:(const uint32_t* spv_data, size_t spv_data_size, const std::vector<vk_specialization_type>& specializations, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z, VkShaderModule* shader_module, VkDescriptorSetLayout* descriptorset_layout, VkPipelineLayout* pipeline_layout, VkPipeline* pipeline, VkDescriptorUpdateTemplateKHR* descriptor_update_template, ShaderInfo& shader_info) const
ncnn::PipelineCache::get_pipeline	./include/ncnn/pipelinecache.h	/^    int get_pipeline(int shader_type_index, const Option& opt, const std::vector<vk_specialization_type>& specializations,$/;"	p	class:ncnn::PipelineCache	access:public	signature:(int shader_type_index, const Option& opt, const std::vector<vk_specialization_type>& specializations, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z, VkShaderModule* shader_module, VkDescriptorSetLayout* descriptorset_layout, VkPipelineLayout* pipeline_layout, VkPipeline* pipeline, VkDescriptorUpdateTemplateKHR* descriptor_update_template, ShaderInfo& shader_info) const
ncnn::PipelineCache::new_pipeline	./include/ncnn/pipelinecache.h	/^    int new_pipeline(VkShaderModule shader_module, const ShaderInfo& shader_info, const std::vector<vk_specialization_type>& specializations,$/;"	p	class:ncnn::PipelineCache	access:protected	signature:(VkShaderModule shader_module, const ShaderInfo& shader_info, const std::vector<vk_specialization_type>& specializations, VkDescriptorSetLayout* descriptorset_layout, VkPipelineLayout* pipeline_layout, VkPipeline* pipeline, VkDescriptorUpdateTemplateKHR* descriptor_update_template) const
ncnn::PipelineCache::operator =	./include/ncnn/pipelinecache.h	/^    PipelineCache& operator=(const PipelineCache&);$/;"	p	class:ncnn::PipelineCache	access:private	signature:(const PipelineCache&)
ncnn::PipelineCache::vkdev	./include/ncnn/pipelinecache.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::PipelineCache	access:protected
ncnn::PipelineCache::~PipelineCache	./include/ncnn/pipelinecache.h	/^    virtual ~PipelineCache();$/;"	p	class:ncnn::PipelineCache	access:public	signature:()
ncnn::PipelineCachePrivate	./include/ncnn/pipelinecache.h	/^class PipelineCachePrivate;$/;"	x
ncnn::PipelinePrivate	./include/ncnn/pipeline.h	/^class PipelinePrivate;$/;"	x
ncnn::PoolAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT PoolAllocator : public Allocator$/;"	c	namespace:ncnn	inherits:Allocator
ncnn::PoolAllocator::PoolAllocator	./include/ncnn/allocator.h	/^    PoolAllocator();$/;"	p	class:ncnn::PoolAllocator	access:public	signature:()
ncnn::PoolAllocator::PoolAllocator	./include/ncnn/allocator.h	/^    PoolAllocator(const PoolAllocator&);$/;"	p	class:ncnn::PoolAllocator	access:private	signature:(const PoolAllocator&)
ncnn::PoolAllocator::clear	./include/ncnn/allocator.h	/^    void clear();$/;"	p	class:ncnn::PoolAllocator	access:public	signature:()
ncnn::PoolAllocator::d	./include/ncnn/allocator.h	/^    PoolAllocatorPrivate* const d;$/;"	m	class:ncnn::PoolAllocator	access:private
ncnn::PoolAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(void* ptr);$/;"	p	class:ncnn::PoolAllocator	access:public	signature:(void* ptr)
ncnn::PoolAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual void* fastMalloc(size_t size);$/;"	p	class:ncnn::PoolAllocator	access:public	signature:(size_t size)
ncnn::PoolAllocator::operator =	./include/ncnn/allocator.h	/^    PoolAllocator& operator=(const PoolAllocator&);$/;"	p	class:ncnn::PoolAllocator	access:private	signature:(const PoolAllocator&)
ncnn::PoolAllocator::set_size_compare_ratio	./include/ncnn/allocator.h	/^    void set_size_compare_ratio(float scr);$/;"	p	class:ncnn::PoolAllocator	access:public	signature:(float scr)
ncnn::PoolAllocator::~PoolAllocator	./include/ncnn/allocator.h	/^    ~PoolAllocator();$/;"	p	class:ncnn::PoolAllocator	access:public	signature:()
ncnn::PoolAllocatorPrivate	./include/ncnn/allocator.h	/^class PoolAllocatorPrivate;$/;"	x
ncnn::ShaderInfo	./include/ncnn/gpu.h	/^class NCNN_EXPORT ShaderInfo$/;"	c	namespace:ncnn
ncnn::ShaderInfo::binding_count	./include/ncnn/gpu.h	/^    int binding_count;$/;"	m	class:ncnn::ShaderInfo	access:public
ncnn::ShaderInfo::binding_types	./include/ncnn/gpu.h	/^    int binding_types[16]; \/\/ 16 is large enough I think ...$/;"	m	class:ncnn::ShaderInfo	access:public
ncnn::ShaderInfo::push_constant_count	./include/ncnn/gpu.h	/^    int push_constant_count;$/;"	m	class:ncnn::ShaderInfo	access:public
ncnn::ShaderInfo::reserved_0	./include/ncnn/gpu.h	/^    int reserved_0;$/;"	m	class:ncnn::ShaderInfo	access:public
ncnn::ShaderInfo::reserved_1	./include/ncnn/gpu.h	/^    int reserved_1;$/;"	m	class:ncnn::ShaderInfo	access:public
ncnn::ShaderInfo::reserved_2	./include/ncnn/gpu.h	/^    int reserved_2;$/;"	m	class:ncnn::ShaderInfo	access:public
ncnn::ShaderInfo::reserved_3	./include/ncnn/gpu.h	/^    int reserved_3;$/;"	m	class:ncnn::ShaderInfo	access:public
ncnn::ShaderInfo::specialization_count	./include/ncnn/gpu.h	/^    int specialization_count;$/;"	m	class:ncnn::ShaderInfo	access:public
ncnn::Thread	./include/ncnn/platform.h	/^class NCNN_EXPORT Thread$/;"	c	namespace:ncnn
ncnn::Thread::Thread	./include/ncnn/platform.h	/^    Thread(void* (*start)(void*), void* args = 0) { _start = start; _args = args; handle = (HANDLE)_beginthreadex(0, 0, start_wrapper, this, 0, 0); }$/;"	f	class:ncnn::Thread	access:public	signature:(void* (*start)(void*), void* args = 0)
ncnn::Thread::_args	./include/ncnn/platform.h	/^    void* _args;$/;"	m	class:ncnn::Thread	access:private
ncnn::Thread::_start	./include/ncnn/platform.h	/^    void* (*_start)(void*);$/;"	m	class:ncnn::Thread	access:private
ncnn::Thread::handle	./include/ncnn/platform.h	/^    HANDLE handle;$/;"	m	class:ncnn::Thread	access:private
ncnn::Thread::join	./include/ncnn/platform.h	/^    void join() { WaitForSingleObject(handle, INFINITE); CloseHandle(handle); }$/;"	f	class:ncnn::Thread	access:public	signature:()
ncnn::Thread::start_wrapper	./include/ncnn/platform.h	/^    friend unsigned __stdcall start_wrapper(void* args)$/;"	f	class:ncnn::Thread	access:friend	signature:(void* args)
ncnn::Thread::~Thread	./include/ncnn/platform.h	/^    ~Thread() {}$/;"	f	class:ncnn::Thread	access:public	signature:()
ncnn::ThreadLocalStorage	./include/ncnn/platform.h	/^class NCNN_EXPORT ThreadLocalStorage$/;"	c	namespace:ncnn
ncnn::ThreadLocalStorage::ThreadLocalStorage	./include/ncnn/platform.h	/^    ThreadLocalStorage() { key = TlsAlloc(); }$/;"	f	class:ncnn::ThreadLocalStorage	access:public	signature:()
ncnn::ThreadLocalStorage::get	./include/ncnn/platform.h	/^    void* get() { return (void*)TlsGetValue(key); }$/;"	f	class:ncnn::ThreadLocalStorage	access:public	signature:()
ncnn::ThreadLocalStorage::key	./include/ncnn/platform.h	/^    DWORD key;$/;"	m	class:ncnn::ThreadLocalStorage	access:private
ncnn::ThreadLocalStorage::set	./include/ncnn/platform.h	/^    void set(void* value) { TlsSetValue(key, (LPVOID)value); }$/;"	f	class:ncnn::ThreadLocalStorage	access:public	signature:(void* value)
ncnn::ThreadLocalStorage::~ThreadLocalStorage	./include/ncnn/platform.h	/^    ~ThreadLocalStorage() { TlsFree(key); }$/;"	f	class:ncnn::ThreadLocalStorage	access:public	signature:()
ncnn::UnlockedPoolAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT UnlockedPoolAllocator : public Allocator$/;"	c	namespace:ncnn	inherits:Allocator
ncnn::UnlockedPoolAllocator::UnlockedPoolAllocator	./include/ncnn/allocator.h	/^    UnlockedPoolAllocator();$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:()
ncnn::UnlockedPoolAllocator::UnlockedPoolAllocator	./include/ncnn/allocator.h	/^    UnlockedPoolAllocator(const UnlockedPoolAllocator&);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:private	signature:(const UnlockedPoolAllocator&)
ncnn::UnlockedPoolAllocator::clear	./include/ncnn/allocator.h	/^    void clear();$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:()
ncnn::UnlockedPoolAllocator::d	./include/ncnn/allocator.h	/^    UnlockedPoolAllocatorPrivate* const d;$/;"	m	class:ncnn::UnlockedPoolAllocator	access:private
ncnn::UnlockedPoolAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(void* ptr);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:(void* ptr)
ncnn::UnlockedPoolAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual void* fastMalloc(size_t size);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:(size_t size)
ncnn::UnlockedPoolAllocator::operator =	./include/ncnn/allocator.h	/^    UnlockedPoolAllocator& operator=(const UnlockedPoolAllocator&);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:private	signature:(const UnlockedPoolAllocator&)
ncnn::UnlockedPoolAllocator::set_size_compare_ratio	./include/ncnn/allocator.h	/^    void set_size_compare_ratio(float scr);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:(float scr)
ncnn::UnlockedPoolAllocator::~UnlockedPoolAllocator	./include/ncnn/allocator.h	/^    ~UnlockedPoolAllocator();$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:()
ncnn::UnlockedPoolAllocatorPrivate	./include/ncnn/allocator.h	/^class UnlockedPoolAllocatorPrivate;$/;"	x
ncnn::VkAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkAllocator$/;"	c	namespace:ncnn
ncnn::VkAllocator	./include/ncnn/gpu.h	/^class VkAllocator;$/;"	x
ncnn::VkAllocator	./include/ncnn/option.h	/^class VkAllocator;$/;"	x
ncnn::VkAllocator::VkAllocator	./include/ncnn/allocator.h	/^    explicit VkAllocator(const VulkanDevice* _vkdev);$/;"	p	class:ncnn::VkAllocator	access:public	signature:(const VulkanDevice* _vkdev)
ncnn::VkAllocator::allocate_dedicated_memory	./include/ncnn/allocator.h	/^    VkDeviceMemory allocate_dedicated_memory(size_t size, uint32_t memory_type_index, VkImage image, VkBuffer buffer);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(size_t size, uint32_t memory_type_index, VkImage image, VkBuffer buffer)
ncnn::VkAllocator::allocate_memory	./include/ncnn/allocator.h	/^    VkDeviceMemory allocate_memory(size_t size, uint32_t memory_type_index);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(size_t size, uint32_t memory_type_index)
ncnn::VkAllocator::buffer_memory_type_index	./include/ncnn/allocator.h	/^    uint32_t buffer_memory_type_index;$/;"	m	class:ncnn::VkAllocator	access:public
ncnn::VkAllocator::clear	./include/ncnn/allocator.h	/^    virtual void clear();$/;"	p	class:ncnn::VkAllocator	access:public	signature:()
ncnn::VkAllocator::coherent	./include/ncnn/allocator.h	/^    bool coherent;$/;"	m	class:ncnn::VkAllocator	access:public
ncnn::VkAllocator::create_buffer	./include/ncnn/allocator.h	/^    VkBuffer create_buffer(size_t size, VkBufferUsageFlags usage);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(size_t size, VkBufferUsageFlags usage)
ncnn::VkAllocator::create_image	./include/ncnn/allocator.h	/^    VkImage create_image(int width, int height, int depth, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(int width, int height, int depth, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage)
ncnn::VkAllocator::create_imageview	./include/ncnn/allocator.h	/^    VkImageView create_imageview(VkImage image, VkFormat format);$/;"	p	class:ncnn::VkAllocator	access:protected	signature:(VkImage image, VkFormat format)
ncnn::VkAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr) = 0;$/;"	p	class:ncnn::VkAllocator	access:public	signature:(VkBufferMemory* ptr)
ncnn::VkAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr) = 0;$/;"	p	class:ncnn::VkAllocator	access:public	signature:(VkImageMemory* ptr)
ncnn::VkAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size) = 0;$/;"	p	class:ncnn::VkAllocator	access:public	signature:(size_t size)
ncnn::VkAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack) = 0;$/;"	p	class:ncnn::VkAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
ncnn::VkAllocator::flush	./include/ncnn/allocator.h	/^    virtual int flush(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkAllocator	access:public	signature:(VkBufferMemory* ptr)
ncnn::VkAllocator::image_memory_type_index	./include/ncnn/allocator.h	/^    uint32_t image_memory_type_index;$/;"	m	class:ncnn::VkAllocator	access:public
ncnn::VkAllocator::invalidate	./include/ncnn/allocator.h	/^    virtual int invalidate(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkAllocator	access:public	signature:(VkBufferMemory* ptr)
ncnn::VkAllocator::mappable	./include/ncnn/allocator.h	/^    bool mappable;$/;"	m	class:ncnn::VkAllocator	access:public
ncnn::VkAllocator::reserved_type_index	./include/ncnn/allocator.h	/^    uint32_t reserved_type_index;$/;"	m	class:ncnn::VkAllocator	access:public
ncnn::VkAllocator::vkdev	./include/ncnn/allocator.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::VkAllocator	access:public
ncnn::VkAllocator::~VkAllocator	./include/ncnn/allocator.h	/^    virtual ~VkAllocator();$/;"	p	class:ncnn::VkAllocator	access:public	signature:()
ncnn::VkAndroidHardwareBufferImageAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkAndroidHardwareBufferImageAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
ncnn::VkAndroidHardwareBufferImageAllocator::VkAndroidHardwareBufferImageAllocator	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferImageAllocator(const VkAndroidHardwareBufferImageAllocator&);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:private	signature:(const VkAndroidHardwareBufferImageAllocator&)
ncnn::VkAndroidHardwareBufferImageAllocator::VkAndroidHardwareBufferImageAllocator	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferImageAllocator(const VulkanDevice* _vkdev, AHardwareBuffer* _hb);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(const VulkanDevice* _vkdev, AHardwareBuffer* _hb)
ncnn::VkAndroidHardwareBufferImageAllocator::bufferDesc	./include/ncnn/allocator.h	/^    AHardwareBuffer_Desc bufferDesc;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
ncnn::VkAndroidHardwareBufferImageAllocator::bufferFormatProperties	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferFormatPropertiesANDROID bufferFormatProperties;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
ncnn::VkAndroidHardwareBufferImageAllocator::bufferProperties	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferPropertiesANDROID bufferProperties;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
ncnn::VkAndroidHardwareBufferImageAllocator::external_format	./include/ncnn/allocator.h	/^    uint64_t external_format() const;$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:() const
ncnn::VkAndroidHardwareBufferImageAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(VkBufferMemory* ptr)
ncnn::VkAndroidHardwareBufferImageAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(VkImageMemory* ptr)
ncnn::VkAndroidHardwareBufferImageAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(size_t size)
ncnn::VkAndroidHardwareBufferImageAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
ncnn::VkAndroidHardwareBufferImageAllocator::hb	./include/ncnn/allocator.h	/^    AHardwareBuffer* hb;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
ncnn::VkAndroidHardwareBufferImageAllocator::height	./include/ncnn/allocator.h	/^    int height() const;$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:() const
ncnn::VkAndroidHardwareBufferImageAllocator::init	./include/ncnn/allocator.h	/^    int init();$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:()
ncnn::VkAndroidHardwareBufferImageAllocator::operator =	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferImageAllocator& operator=(const VkAndroidHardwareBufferImageAllocator&);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:private	signature:(const VkAndroidHardwareBufferImageAllocator&)
ncnn::VkAndroidHardwareBufferImageAllocator::samplerYcbcrConversion	./include/ncnn/allocator.h	/^    VkSamplerYcbcrConversionKHR samplerYcbcrConversion;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
ncnn::VkAndroidHardwareBufferImageAllocator::width	./include/ncnn/allocator.h	/^    int width() const;$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:() const
ncnn::VkAndroidHardwareBufferImageAllocator::~VkAndroidHardwareBufferImageAllocator	./include/ncnn/allocator.h	/^    virtual ~VkAndroidHardwareBufferImageAllocator();$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:()
ncnn::VkBlobAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkBlobAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
ncnn::VkBlobAllocator::VkBlobAllocator	./include/ncnn/allocator.h	/^    VkBlobAllocator(const VkBlobAllocator&);$/;"	p	class:ncnn::VkBlobAllocator	access:private	signature:(const VkBlobAllocator&)
ncnn::VkBlobAllocator::VkBlobAllocator	./include/ncnn/allocator.h	/^    explicit VkBlobAllocator(const VulkanDevice* vkdev, size_t preferred_block_size = 16 * 1024 * 1024); \/\/ 16M$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(const VulkanDevice* vkdev, size_t preferred_block_size = 16 * 1024 * 1024)
ncnn::VkBlobAllocator::clear	./include/ncnn/allocator.h	/^    virtual void clear();$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:()
ncnn::VkBlobAllocator::d	./include/ncnn/allocator.h	/^    VkBlobAllocatorPrivate* const d;$/;"	m	class:ncnn::VkBlobAllocator	access:private
ncnn::VkBlobAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(VkBufferMemory* ptr)
ncnn::VkBlobAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(VkImageMemory* ptr)
ncnn::VkBlobAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(size_t size)
ncnn::VkBlobAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
ncnn::VkBlobAllocator::operator =	./include/ncnn/allocator.h	/^    VkBlobAllocator& operator=(const VkBlobAllocator&);$/;"	p	class:ncnn::VkBlobAllocator	access:private	signature:(const VkBlobAllocator&)
ncnn::VkBlobAllocator::~VkBlobAllocator	./include/ncnn/allocator.h	/^    virtual ~VkBlobAllocator();$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:()
ncnn::VkBlobAllocatorPrivate	./include/ncnn/allocator.h	/^class VkBlobAllocatorPrivate;$/;"	x
ncnn::VkBufferMemory	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkBufferMemory$/;"	c	namespace:ncnn
ncnn::VkBufferMemory::access_flags	./include/ncnn/allocator.h	/^    mutable VkAccessFlags access_flags;$/;"	m	class:ncnn::VkBufferMemory	access:public
ncnn::VkBufferMemory::buffer	./include/ncnn/allocator.h	/^    VkBuffer buffer;$/;"	m	class:ncnn::VkBufferMemory	access:public
ncnn::VkBufferMemory::capacity	./include/ncnn/allocator.h	/^    size_t capacity;$/;"	m	class:ncnn::VkBufferMemory	access:public
ncnn::VkBufferMemory::mapped_ptr	./include/ncnn/allocator.h	/^    void* mapped_ptr;$/;"	m	class:ncnn::VkBufferMemory	access:public
ncnn::VkBufferMemory::memory	./include/ncnn/allocator.h	/^    VkDeviceMemory memory;$/;"	m	class:ncnn::VkBufferMemory	access:public
ncnn::VkBufferMemory::offset	./include/ncnn/allocator.h	/^    size_t offset;$/;"	m	class:ncnn::VkBufferMemory	access:public
ncnn::VkBufferMemory::refcount	./include/ncnn/allocator.h	/^    int refcount;$/;"	m	class:ncnn::VkBufferMemory	access:public
ncnn::VkBufferMemory::stage_flags	./include/ncnn/allocator.h	/^    mutable VkPipelineStageFlags stage_flags;$/;"	m	class:ncnn::VkBufferMemory	access:public
ncnn::VkCompute	./include/ncnn/command.h	/^class NCNN_EXPORT VkCompute$/;"	c	namespace:ncnn
ncnn::VkCompute	./include/ncnn/gpu.h	/^class VkCompute;$/;"	x
ncnn::VkCompute	./include/ncnn/net.h	/^class VkCompute;$/;"	x
ncnn::VkCompute	./include/ncnn/pipeline.h	/^class VkCompute;$/;"	x
ncnn::VkCompute::VkCompute	./include/ncnn/command.h	/^    explicit VkCompute(const VulkanDevice* vkdev);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VulkanDevice* vkdev)
ncnn::VkCompute::barrier_readonly	./include/ncnn/command.h	/^    void barrier_readonly(const VkImageMat& binding);$/;"	p	class:ncnn::VkCompute	access:protected	signature:(const VkImageMat& binding)
ncnn::VkCompute::barrier_readwrite	./include/ncnn/command.h	/^    void barrier_readwrite(const VkImageMat& binding);$/;"	p	class:ncnn::VkCompute	access:protected	signature:(const VkImageMat& binding)
ncnn::VkCompute::barrier_readwrite	./include/ncnn/command.h	/^    void barrier_readwrite(const VkMat& binding);$/;"	p	class:ncnn::VkCompute	access:protected	signature:(const VkMat& binding)
ncnn::VkCompute::create_query_pool	./include/ncnn/command.h	/^    int create_query_pool(uint32_t query_count);$/;"	p	class:ncnn::VkCompute	access:public	signature:(uint32_t query_count)
ncnn::VkCompute::d	./include/ncnn/command.h	/^    VkComputePrivate* const d;$/;"	m	class:ncnn::VkCompute	access:private
ncnn::VkCompute::get_query_pool_results	./include/ncnn/command.h	/^    int get_query_pool_results(uint32_t first_query, uint32_t query_count, std::vector<uint64_t>& results);$/;"	p	class:ncnn::VkCompute	access:public	signature:(uint32_t first_query, uint32_t query_count, std::vector<uint64_t>& results)
ncnn::VkCompute::record_buffer_to_image	./include/ncnn/command.h	/^    void record_buffer_to_image(const VkMat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, VkImageMat& dst, const Option& opt)
ncnn::VkCompute::record_clone	./include/ncnn/command.h	/^    void record_clone(const Mat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Mat& src, VkImageMat& dst, const Option& opt)
ncnn::VkCompute::record_clone	./include/ncnn/command.h	/^    void record_clone(const Mat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Mat& src, VkMat& dst, const Option& opt)
ncnn::VkCompute::record_clone	./include/ncnn/command.h	/^    void record_clone(const VkImageMat& src, Mat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, Mat& dst, const Option& opt)
ncnn::VkCompute::record_clone	./include/ncnn/command.h	/^    void record_clone(const VkImageMat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, VkImageMat& dst, const Option& opt)
ncnn::VkCompute::record_clone	./include/ncnn/command.h	/^    void record_clone(const VkImageMat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, VkMat& dst, const Option& opt)
ncnn::VkCompute::record_clone	./include/ncnn/command.h	/^    void record_clone(const VkMat& src, Mat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, Mat& dst, const Option& opt)
ncnn::VkCompute::record_clone	./include/ncnn/command.h	/^    void record_clone(const VkMat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, VkImageMat& dst, const Option& opt)
ncnn::VkCompute::record_clone	./include/ncnn/command.h	/^    void record_clone(const VkMat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, VkMat& dst, const Option& opt)
ncnn::VkCompute::record_download	./include/ncnn/command.h	/^    void record_download(const VkImageMat& src, Mat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, Mat& dst, const Option& opt)
ncnn::VkCompute::record_download	./include/ncnn/command.h	/^    void record_download(const VkMat& src, Mat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, Mat& dst, const Option& opt)
ncnn::VkCompute::record_image_to_buffer	./include/ncnn/command.h	/^    void record_image_to_buffer(const VkImageMat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, VkMat& dst, const Option& opt)
ncnn::VkCompute::record_import_android_hardware_buffer	./include/ncnn/command.h	/^    void record_import_android_hardware_buffer(const ImportAndroidHardwareBufferPipeline* pipeline, const VkImageMat& src, const VkImageMat& dst);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const ImportAndroidHardwareBufferPipeline* pipeline, const VkImageMat& src, const VkImageMat& dst)
ncnn::VkCompute::record_import_android_hardware_buffer	./include/ncnn/command.h	/^    void record_import_android_hardware_buffer(const ImportAndroidHardwareBufferPipeline* pipeline, const VkImageMat& src, const VkMat& dst);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const ImportAndroidHardwareBufferPipeline* pipeline, const VkImageMat& src, const VkMat& dst)
ncnn::VkCompute::record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkImageMat>& bindings, const std::vector<vk_constant_type>& constants, const VkImageMat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkImageMat>& bindings, const std::vector<vk_constant_type>& constants, const VkImageMat& dispatcher)
ncnn::VkCompute::record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkMat>& bindings, const std::vector<vk_constant_type>& constants, const VkMat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkMat>& bindings, const std::vector<vk_constant_type>& constants, const VkMat& dispatcher)
ncnn::VkCompute::record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const Mat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const Mat& dispatcher)
ncnn::VkCompute::record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const VkImageMat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const VkImageMat& dispatcher)
ncnn::VkCompute::record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const VkMat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const VkMat& dispatcher)
ncnn::VkCompute::record_upload	./include/ncnn/command.h	/^    void record_upload(const Mat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Mat& src, VkImageMat& dst, const Option& opt)
ncnn::VkCompute::record_upload	./include/ncnn/command.h	/^    void record_upload(const Mat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Mat& src, VkMat& dst, const Option& opt)
ncnn::VkCompute::record_write_timestamp	./include/ncnn/command.h	/^    void record_write_timestamp(uint32_t query);$/;"	p	class:ncnn::VkCompute	access:public	signature:(uint32_t query)
ncnn::VkCompute::reset	./include/ncnn/command.h	/^    int reset();$/;"	p	class:ncnn::VkCompute	access:public	signature:()
ncnn::VkCompute::submit_and_wait	./include/ncnn/command.h	/^    int submit_and_wait();$/;"	p	class:ncnn::VkCompute	access:public	signature:()
ncnn::VkCompute::vkdev	./include/ncnn/command.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::VkCompute	access:protected
ncnn::VkCompute::~VkCompute	./include/ncnn/command.h	/^    virtual ~VkCompute();$/;"	p	class:ncnn::VkCompute	access:public	signature:()
ncnn::VkComputePrivate	./include/ncnn/command.h	/^class VkComputePrivate;$/;"	x
ncnn::VkImageMat	./include/ncnn/mat.h	/^class NCNN_EXPORT VkImageMat$/;"	c	namespace:ncnn
ncnn::VkImageMat	./include/ncnn/mat.h	/^class VkImageMat;$/;"	x
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat();$/;"	p	class:ncnn::VkImageMat	access:public	signature:()
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(const VkImageMat& m);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const VkImageMat& m)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, VkImageMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, VkImageMemory* data, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, VkImageMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, VkImageMemory* data, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int c, VkImageMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, VkImageMemory* data, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int c, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int d, int c, VkImageMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, VkImageMemory* data, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int d, int c, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, VkImageMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^    VkImageMat(int w, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat()$/;"	f	class:ncnn::VkImageMat	signature:()
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(const VkImageMat& m)$/;"	f	class:ncnn::VkImageMat	signature:(const VkImageMat& m)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _c, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _c, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _c, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _c, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _c, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _c, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _d, int _c, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _d, int _c, VkImageMemory* _data, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _d, int _c, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _d, int _c, VkImageMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _d, int _c, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, int _h, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, int _h, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkImageMat::VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::VkImageMat(int _w, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkImageMat	signature:(int _w, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkImageMat::addref	./include/ncnn/mat.h	/^    void addref();$/;"	p	class:ncnn::VkImageMat	access:public	signature:()
ncnn::VkImageMat::addref	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void VkImageMat::addref()$/;"	f	class:ncnn::VkImageMat	signature:()
ncnn::VkImageMat::allocator	./include/ncnn/mat.h	/^    VkAllocator* allocator;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::c	./include/ncnn/mat.h	/^    int c;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, size_t elemsize, VkAllocator* allocator)
ncnn::VkImageMat::create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(int w, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkImageMat::create_like	./include/ncnn/mat.h	/^    void create_like(const Mat& m, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const Mat& m, VkAllocator* allocator)
ncnn::VkImageMat::create_like	./include/ncnn/mat.h	/^    void create_like(const VkImageMat& im, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const VkImageMat& im, VkAllocator* allocator)
ncnn::VkImageMat::create_like	./include/ncnn/mat.h	/^    void create_like(const VkMat& m, VkAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const VkMat& m, VkAllocator* allocator)
ncnn::VkImageMat::d	./include/ncnn/mat.h	/^    int d;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::data	./include/ncnn/mat.h	/^    VkImageMemory* data;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::dims	./include/ncnn/mat.h	/^    int dims;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::elembits	./include/ncnn/mat.h	/^    int elembits() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
ncnn::VkImageMat::elembits	./include/ncnn/mat.h	/^NCNN_FORCEINLINE int VkImageMat::elembits() const$/;"	f	class:ncnn::VkImageMat	signature:() const
ncnn::VkImageMat::elempack	./include/ncnn/mat.h	/^    int elempack;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::elemsize	./include/ncnn/mat.h	/^    size_t elemsize;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::empty	./include/ncnn/mat.h	/^    bool empty() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
ncnn::VkImageMat::empty	./include/ncnn/mat.h	/^NCNN_FORCEINLINE bool VkImageMat::empty() const$/;"	f	class:ncnn::VkImageMat	signature:() const
ncnn::VkImageMat::from_android_hardware_buffer	./include/ncnn/mat.h	/^    static VkImageMat from_android_hardware_buffer(VkAndroidHardwareBufferImageAllocator* allocator);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(VkAndroidHardwareBufferImageAllocator* allocator)
ncnn::VkImageMat::h	./include/ncnn/mat.h	/^    int h;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::image	./include/ncnn/mat.h	/^    VkImage image() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
ncnn::VkImageMat::image	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImage VkImageMat::image() const$/;"	f	class:ncnn::VkImageMat	signature:() const
ncnn::VkImageMat::imageview	./include/ncnn/mat.h	/^    VkImageView imageview() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
ncnn::VkImageMat::imageview	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageView VkImageMat::imageview() const$/;"	f	class:ncnn::VkImageMat	signature:() const
ncnn::VkImageMat::mapped	./include/ncnn/mat.h	/^    Mat mapped() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
ncnn::VkImageMat::mapped	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat VkImageMat::mapped() const$/;"	f	class:ncnn::VkImageMat	signature:() const
ncnn::VkImageMat::mapped_ptr	./include/ncnn/mat.h	/^    void* mapped_ptr() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
ncnn::VkImageMat::mapped_ptr	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void* VkImageMat::mapped_ptr() const$/;"	f	class:ncnn::VkImageMat	signature:() const
ncnn::VkImageMat::operator =	./include/ncnn/mat.h	/^    VkImageMat& operator=(const VkImageMat& m);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const VkImageMat& m)
ncnn::VkImageMat::operator =	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat& VkImageMat::operator=(const VkImageMat& m)$/;"	f	class:ncnn::VkImageMat	signature:(const VkImageMat& m)
ncnn::VkImageMat::refcount	./include/ncnn/mat.h	/^    int* refcount;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::release	./include/ncnn/mat.h	/^    void release();$/;"	p	class:ncnn::VkImageMat	access:public	signature:()
ncnn::VkImageMat::release	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void VkImageMat::release()$/;"	f	class:ncnn::VkImageMat	signature:()
ncnn::VkImageMat::shape	./include/ncnn/mat.h	/^    Mat shape() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
ncnn::VkImageMat::shape	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat VkImageMat::shape() const$/;"	f	class:ncnn::VkImageMat	signature:() const
ncnn::VkImageMat::total	./include/ncnn/mat.h	/^    size_t total() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
ncnn::VkImageMat::total	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t VkImageMat::total() const$/;"	f	class:ncnn::VkImageMat	signature:() const
ncnn::VkImageMat::w	./include/ncnn/mat.h	/^    int w;$/;"	m	class:ncnn::VkImageMat	access:public
ncnn::VkImageMat::~VkImageMat	./include/ncnn/mat.h	/^    ~VkImageMat();$/;"	p	class:ncnn::VkImageMat	access:public	signature:()
ncnn::VkImageMat::~VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::~VkImageMat()$/;"	f	class:ncnn::VkImageMat	signature:()
ncnn::VkImageMemory	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkImageMemory$/;"	c	namespace:ncnn
ncnn::VkImageMemory::access_flags	./include/ncnn/allocator.h	/^    mutable VkAccessFlags access_flags;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::bind_capacity	./include/ncnn/allocator.h	/^    size_t bind_capacity;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::bind_offset	./include/ncnn/allocator.h	/^    size_t bind_offset;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::command_refcount	./include/ncnn/allocator.h	/^    mutable int command_refcount;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::depth	./include/ncnn/allocator.h	/^    int depth;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::format	./include/ncnn/allocator.h	/^    VkFormat format;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::height	./include/ncnn/allocator.h	/^    int height;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::image	./include/ncnn/allocator.h	/^    VkImage image;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::image_layout	./include/ncnn/allocator.h	/^    mutable VkImageLayout image_layout;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::imageview	./include/ncnn/allocator.h	/^    VkImageView imageview;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::mapped_ptr	./include/ncnn/allocator.h	/^    void* mapped_ptr;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::memory	./include/ncnn/allocator.h	/^    VkDeviceMemory memory;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::refcount	./include/ncnn/allocator.h	/^    int refcount;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::stage_flags	./include/ncnn/allocator.h	/^    mutable VkPipelineStageFlags stage_flags;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkImageMemory::width	./include/ncnn/allocator.h	/^    int width;$/;"	m	class:ncnn::VkImageMemory	access:public
ncnn::VkMat	./include/ncnn/mat.h	/^class NCNN_EXPORT VkMat$/;"	c	namespace:ncnn
ncnn::VkMat	./include/ncnn/mat.h	/^class VkMat;$/;"	x
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat();$/;"	p	class:ncnn::VkMat	access:public	signature:()
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(const VkMat& m);$/;"	p	class:ncnn::VkMat	access:public	signature:(const VkMat& m)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int c, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int c, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int d, int c, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, VkBufferMemory* data, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int d, int c, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, VkBufferMemory* data, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^    VkMat(int w, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat()$/;"	f	class:ncnn::VkMat	signature:()
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(const VkMat& m)$/;"	f	class:ncnn::VkMat	signature:(const VkMat& m)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _c, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _c, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _c, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _c, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _c, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _c, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _d, int _c, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _d, int _c, VkBufferMemory* _data, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _d, int _c, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _d, int _c, VkBufferMemory* _data, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _d, int _c, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, int _d, int _c, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, int _h, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, int _h, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, size_t _elemsize, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, size_t _elemsize, VkAllocator* _allocator)
ncnn::VkMat::VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::VkMat(int _w, size_t _elemsize, int _elempack, VkAllocator* _allocator)$/;"	f	class:ncnn::VkMat	signature:(int _w, size_t _elemsize, int _elempack, VkAllocator* _allocator)
ncnn::VkMat::addref	./include/ncnn/mat.h	/^    void addref();$/;"	p	class:ncnn::VkMat	access:public	signature:()
ncnn::VkMat::addref	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void VkMat::addref()$/;"	f	class:ncnn::VkMat	signature:()
ncnn::VkMat::allocator	./include/ncnn/mat.h	/^    VkAllocator* allocator;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::buffer	./include/ncnn/mat.h	/^    VkBuffer buffer() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::buffer	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkBuffer VkMat::buffer() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::buffer_capacity	./include/ncnn/mat.h	/^    size_t buffer_capacity() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::buffer_capacity	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t VkMat::buffer_capacity() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::buffer_offset	./include/ncnn/mat.h	/^    size_t buffer_offset() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::buffer_offset	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t VkMat::buffer_offset() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::c	./include/ncnn/mat.h	/^    int c;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::create	./include/ncnn/mat.h	/^    void create(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, int h, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, size_t elemsize, VkAllocator* allocator)
ncnn::VkMat::create	./include/ncnn/mat.h	/^    void create(int w, size_t elemsize, int elempack, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(int w, size_t elemsize, int elempack, VkAllocator* allocator)
ncnn::VkMat::create_like	./include/ncnn/mat.h	/^    void create_like(const Mat& m, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(const Mat& m, VkAllocator* allocator)
ncnn::VkMat::create_like	./include/ncnn/mat.h	/^    void create_like(const VkImageMat& im, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(const VkImageMat& im, VkAllocator* allocator)
ncnn::VkMat::create_like	./include/ncnn/mat.h	/^    void create_like(const VkMat& m, VkAllocator* allocator);$/;"	p	class:ncnn::VkMat	access:public	signature:(const VkMat& m, VkAllocator* allocator)
ncnn::VkMat::cstep	./include/ncnn/mat.h	/^    size_t cstep;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::d	./include/ncnn/mat.h	/^    int d;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::data	./include/ncnn/mat.h	/^    VkBufferMemory* data;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::dims	./include/ncnn/mat.h	/^    int dims;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::elembits	./include/ncnn/mat.h	/^    int elembits() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::elembits	./include/ncnn/mat.h	/^NCNN_FORCEINLINE int VkMat::elembits() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::elempack	./include/ncnn/mat.h	/^    int elempack;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::elemsize	./include/ncnn/mat.h	/^    size_t elemsize;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::empty	./include/ncnn/mat.h	/^    bool empty() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::empty	./include/ncnn/mat.h	/^NCNN_FORCEINLINE bool VkMat::empty() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::h	./include/ncnn/mat.h	/^    int h;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::mapped	./include/ncnn/mat.h	/^    Mat mapped() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::mapped	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat VkMat::mapped() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::mapped_ptr	./include/ncnn/mat.h	/^    void* mapped_ptr() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::mapped_ptr	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void* VkMat::mapped_ptr() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::operator =	./include/ncnn/mat.h	/^    VkMat& operator=(const VkMat& m);$/;"	p	class:ncnn::VkMat	access:public	signature:(const VkMat& m)
ncnn::VkMat::operator =	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat& VkMat::operator=(const VkMat& m)$/;"	f	class:ncnn::VkMat	signature:(const VkMat& m)
ncnn::VkMat::refcount	./include/ncnn/mat.h	/^    int* refcount;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::release	./include/ncnn/mat.h	/^    void release();$/;"	p	class:ncnn::VkMat	access:public	signature:()
ncnn::VkMat::release	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void VkMat::release()$/;"	f	class:ncnn::VkMat	signature:()
ncnn::VkMat::shape	./include/ncnn/mat.h	/^    Mat shape() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::shape	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat VkMat::shape() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::total	./include/ncnn/mat.h	/^    size_t total() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
ncnn::VkMat::total	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t VkMat::total() const$/;"	f	class:ncnn::VkMat	signature:() const
ncnn::VkMat::w	./include/ncnn/mat.h	/^    int w;$/;"	m	class:ncnn::VkMat	access:public
ncnn::VkMat::~VkMat	./include/ncnn/mat.h	/^    ~VkMat();$/;"	p	class:ncnn::VkMat	access:public	signature:()
ncnn::VkMat::~VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::~VkMat()$/;"	f	class:ncnn::VkMat	signature:()
ncnn::VkStagingAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkStagingAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
ncnn::VkStagingAllocator::VkStagingAllocator	./include/ncnn/allocator.h	/^    VkStagingAllocator(const VkStagingAllocator&);$/;"	p	class:ncnn::VkStagingAllocator	access:private	signature:(const VkStagingAllocator&)
ncnn::VkStagingAllocator::VkStagingAllocator	./include/ncnn/allocator.h	/^    explicit VkStagingAllocator(const VulkanDevice* vkdev);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(const VulkanDevice* vkdev)
ncnn::VkStagingAllocator::clear	./include/ncnn/allocator.h	/^    virtual void clear();$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:()
ncnn::VkStagingAllocator::d	./include/ncnn/allocator.h	/^    VkStagingAllocatorPrivate* const d;$/;"	m	class:ncnn::VkStagingAllocator	access:private
ncnn::VkStagingAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(VkBufferMemory* ptr)
ncnn::VkStagingAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(VkImageMemory* ptr)
ncnn::VkStagingAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(size_t size)
ncnn::VkStagingAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
ncnn::VkStagingAllocator::operator =	./include/ncnn/allocator.h	/^    VkStagingAllocator& operator=(const VkStagingAllocator&);$/;"	p	class:ncnn::VkStagingAllocator	access:private	signature:(const VkStagingAllocator&)
ncnn::VkStagingAllocator::set_size_compare_ratio	./include/ncnn/allocator.h	/^    void set_size_compare_ratio(float scr);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(float scr)
ncnn::VkStagingAllocator::~VkStagingAllocator	./include/ncnn/allocator.h	/^    virtual ~VkStagingAllocator();$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:()
ncnn::VkStagingAllocatorPrivate	./include/ncnn/allocator.h	/^class VkStagingAllocatorPrivate;$/;"	x
ncnn::VkTransfer	./include/ncnn/command.h	/^class NCNN_EXPORT VkTransfer$/;"	c	namespace:ncnn
ncnn::VkTransfer::VkTransfer	./include/ncnn/command.h	/^    explicit VkTransfer(const VulkanDevice* vkdev);$/;"	p	class:ncnn::VkTransfer	access:public	signature:(const VulkanDevice* vkdev)
ncnn::VkTransfer::d	./include/ncnn/command.h	/^    VkTransferPrivate* const d;$/;"	m	class:ncnn::VkTransfer	access:private
ncnn::VkTransfer::record_upload	./include/ncnn/command.h	/^    void record_upload(const Mat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkTransfer	access:public	signature:(const Mat& src, VkImageMat& dst, const Option& opt)
ncnn::VkTransfer::record_upload	./include/ncnn/command.h	/^    void record_upload(const Mat& src, VkMat& dst, const Option& opt, bool flatten = true);$/;"	p	class:ncnn::VkTransfer	access:public	signature:(const Mat& src, VkMat& dst, const Option& opt, bool flatten = true)
ncnn::VkTransfer::submit_and_wait	./include/ncnn/command.h	/^    int submit_and_wait();$/;"	p	class:ncnn::VkTransfer	access:public	signature:()
ncnn::VkTransfer::vkdev	./include/ncnn/command.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::VkTransfer	access:protected
ncnn::VkTransfer::~VkTransfer	./include/ncnn/command.h	/^    virtual ~VkTransfer();$/;"	p	class:ncnn::VkTransfer	access:public	signature:()
ncnn::VkTransferPrivate	./include/ncnn/command.h	/^class VkTransferPrivate;$/;"	x
ncnn::VkWeightAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkWeightAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
ncnn::VkWeightAllocator::VkWeightAllocator	./include/ncnn/allocator.h	/^    VkWeightAllocator(const VkWeightAllocator&);$/;"	p	class:ncnn::VkWeightAllocator	access:private	signature:(const VkWeightAllocator&)
ncnn::VkWeightAllocator::VkWeightAllocator	./include/ncnn/allocator.h	/^    explicit VkWeightAllocator(const VulkanDevice* vkdev, size_t preferred_block_size = 8 * 1024 * 1024); \/\/ 8M$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(const VulkanDevice* vkdev, size_t preferred_block_size = 8 * 1024 * 1024)
ncnn::VkWeightAllocator::clear	./include/ncnn/allocator.h	/^    virtual void clear();$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:()
ncnn::VkWeightAllocator::d	./include/ncnn/allocator.h	/^    VkWeightAllocatorPrivate* const d;$/;"	m	class:ncnn::VkWeightAllocator	access:private
ncnn::VkWeightAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(VkBufferMemory* ptr)
ncnn::VkWeightAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(VkImageMemory* ptr)
ncnn::VkWeightAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(size_t size)
ncnn::VkWeightAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
ncnn::VkWeightAllocator::operator =	./include/ncnn/allocator.h	/^    VkWeightAllocator& operator=(const VkWeightAllocator&);$/;"	p	class:ncnn::VkWeightAllocator	access:private	signature:(const VkWeightAllocator&)
ncnn::VkWeightAllocator::~VkWeightAllocator	./include/ncnn/allocator.h	/^    virtual ~VkWeightAllocator();$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:()
ncnn::VkWeightAllocatorPrivate	./include/ncnn/allocator.h	/^class VkWeightAllocatorPrivate;$/;"	x
ncnn::VkWeightStagingAllocator	./include/ncnn/allocator.h	/^class NCNN_EXPORT VkWeightStagingAllocator : public VkAllocator$/;"	c	namespace:ncnn	inherits:VkAllocator
ncnn::VkWeightStagingAllocator::VkWeightStagingAllocator	./include/ncnn/allocator.h	/^    VkWeightStagingAllocator(const VkWeightStagingAllocator&);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:private	signature:(const VkWeightStagingAllocator&)
ncnn::VkWeightStagingAllocator::VkWeightStagingAllocator	./include/ncnn/allocator.h	/^    explicit VkWeightStagingAllocator(const VulkanDevice* vkdev);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(const VulkanDevice* vkdev)
ncnn::VkWeightStagingAllocator::d	./include/ncnn/allocator.h	/^    VkWeightStagingAllocatorPrivate* const d;$/;"	m	class:ncnn::VkWeightStagingAllocator	access:private
ncnn::VkWeightStagingAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkBufferMemory* ptr);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(VkBufferMemory* ptr)
ncnn::VkWeightStagingAllocator::fastFree	./include/ncnn/allocator.h	/^    virtual void fastFree(VkImageMemory* ptr);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(VkImageMemory* ptr)
ncnn::VkWeightStagingAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkBufferMemory* fastMalloc(size_t size);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(size_t size)
ncnn::VkWeightStagingAllocator::fastMalloc	./include/ncnn/allocator.h	/^    virtual VkImageMemory* fastMalloc(int w, int h, int c, size_t elemsize, int elempack);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:(int w, int h, int c, size_t elemsize, int elempack)
ncnn::VkWeightStagingAllocator::operator =	./include/ncnn/allocator.h	/^    VkWeightStagingAllocator& operator=(const VkWeightStagingAllocator&);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:private	signature:(const VkWeightStagingAllocator&)
ncnn::VkWeightStagingAllocator::~VkWeightStagingAllocator	./include/ncnn/allocator.h	/^    virtual ~VkWeightStagingAllocator();$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:()
ncnn::VkWeightStagingAllocatorPrivate	./include/ncnn/allocator.h	/^class VkWeightStagingAllocatorPrivate;$/;"	x
ncnn::VulkanDevice	./include/ncnn/allocator.h	/^class VulkanDevice;$/;"	x
ncnn::VulkanDevice	./include/ncnn/gpu.h	/^class NCNN_EXPORT VulkanDevice$/;"	c	namespace:ncnn
ncnn::VulkanDevice	./include/ncnn/pipelinecache.h	/^class VulkanDevice;$/;"	x
ncnn::VulkanDevice::VulkanDevice	./include/ncnn/gpu.h	/^    VulkanDevice(const VulkanDevice&);$/;"	p	class:ncnn::VulkanDevice	access:private	signature:(const VulkanDevice&)
ncnn::VulkanDevice::VulkanDevice	./include/ncnn/gpu.h	/^    VulkanDevice(int device_index = get_default_gpu_index());$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(int device_index = get_default_gpu_index())
ncnn::VulkanDevice::acquire_blob_allocator	./include/ncnn/gpu.h	/^    VkAllocator* acquire_blob_allocator() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::acquire_queue	./include/ncnn/gpu.h	/^    VkQueue acquire_queue(uint32_t queue_family_index) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t queue_family_index) const
ncnn::VulkanDevice::acquire_staging_allocator	./include/ncnn/gpu.h	/^    VkAllocator* acquire_staging_allocator() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::compile_shader_module	./include/ncnn/gpu.h	/^    VkShaderModule compile_shader_module(const uint32_t* spv_data, size_t spv_data_size) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const uint32_t* spv_data, size_t spv_data_size) const
ncnn::VulkanDevice::compile_shader_module	./include/ncnn/gpu.h	/^    VkShaderModule compile_shader_module(const uint32_t* spv_data, size_t spv_data_size, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const uint32_t* spv_data, size_t spv_data_size, uint32_t local_size_x, uint32_t local_size_y, uint32_t local_size_z) const
ncnn::VulkanDevice::convert_packing	./include/ncnn/gpu.h	/^    void convert_packing(const VkImageMat& src, VkImageMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const VkImageMat& src, VkImageMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const
ncnn::VulkanDevice::convert_packing	./include/ncnn/gpu.h	/^    void convert_packing(const VkImageMat& src, VkMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const VkImageMat& src, VkMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const
ncnn::VulkanDevice::convert_packing	./include/ncnn/gpu.h	/^    void convert_packing(const VkMat& src, VkImageMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const VkMat& src, VkImageMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const
ncnn::VulkanDevice::convert_packing	./include/ncnn/gpu.h	/^    void convert_packing(const VkMat& src, VkMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const VkMat& src, VkMat& dst, int dst_elempack, VkCompute& cmd, const Option& opt) const
ncnn::VulkanDevice::create_descriptor_update_template	./include/ncnn/gpu.h	/^    int create_descriptor_update_template(int binding_count, const int* binding_types, VkDescriptorSetLayout descriptorset_layout, VkPipelineLayout pipeline_layout, VkDescriptorUpdateTemplateKHR* descriptor_update_template) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(int binding_count, const int* binding_types, VkDescriptorSetLayout descriptorset_layout, VkPipelineLayout pipeline_layout, VkDescriptorUpdateTemplateKHR* descriptor_update_template) const
ncnn::VulkanDevice::create_descriptorset_layout	./include/ncnn/gpu.h	/^    int create_descriptorset_layout(int binding_count, const int* binding_types, VkDescriptorSetLayout* descriptorset_layout) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(int binding_count, const int* binding_types, VkDescriptorSetLayout* descriptorset_layout) const
ncnn::VulkanDevice::create_pipeline	./include/ncnn/gpu.h	/^    int create_pipeline(VkShaderModule shader_module, VkPipelineLayout pipeline_layout, const std::vector<vk_specialization_type>& specializations, VkPipeline* pipeline) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(VkShaderModule shader_module, VkPipelineLayout pipeline_layout, const std::vector<vk_specialization_type>& specializations, VkPipeline* pipeline) const
ncnn::VulkanDevice::create_pipeline_layout	./include/ncnn/gpu.h	/^    int create_pipeline_layout(int push_constant_count, VkDescriptorSetLayout descriptorset_layout, VkPipelineLayout* pipeline_layout) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(int push_constant_count, VkDescriptorSetLayout descriptorset_layout, VkPipelineLayout* pipeline_layout) const
ncnn::VulkanDevice::d	./include/ncnn/gpu.h	/^    VulkanDevicePrivate* const d;$/;"	m	class:ncnn::VulkanDevice	access:private
ncnn::VulkanDevice::find_memory_index	./include/ncnn/gpu.h	/^    uint32_t find_memory_index(uint32_t memory_type_bits, VkFlags required, VkFlags preferred, VkFlags preferred_not) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t memory_type_bits, VkFlags required, VkFlags preferred, VkFlags preferred_not) const
ncnn::VulkanDevice::get_dummy_buffer	./include/ncnn/gpu.h	/^    VkMat get_dummy_buffer() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::get_dummy_image	./include/ncnn/gpu.h	/^    VkImageMat get_dummy_image() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::get_dummy_image_readonly	./include/ncnn/gpu.h	/^    VkImageMat get_dummy_image_readonly() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::get_heap_budget	./include/ncnn/gpu.h	/^    uint32_t get_heap_budget() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::get_pipeline_cache	./include/ncnn/gpu.h	/^    const PipelineCache* get_pipeline_cache() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::immutable_texelfetch_sampler	./include/ncnn/gpu.h	/^    const VkSampler* immutable_texelfetch_sampler() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::info	./include/ncnn/gpu.h	/^    const GpuInfo& info;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::init_device_extension	./include/ncnn/gpu.h	/^    int init_device_extension();$/;"	p	class:ncnn::VulkanDevice	access:protected	signature:()
ncnn::VulkanDevice::is_coherent	./include/ncnn/gpu.h	/^    bool is_coherent(uint32_t memory_type_index) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t memory_type_index) const
ncnn::VulkanDevice::is_mappable	./include/ncnn/gpu.h	/^    bool is_mappable(uint32_t memory_type_index) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t memory_type_index) const
ncnn::VulkanDevice::operator =	./include/ncnn/gpu.h	/^    VulkanDevice& operator=(const VulkanDevice&);$/;"	p	class:ncnn::VulkanDevice	access:private	signature:(const VulkanDevice&)
ncnn::VulkanDevice::reclaim_blob_allocator	./include/ncnn/gpu.h	/^    void reclaim_blob_allocator(VkAllocator* allocator) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(VkAllocator* allocator) const
ncnn::VulkanDevice::reclaim_queue	./include/ncnn/gpu.h	/^    void reclaim_queue(uint32_t queue_family_index, VkQueue queue) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t queue_family_index, VkQueue queue) const
ncnn::VulkanDevice::reclaim_staging_allocator	./include/ncnn/gpu.h	/^    void reclaim_staging_allocator(VkAllocator* allocator) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(VkAllocator* allocator) const
ncnn::VulkanDevice::shape_support_image_storage	./include/ncnn/gpu.h	/^    bool shape_support_image_storage(const Mat& shape) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const Mat& shape) const
ncnn::VulkanDevice::vkAcquireNextImageKHR	./include/ncnn/gpu.h	/^    PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkBindBufferMemory2KHR	./include/ncnn/gpu.h	/^    PFN_vkBindBufferMemory2KHR vkBindBufferMemory2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkBindImageMemory2KHR	./include/ncnn/gpu.h	/^    PFN_vkBindImageMemory2KHR vkBindImageMemory2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCmdBeginRenderPass2KHR	./include/ncnn/gpu.h	/^    PFN_vkCmdBeginRenderPass2KHR vkCmdBeginRenderPass2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCmdEndRenderPass2KHR	./include/ncnn/gpu.h	/^    PFN_vkCmdEndRenderPass2KHR vkCmdEndRenderPass2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCmdNextSubpass2KHR	./include/ncnn/gpu.h	/^    PFN_vkCmdNextSubpass2KHR vkCmdNextSubpass2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCmdPushDescriptorSetKHR	./include/ncnn/gpu.h	/^    PFN_vkCmdPushDescriptorSetKHR vkCmdPushDescriptorSetKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCmdPushDescriptorSetWithTemplateKHR	./include/ncnn/gpu.h	/^    PFN_vkCmdPushDescriptorSetWithTemplateKHR vkCmdPushDescriptorSetWithTemplateKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCreateDescriptorUpdateTemplateKHR	./include/ncnn/gpu.h	/^    PFN_vkCreateDescriptorUpdateTemplateKHR vkCreateDescriptorUpdateTemplateKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCreateRenderPass2KHR	./include/ncnn/gpu.h	/^    PFN_vkCreateRenderPass2KHR vkCreateRenderPass2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCreateSamplerYcbcrConversionKHR	./include/ncnn/gpu.h	/^    PFN_vkCreateSamplerYcbcrConversionKHR vkCreateSamplerYcbcrConversionKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkCreateSwapchainKHR	./include/ncnn/gpu.h	/^    PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkDestroyDescriptorUpdateTemplateKHR	./include/ncnn/gpu.h	/^    PFN_vkDestroyDescriptorUpdateTemplateKHR vkDestroyDescriptorUpdateTemplateKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkDestroySamplerYcbcrConversionKHR	./include/ncnn/gpu.h	/^    PFN_vkDestroySamplerYcbcrConversionKHR vkDestroySamplerYcbcrConversionKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkDestroySwapchainKHR	./include/ncnn/gpu.h	/^    PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkGetAndroidHardwareBufferPropertiesANDROID	./include/ncnn/gpu.h	/^    PFN_vkGetAndroidHardwareBufferPropertiesANDROID vkGetAndroidHardwareBufferPropertiesANDROID;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkGetBufferMemoryRequirements2KHR	./include/ncnn/gpu.h	/^    PFN_vkGetBufferMemoryRequirements2KHR vkGetBufferMemoryRequirements2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkGetDescriptorSetLayoutSupportKHR	./include/ncnn/gpu.h	/^    PFN_vkGetDescriptorSetLayoutSupportKHR vkGetDescriptorSetLayoutSupportKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkGetImageMemoryRequirements2KHR	./include/ncnn/gpu.h	/^    PFN_vkGetImageMemoryRequirements2KHR vkGetImageMemoryRequirements2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkGetImageSparseMemoryRequirements2KHR	./include/ncnn/gpu.h	/^    PFN_vkGetImageSparseMemoryRequirements2KHR vkGetImageSparseMemoryRequirements2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkGetMemoryAndroidHardwareBufferANDROID	./include/ncnn/gpu.h	/^    PFN_vkGetMemoryAndroidHardwareBufferANDROID vkGetMemoryAndroidHardwareBufferANDROID;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkGetSwapchainImagesKHR	./include/ncnn/gpu.h	/^    PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkQueuePresentKHR	./include/ncnn/gpu.h	/^    PFN_vkQueuePresentKHR vkQueuePresentKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkTrimCommandPoolKHR	./include/ncnn/gpu.h	/^    PFN_vkTrimCommandPoolKHR vkTrimCommandPoolKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkUpdateDescriptorSetWithTemplateKHR	./include/ncnn/gpu.h	/^    PFN_vkUpdateDescriptorSetWithTemplateKHR vkUpdateDescriptorSetWithTemplateKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
ncnn::VulkanDevice::vkdevice	./include/ncnn/gpu.h	/^    VkDevice vkdevice() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
ncnn::VulkanDevice::~VulkanDevice	./include/ncnn/gpu.h	/^    ~VulkanDevice();$/;"	p	class:ncnn::VulkanDevice	access:public	signature:()
ncnn::VulkanDevicePrivate	./include/ncnn/gpu.h	/^class VulkanDevicePrivate;$/;"	x
ncnn::alignPtr	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE _Tp* alignPtr(_Tp* ptr, int n = (int)sizeof(_Tp))$/;"	f	namespace:ncnn	signature:(_Tp* ptr, int n = (int)sizeof(_Tp))
ncnn::alignSize	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE size_t alignSize(size_t sz, int n)$/;"	f	namespace:ncnn	signature:(size_t sz, int n)
ncnn::benchmark	./include/ncnn/benchmark.h	/^NCNN_EXPORT void benchmark(const Layer* layer, const Mat& bottom_blob, Mat& top_blob, double start, double end);$/;"	p	namespace:ncnn	signature:(const Layer* layer, const Mat& bottom_blob, Mat& top_blob, double start, double end)
ncnn::benchmark	./include/ncnn/benchmark.h	/^NCNN_EXPORT void benchmark(const Layer* layer, double start, double end);$/;"	p	namespace:ncnn	signature:(const Layer* layer, double start, double end)
ncnn::bfloat16_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT NCNN_FORCEINLINE float bfloat16_to_float32(unsigned short value)$/;"	f	namespace:ncnn	signature:(unsigned short value)
ncnn::cast_bfloat16_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_bfloat16_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
ncnn::cast_float16_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_float16_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
ncnn::cast_float32_to_bfloat16	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_float32_to_bfloat16(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
ncnn::cast_float32_to_float16	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_float32_to_float16(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
ncnn::cast_int8_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT void cast_int8_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
ncnn::compile_spirv_module	./include/ncnn/gpu.h	/^NCNN_EXPORT int compile_spirv_module(const char* comp_data, int comp_data_size, const Option& opt, std::vector<uint32_t>& spirv);$/;"	p	namespace:ncnn	signature:(const char* comp_data, int comp_data_size, const Option& opt, std::vector<uint32_t>& spirv)
ncnn::compile_spirv_module	./include/ncnn/gpu.h	/^NCNN_EXPORT int compile_spirv_module(const char* comp_string, const Option& opt, std::vector<uint32_t>& spirv);$/;"	p	namespace:ncnn	signature:(const char* comp_string, const Option& opt, std::vector<uint32_t>& spirv)
ncnn::compile_spirv_module	./include/ncnn/gpu.h	/^NCNN_EXPORT int compile_spirv_module(int shader_type_index, const Option& opt, std::vector<uint32_t>& spirv);$/;"	p	namespace:ncnn	signature:(int shader_type_index, const Option& opt, std::vector<uint32_t>& spirv)
ncnn::convert_packing	./include/ncnn/mat.h	/^NCNN_EXPORT void convert_packing(const Mat& src, Mat& dst, int elempack, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int elempack, const Option& opt = Option())
ncnn::copy_cut_border	./include/ncnn/mat.h	/^NCNN_EXPORT void copy_cut_border(const Mat& src, Mat& dst, int top, int bottom, int left, int right, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int top, int bottom, int left, int right, const Option& opt = Option())
ncnn::copy_cut_border_3d	./include/ncnn/mat.h	/^NCNN_EXPORT void copy_cut_border_3d(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int front, int behind, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int front, int behind, const Option& opt = Option())
ncnn::copy_make_border	./include/ncnn/mat.h	/^NCNN_EXPORT void copy_make_border(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int type, float v, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int type, float v, const Option& opt = Option())
ncnn::copy_make_border_3d	./include/ncnn/mat.h	/^NCNN_EXPORT void copy_make_border_3d(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int front, int behind, int type, float v, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int front, int behind, int type, float v, const Option& opt = Option())
ncnn::cpu_riscv_vlenb	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_riscv_vlenb();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_arm_asimddp	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_arm_asimddp();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_arm_asimdhp	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_arm_asimdhp();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_arm_neon	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_arm_neon();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_arm_vfpv4	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_arm_vfpv4();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_loongson_mmi	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_loongson_mmi();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_mips_msa	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_mips_msa();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_riscv_v	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_riscv_v();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_riscv_zfh	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_riscv_zfh();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_x86_avx	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_x86_avx2	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx2();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_x86_avx512	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx512();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_x86_avx512_vnni	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx512_vnni();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_x86_avx_vnni	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_avx_vnni();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_x86_f16c	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_f16c();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_x86_fma	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_fma();$/;"	p	namespace:ncnn	signature:()
ncnn::cpu_support_x86_xop	./include/ncnn/cpu.h	/^NCNN_EXPORT int cpu_support_x86_xop();$/;"	p	namespace:ncnn	signature:()
ncnn::create_gpu_instance	./include/ncnn/gpu.h	/^NCNN_EXPORT int create_gpu_instance();$/;"	p	namespace:ncnn	signature:()
ncnn::create_layer	./include/ncnn/layer.h	/^NCNN_EXPORT Layer* create_layer(const char* type);$/;"	p	namespace:ncnn	signature:(const char* type)
ncnn::create_layer	./include/ncnn/layer.h	/^NCNN_EXPORT Layer* create_layer(int index);$/;"	p	namespace:ncnn	signature:(int index)
ncnn::custom_layer_registry_entry	./include/ncnn/layer.h	/^struct custom_layer_registry_entry$/;"	s	namespace:ncnn
ncnn::custom_layer_registry_entry::creator	./include/ncnn/layer.h	/^    layer_creator_func creator;$/;"	m	struct:ncnn::custom_layer_registry_entry	access:public
ncnn::custom_layer_registry_entry::destroyer	./include/ncnn/layer.h	/^    layer_destroyer_func destroyer;$/;"	m	struct:ncnn::custom_layer_registry_entry	access:public
ncnn::custom_layer_registry_entry::name	./include/ncnn/layer.h	/^    const char* name;$/;"	m	struct:ncnn::custom_layer_registry_entry	access:public
ncnn::custom_layer_registry_entry::userdata	./include/ncnn/layer.h	/^    void* userdata;$/;"	m	struct:ncnn::custom_layer_registry_entry	access:public
ncnn::dequantize_from_int32	./include/ncnn/mat.h	/^NCNN_EXPORT void dequantize_from_int32(const Mat& src, Mat& dst, const Mat& scale_data, const Mat& bias_data, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Mat& scale_data, const Mat& bias_data, const Option& opt = Option())
ncnn::destroy_gpu_instance	./include/ncnn/gpu.h	/^NCNN_EXPORT void destroy_gpu_instance();$/;"	p	namespace:ncnn	signature:()
ncnn::draw_circle_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c1(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_circle_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c1(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_circle_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c2(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_circle_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c2(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_circle_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c3(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_circle_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c3(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_circle_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c4(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_circle_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_c4(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_circle_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_circle_yuv420sp(unsigned char* yuv420sp, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* yuv420sp, int w, int h, int cx, int cy, int radius, unsigned int color, int thickness)
ncnn::draw_line_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c1(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_line_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c1(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_line_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c2(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_line_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c2(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_line_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c3(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_line_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c3(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_line_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c4(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_line_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_c4(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_line_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_line_yuv420sp(unsigned char* yuv420sp, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* yuv420sp, int w, int h, int x0, int y0, int x1, int y1, unsigned int color, int thickness)
ncnn::draw_rectangle_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c1(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_rectangle_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c1(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_rectangle_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c2(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_rectangle_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c2(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_rectangle_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c3(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_rectangle_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c3(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_rectangle_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c4(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_rectangle_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_c4(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_rectangle_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_rectangle_yuv420sp(unsigned char* yuv420sp, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness);$/;"	p	namespace:ncnn	signature:(unsigned char* yuv420sp, int w, int h, int rx, int ry, int rw, int rh, unsigned int color, int thickness)
ncnn::draw_text_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c1(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::draw_text_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c1(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::draw_text_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c2(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::draw_text_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c2(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::draw_text_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c3(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::draw_text_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c3(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::draw_text_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c4(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::draw_text_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_c4(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* pixels, int w, int h, int stride, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::draw_text_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void draw_text_yuv420sp(unsigned char* yuv420sp, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color);$/;"	p	namespace:ncnn	signature:(unsigned char* yuv420sp, int w, int h, const char* text, int x, int y, int fontpixelsize, unsigned int color)
ncnn::fastFree	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE void fastFree(void* ptr)$/;"	f	namespace:ncnn	signature:(void* ptr)
ncnn::fastMalloc	./include/ncnn/allocator.h	/^static NCNN_FORCEINLINE void* fastMalloc(size_t size)$/;"	f	namespace:ncnn	signature:(size_t size)
ncnn::flatten	./include/ncnn/mat.h	/^NCNN_EXPORT void flatten(const Mat& src, Mat& dst, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Option& opt = Option())
ncnn::float16_to_float32	./include/ncnn/mat.h	/^NCNN_EXPORT float float16_to_float32(unsigned short value);$/;"	p	namespace:ncnn	signature:(unsigned short value)
ncnn::float32_to_bfloat16	./include/ncnn/mat.h	/^NCNN_EXPORT NCNN_FORCEINLINE unsigned short float32_to_bfloat16(float value)$/;"	f	namespace:ncnn	signature:(float value)
ncnn::float32_to_float16	./include/ncnn/mat.h	/^NCNN_EXPORT unsigned short float32_to_float16(float value);$/;"	p	namespace:ncnn	signature:(float value)
ncnn::get_affine_transform	./include/ncnn/mat.h	/^NCNN_EXPORT void get_affine_transform(const float* points_from, const float* points_to, int num_point, float* tm);$/;"	p	namespace:ncnn	signature:(const float* points_from, const float* points_to, int num_point, float* tm)
ncnn::get_big_cpu_count	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_big_cpu_count();$/;"	p	namespace:ncnn	signature:()
ncnn::get_cpu_count	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_cpu_count();$/;"	p	namespace:ncnn	signature:()
ncnn::get_cpu_powersave	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_cpu_powersave();$/;"	p	namespace:ncnn	signature:()
ncnn::get_cpu_thread_affinity_mask	./include/ncnn/cpu.h	/^NCNN_EXPORT const CpuSet& get_cpu_thread_affinity_mask(int powersave);$/;"	p	namespace:ncnn	signature:(int powersave)
ncnn::get_current_time	./include/ncnn/benchmark.h	/^NCNN_EXPORT double get_current_time();$/;"	p	namespace:ncnn	signature:()
ncnn::get_default_gpu_index	./include/ncnn/gpu.h	/^NCNN_EXPORT int get_default_gpu_index();$/;"	p	namespace:ncnn	signature:()
ncnn::get_flush_denormals	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_flush_denormals();$/;"	p	namespace:ncnn	signature:()
ncnn::get_gpu_count	./include/ncnn/gpu.h	/^NCNN_EXPORT int get_gpu_count();$/;"	p	namespace:ncnn	signature:()
ncnn::get_gpu_device	./include/ncnn/gpu.h	/^NCNN_EXPORT VulkanDevice* get_gpu_device(int device_index = get_default_gpu_index());$/;"	p	namespace:ncnn	signature:(int device_index = get_default_gpu_index())
ncnn::get_gpu_info	./include/ncnn/gpu.h	/^NCNN_EXPORT const GpuInfo& get_gpu_info(int device_index = get_default_gpu_index());$/;"	p	namespace:ncnn	signature:(int device_index = get_default_gpu_index())
ncnn::get_kmp_blocktime	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_kmp_blocktime();$/;"	p	namespace:ncnn	signature:()
ncnn::get_little_cpu_count	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_little_cpu_count();$/;"	p	namespace:ncnn	signature:()
ncnn::get_omp_dynamic	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_omp_dynamic();$/;"	p	namespace:ncnn	signature:()
ncnn::get_omp_num_threads	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_omp_num_threads();$/;"	p	namespace:ncnn	signature:()
ncnn::get_omp_thread_num	./include/ncnn/cpu.h	/^NCNN_EXPORT int get_omp_thread_num();$/;"	p	namespace:ncnn	signature:()
ncnn::get_rotation_matrix	./include/ncnn/mat.h	/^NCNN_EXPORT void get_rotation_matrix(float angle, float scale, float dx, float dy, float* tm);$/;"	p	namespace:ncnn	signature:(float angle, float scale, float dx, float dy, float* tm)
ncnn::get_text_drawing_size	./include/ncnn/mat.h	/^NCNN_EXPORT void get_text_drawing_size(const char* text, int fontpixelsize, int* w, int* h);$/;"	p	namespace:ncnn	signature:(const char* text, int fontpixelsize, int* w, int* h)
ncnn::invert_affine_transform	./include/ncnn/mat.h	/^NCNN_EXPORT void invert_affine_transform(const float* tm, float* tm_inv);$/;"	p	namespace:ncnn	signature:(const float* tm, float* tm_inv)
ncnn::kanna_rotate_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type)
ncnn::kanna_rotate_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
ncnn::kanna_rotate_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type)
ncnn::kanna_rotate_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
ncnn::kanna_rotate_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type)
ncnn::kanna_rotate_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
ncnn::kanna_rotate_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type)
ncnn::kanna_rotate_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
ncnn::kanna_rotate_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void kanna_rotate_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type)
ncnn::layer_creator_func	./include/ncnn/layer.h	/^typedef Layer* (*layer_creator_func)(void*);$/;"	t	namespace:ncnn
ncnn::layer_destroyer_func	./include/ncnn/layer.h	/^typedef void (*layer_destroyer_func)(Layer*, void*);$/;"	t	namespace:ncnn
ncnn::layer_registry_entry	./include/ncnn/layer.h	/^struct layer_registry_entry$/;"	s	namespace:ncnn
ncnn::layer_registry_entry::creator	./include/ncnn/layer.h	/^    layer_creator_func creator;$/;"	m	struct:ncnn::layer_registry_entry	access:public
ncnn::layer_registry_entry::name	./include/ncnn/layer.h	/^    const char* name;$/;"	m	struct:ncnn::layer_registry_entry	access:public
ncnn::layer_to_index	./include/ncnn/layer.h	/^NCNN_EXPORT int layer_to_index(const char* type);$/;"	p	namespace:ncnn	signature:(const char* type)
ncnn::quantize_to_int8	./include/ncnn/mat.h	/^NCNN_EXPORT void quantize_to_int8(const Mat& src, Mat& dst, const Mat& scale_data, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Mat& scale_data, const Option& opt = Option())
ncnn::requantize_from_int32_to_int8	./include/ncnn/mat.h	/^NCNN_EXPORT void requantize_from_int32_to_int8(const Mat& src, Mat& dst, const Mat& scale_in_data, const Mat& scale_out_data, const Mat& bias_data, int activation_type, const Mat& activation_params, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Mat& scale_in_data, const Mat& scale_out_data, const Mat& bias_data, int activation_type, const Mat& activation_params, const Option& opt = Option())
ncnn::resize_bicubic	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bicubic(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option())
ncnn::resize_bilinear	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option())
ncnn::resize_bilinear_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride)
ncnn::resize_bilinear_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
ncnn::resize_bilinear_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride)
ncnn::resize_bilinear_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
ncnn::resize_bilinear_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride)
ncnn::resize_bilinear_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
ncnn::resize_bilinear_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride)
ncnn::resize_bilinear_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
ncnn::resize_bilinear_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
ncnn::resize_nearest	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_nearest(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option())
ncnn::resolve_shader_info	./include/ncnn/gpu.h	/^NCNN_EXPORT int resolve_shader_info(const uint32_t* spv_data, size_t spv_data_size, ShaderInfo& shader_info);$/;"	p	namespace:ncnn	signature:(const uint32_t* spv_data, size_t spv_data_size, ShaderInfo& shader_info)
ncnn::set_cpu_powersave	./include/ncnn/cpu.h	/^NCNN_EXPORT int set_cpu_powersave(int powersave);$/;"	p	namespace:ncnn	signature:(int powersave)
ncnn::set_cpu_thread_affinity	./include/ncnn/cpu.h	/^NCNN_EXPORT int set_cpu_thread_affinity(const CpuSet& thread_affinity_mask);$/;"	p	namespace:ncnn	signature:(const CpuSet& thread_affinity_mask)
ncnn::set_flush_denormals	./include/ncnn/cpu.h	/^NCNN_EXPORT int set_flush_denormals(int flush_denormals);$/;"	p	namespace:ncnn	signature:(int flush_denormals)
ncnn::set_kmp_blocktime	./include/ncnn/cpu.h	/^NCNN_EXPORT void set_kmp_blocktime(int time_ms);$/;"	p	namespace:ncnn	signature:(int time_ms)
ncnn::set_omp_dynamic	./include/ncnn/cpu.h	/^NCNN_EXPORT void set_omp_dynamic(int dynamic);$/;"	p	namespace:ncnn	signature:(int dynamic)
ncnn::set_omp_num_threads	./include/ncnn/cpu.h	/^NCNN_EXPORT void set_omp_num_threads(int num_threads);$/;"	p	namespace:ncnn	signature:(int num_threads)
ncnn::start_wrapper	./include/ncnn/platform.h	/^static unsigned __stdcall start_wrapper(void* args);$/;"	p	namespace:ncnn	signature:(void* args)
ncnn::vcvt_bf16_f32	./include/ncnn/mat.h	/^NCNN_EXPORT NCNN_FORCEINLINE uint16x4_t vcvt_bf16_f32(float32x4_t _v)$/;"	f	namespace:ncnn	signature:(float32x4_t _v)
ncnn::vcvt_f32_bf16	./include/ncnn/mat.h	/^NCNN_EXPORT NCNN_FORCEINLINE float32x4_t vcvt_f32_bf16(uint16x4_t _v)$/;"	f	namespace:ncnn	signature:(uint16x4_t _v)
ncnn::vk_constant_type	./include/ncnn/mat.h	/^union vk_constant_type$/;"	u	namespace:ncnn
ncnn::vk_constant_type::f	./include/ncnn/mat.h	/^    float f;$/;"	m	union:ncnn::vk_constant_type	access:public
ncnn::vk_constant_type::i	./include/ncnn/mat.h	/^    int i;$/;"	m	union:ncnn::vk_constant_type	access:public
ncnn::vk_specialization_type	./include/ncnn/mat.h	/^union vk_specialization_type$/;"	u	namespace:ncnn
ncnn::vk_specialization_type::f	./include/ncnn/mat.h	/^    float f;$/;"	m	union:ncnn::vk_specialization_type	access:public
ncnn::vk_specialization_type::i	./include/ncnn/mat.h	/^    int i;$/;"	m	union:ncnn::vk_specialization_type	access:public
ncnn::vk_specialization_type::u32	./include/ncnn/mat.h	/^    uint32_t u32;$/;"	m	union:ncnn::vk_specialization_type	access:public
ncnn::warpaffine_bilinear_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0)
ncnn::warpaffine_bilinear_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
ncnn::warpaffine_bilinear_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0)
ncnn::warpaffine_bilinear_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
ncnn::warpaffine_bilinear_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0)
ncnn::warpaffine_bilinear_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
ncnn::warpaffine_bilinear_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0)
ncnn::warpaffine_bilinear_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
ncnn::warpaffine_bilinear_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
ncnn::yuv420sp2rgb	./include/ncnn/mat.h	/^NCNN_EXPORT void yuv420sp2rgb(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);$/;"	p	namespace:ncnn	signature:(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb)
ncnn::yuv420sp2rgb_half	./include/ncnn/mat.h	/^NCNN_EXPORT void yuv420sp2rgb_half(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);$/;"	p	namespace:ncnn	signature:(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb)
ncnn::yuv420sp2rgb_nv12	./include/ncnn/mat.h	/^NCNN_EXPORT void yuv420sp2rgb_nv12(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);$/;"	p	namespace:ncnn	signature:(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb)
ncnn_allocator_create_pool_allocator	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_allocator_t ncnn_allocator_create_pool_allocator();$/;"	p	signature:()
ncnn_allocator_create_unlocked_pool_allocator	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_allocator_t ncnn_allocator_create_unlocked_pool_allocator();$/;"	p	signature:()
ncnn_allocator_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_allocator_destroy(ncnn_allocator_t allocator);$/;"	p	signature:(ncnn_allocator_t allocator)
ncnn_allocator_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_allocator_t* ncnn_allocator_t;$/;"	t	typeref:struct:__ncnn_allocator_t
ncnn_blob_get_bottom_shape	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_blob_get_bottom_shape(const ncnn_layer_t layer, int i, int* dims, int* w, int* h, int* c);$/;"	p	signature:(const ncnn_layer_t layer, int i, int* dims, int* w, int* h, int* c)
ncnn_blob_get_consumer	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_blob_get_consumer(const ncnn_blob_t blob);$/;"	p	signature:(const ncnn_blob_t blob)
ncnn_blob_get_name	./include/ncnn/c_api.h	/^NCNN_EXPORT const char* ncnn_blob_get_name(const ncnn_blob_t blob);$/;"	p	signature:(const ncnn_blob_t blob)
ncnn_blob_get_producer	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_blob_get_producer(const ncnn_blob_t blob);$/;"	p	signature:(const ncnn_blob_t blob)
ncnn_blob_get_shape	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_blob_get_shape(const ncnn_blob_t blob, int* dims, int* w, int* h, int* c);$/;"	p	signature:(const ncnn_blob_t blob, int* dims, int* w, int* h, int* c)
ncnn_blob_get_top_shape	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_blob_get_top_shape(const ncnn_layer_t layer, int i, int* dims, int* w, int* h, int* c);$/;"	p	signature:(const ncnn_layer_t layer, int i, int* dims, int* w, int* h, int* c)
ncnn_blob_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_blob_t* ncnn_blob_t;$/;"	t	typeref:struct:__ncnn_blob_t
ncnn_convert_packing	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_convert_packing(const ncnn_mat_t src, ncnn_mat_t* dst, int elempack, const ncnn_option_t opt);$/;"	p	signature:(const ncnn_mat_t src, ncnn_mat_t* dst, int elempack, const ncnn_option_t opt)
ncnn_datareader_create	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_datareader_t ncnn_datareader_create();$/;"	p	signature:()
ncnn_datareader_create_from_memory	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_datareader_t ncnn_datareader_create_from_memory(const unsigned char** mem);$/;"	p	signature:(const unsigned char** mem)
ncnn_datareader_create_from_stdio	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_datareader_t ncnn_datareader_create_from_stdio(FILE* fp);$/;"	p	signature:(FILE* fp)
ncnn_datareader_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_datareader_destroy(ncnn_datareader_t dr);$/;"	p	signature:(ncnn_datareader_t dr)
ncnn_datareader_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_datareader_t* ncnn_datareader_t;$/;"	t	typeref:struct:__ncnn_datareader_t
ncnn_extractor_create	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_extractor_t ncnn_extractor_create(ncnn_net_t net);$/;"	p	signature:(ncnn_net_t net)
ncnn_extractor_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_extractor_destroy(ncnn_extractor_t ex);$/;"	p	signature:(ncnn_extractor_t ex)
ncnn_extractor_extract	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_extractor_extract(ncnn_extractor_t ex, const char* name, ncnn_mat_t* mat);$/;"	p	signature:(ncnn_extractor_t ex, const char* name, ncnn_mat_t* mat)
ncnn_extractor_extract_index	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_extractor_extract_index(ncnn_extractor_t ex, int index, ncnn_mat_t* mat);$/;"	p	signature:(ncnn_extractor_t ex, int index, ncnn_mat_t* mat)
ncnn_extractor_input	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_extractor_input(ncnn_extractor_t ex, const char* name, const ncnn_mat_t mat);$/;"	p	signature:(ncnn_extractor_t ex, const char* name, const ncnn_mat_t mat)
ncnn_extractor_input_index	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_extractor_input_index(ncnn_extractor_t ex, int index, const ncnn_mat_t mat);$/;"	p	signature:(ncnn_extractor_t ex, int index, const ncnn_mat_t mat)
ncnn_extractor_set_option	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_extractor_set_option(ncnn_extractor_t ex, const ncnn_option_t opt);$/;"	p	signature:(ncnn_extractor_t ex, const ncnn_option_t opt)
ncnn_extractor_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_extractor_t* ncnn_extractor_t;$/;"	t	typeref:struct:__ncnn_extractor_t
ncnn_flatten	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_flatten(const ncnn_mat_t src, ncnn_mat_t* dst, const ncnn_option_t opt);$/;"	p	signature:(const ncnn_mat_t src, ncnn_mat_t* dst, const ncnn_option_t opt)
ncnn_layer_create	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_layer_t ncnn_layer_create();$/;"	p	signature:()
ncnn_layer_create_by_type	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_layer_t ncnn_layer_create_by_type(const char* type);$/;"	p	signature:(const char* type)
ncnn_layer_create_by_typeindex	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_layer_t ncnn_layer_create_by_typeindex(int typeindex);$/;"	p	signature:(int typeindex)
ncnn_layer_creator_t	./include/ncnn/c_api.h	/^typedef ncnn_layer_t (*ncnn_layer_creator_t)(void* userdata);$/;"	t
ncnn_layer_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_layer_destroy(ncnn_layer_t layer);$/;"	p	signature:(ncnn_layer_t layer)
ncnn_layer_destroyer_t	./include/ncnn/c_api.h	/^typedef void (*ncnn_layer_destroyer_t)(ncnn_layer_t layer, void* userdata);$/;"	t
ncnn_layer_get_bottom	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_bottom(const ncnn_layer_t layer, int i);$/;"	p	signature:(const ncnn_layer_t layer, int i)
ncnn_layer_get_bottom_count	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_bottom_count(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_name	./include/ncnn/c_api.h	/^NCNN_EXPORT const char* ncnn_layer_get_name(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_one_blob_only	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_one_blob_only(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_support_bf16_storage	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_support_bf16_storage(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_support_fp16_storage	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_support_fp16_storage(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_support_image_storage	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_support_image_storage(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_support_inplace	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_support_inplace(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_support_packing	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_support_packing(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_support_vulkan	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_support_vulkan(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_top	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_top(const ncnn_layer_t layer, int i);$/;"	p	signature:(const ncnn_layer_t layer, int i)
ncnn_layer_get_top_count	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_top_count(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_type	./include/ncnn/c_api.h	/^NCNN_EXPORT const char* ncnn_layer_get_type(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_get_typeindex	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_layer_get_typeindex(const ncnn_layer_t layer);$/;"	p	signature:(const ncnn_layer_t layer)
ncnn_layer_set_one_blob_only	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_layer_set_one_blob_only(ncnn_layer_t layer, int enable);$/;"	p	signature:(ncnn_layer_t layer, int enable)
ncnn_layer_set_support_bf16_storage	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_layer_set_support_bf16_storage(ncnn_layer_t layer, int enable);$/;"	p	signature:(ncnn_layer_t layer, int enable)
ncnn_layer_set_support_fp16_storage	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_layer_set_support_fp16_storage(ncnn_layer_t layer, int enable);$/;"	p	signature:(ncnn_layer_t layer, int enable)
ncnn_layer_set_support_image_storage	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_layer_set_support_image_storage(ncnn_layer_t layer, int enable);$/;"	p	signature:(ncnn_layer_t layer, int enable)
ncnn_layer_set_support_inplace	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_layer_set_support_inplace(ncnn_layer_t layer, int enable);$/;"	p	signature:(ncnn_layer_t layer, int enable)
ncnn_layer_set_support_packing	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_layer_set_support_packing(ncnn_layer_t layer, int enable);$/;"	p	signature:(ncnn_layer_t layer, int enable)
ncnn_layer_set_support_vulkan	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_layer_set_support_vulkan(ncnn_layer_t layer, int enable);$/;"	p	signature:(ncnn_layer_t layer, int enable)
ncnn_layer_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_layer_t* ncnn_layer_t;$/;"	t	typeref:struct:__ncnn_layer_t
ncnn_mat_clone	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_clone(const ncnn_mat_t mat, ncnn_allocator_t allocator);$/;"	p	signature:(const ncnn_mat_t mat, ncnn_allocator_t allocator)
ncnn_mat_create	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create();$/;"	p	signature:()
ncnn_mat_create_1d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_1d(int w, ncnn_allocator_t allocator);$/;"	p	signature:(int w, ncnn_allocator_t allocator)
ncnn_mat_create_1d_elem	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_1d_elem(int w, size_t elemsize, int elempack, ncnn_allocator_t allocator);$/;"	p	signature:(int w, size_t elemsize, int elempack, ncnn_allocator_t allocator)
ncnn_mat_create_2d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_2d(int w, int h, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, ncnn_allocator_t allocator)
ncnn_mat_create_2d_elem	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_2d_elem(int w, int h, size_t elemsize, int elempack, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, size_t elemsize, int elempack, ncnn_allocator_t allocator)
ncnn_mat_create_3d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_3d(int w, int h, int c, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, int c, ncnn_allocator_t allocator)
ncnn_mat_create_3d_elem	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_3d_elem(int w, int h, int c, size_t elemsize, int elempack, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, int c, size_t elemsize, int elempack, ncnn_allocator_t allocator)
ncnn_mat_create_4d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_4d(int w, int h, int d, int c, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, int d, int c, ncnn_allocator_t allocator)
ncnn_mat_create_4d_elem	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_4d_elem(int w, int h, int d, int c, size_t elemsize, int elempack, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, int d, int c, size_t elemsize, int elempack, ncnn_allocator_t allocator)
ncnn_mat_create_external_1d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_1d(int w, void* data, ncnn_allocator_t allocator);$/;"	p	signature:(int w, void* data, ncnn_allocator_t allocator)
ncnn_mat_create_external_1d_elem	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_1d_elem(int w, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator);$/;"	p	signature:(int w, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator)
ncnn_mat_create_external_2d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_2d(int w, int h, void* data, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, void* data, ncnn_allocator_t allocator)
ncnn_mat_create_external_2d_elem	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_2d_elem(int w, int h, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator)
ncnn_mat_create_external_3d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_3d(int w, int h, int c, void* data, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, int c, void* data, ncnn_allocator_t allocator)
ncnn_mat_create_external_3d_elem	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_3d_elem(int w, int h, int c, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, int c, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator)
ncnn_mat_create_external_4d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_4d(int w, int h, int d, int c, void* data, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, int d, int c, void* data, ncnn_allocator_t allocator)
ncnn_mat_create_external_4d_elem	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_4d_elem(int w, int h, int d, int c, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator);$/;"	p	signature:(int w, int h, int d, int c, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator)
ncnn_mat_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_mat_destroy(ncnn_mat_t mat);$/;"	p	signature:(ncnn_mat_t mat)
ncnn_mat_fill_float	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_mat_fill_float(ncnn_mat_t mat, float v);$/;"	p	signature:(ncnn_mat_t mat, float v)
ncnn_mat_from_pixels	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_from_pixels(const unsigned char* pixels, int type, int w, int h, int stride, ncnn_allocator_t allocator);$/;"	p	signature:(const unsigned char* pixels, int type, int w, int h, int stride, ncnn_allocator_t allocator)
ncnn_mat_from_pixels_resize	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_from_pixels_resize(const unsigned char* pixels, int type, int w, int h, int stride, int target_width, int target_height, ncnn_allocator_t allocator);$/;"	p	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int target_width, int target_height, ncnn_allocator_t allocator)
ncnn_mat_from_pixels_roi	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_from_pixels_roi(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, ncnn_allocator_t allocator);$/;"	p	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, ncnn_allocator_t allocator)
ncnn_mat_from_pixels_roi_resize	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_from_pixels_roi_resize(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, int target_width, int target_height, ncnn_allocator_t allocator);$/;"	p	signature:(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, int target_width, int target_height, ncnn_allocator_t allocator)
ncnn_mat_get_c	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_mat_get_c(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_get_channel_data	./include/ncnn/c_api.h	/^NCNN_EXPORT void* ncnn_mat_get_channel_data(const ncnn_mat_t mat, int c);$/;"	p	signature:(const ncnn_mat_t mat, int c)
ncnn_mat_get_cstep	./include/ncnn/c_api.h	/^NCNN_EXPORT size_t ncnn_mat_get_cstep(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_get_d	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_mat_get_d(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_get_data	./include/ncnn/c_api.h	/^NCNN_EXPORT void* ncnn_mat_get_data(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_get_dims	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_mat_get_dims(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_get_elempack	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_mat_get_elempack(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_get_elemsize	./include/ncnn/c_api.h	/^NCNN_EXPORT size_t ncnn_mat_get_elemsize(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_get_h	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_mat_get_h(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_get_w	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_mat_get_w(const ncnn_mat_t mat);$/;"	p	signature:(const ncnn_mat_t mat)
ncnn_mat_reshape_1d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_reshape_1d(const ncnn_mat_t mat, int w, ncnn_allocator_t allocator);$/;"	p	signature:(const ncnn_mat_t mat, int w, ncnn_allocator_t allocator)
ncnn_mat_reshape_2d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_reshape_2d(const ncnn_mat_t mat, int w, int h, ncnn_allocator_t allocator);$/;"	p	signature:(const ncnn_mat_t mat, int w, int h, ncnn_allocator_t allocator)
ncnn_mat_reshape_3d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_reshape_3d(const ncnn_mat_t mat, int w, int h, int c, ncnn_allocator_t allocator);$/;"	p	signature:(const ncnn_mat_t mat, int w, int h, int c, ncnn_allocator_t allocator)
ncnn_mat_reshape_4d	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_mat_reshape_4d(const ncnn_mat_t mat, int w, int h, int d, int c, ncnn_allocator_t allocator);$/;"	p	signature:(const ncnn_mat_t mat, int w, int h, int d, int c, ncnn_allocator_t allocator)
ncnn_mat_substract_mean_normalize	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_mat_substract_mean_normalize(ncnn_mat_t mat, const float* mean_vals, const float* norm_vals);$/;"	p	signature:(ncnn_mat_t mat, const float* mean_vals, const float* norm_vals)
ncnn_mat_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_mat_t* ncnn_mat_t;$/;"	t	typeref:struct:__ncnn_mat_t
ncnn_mat_to_pixels	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_mat_to_pixels(const ncnn_mat_t mat, unsigned char* pixels, int type, int stride);$/;"	p	signature:(const ncnn_mat_t mat, unsigned char* pixels, int type, int stride)
ncnn_mat_to_pixels_resize	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_mat_to_pixels_resize(const ncnn_mat_t mat, unsigned char* pixels, int type, int target_width, int target_height, int target_stride);$/;"	p	signature:(const ncnn_mat_t mat, unsigned char* pixels, int type, int target_width, int target_height, int target_stride)
ncnn_modelbin_create_from_datareader	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_modelbin_t ncnn_modelbin_create_from_datareader(const ncnn_datareader_t dr);$/;"	p	signature:(const ncnn_datareader_t dr)
ncnn_modelbin_create_from_mat_array	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_modelbin_t ncnn_modelbin_create_from_mat_array(const ncnn_mat_t* weights, int n);$/;"	p	signature:(const ncnn_mat_t* weights, int n)
ncnn_modelbin_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_modelbin_destroy(ncnn_modelbin_t mb);$/;"	p	signature:(ncnn_modelbin_t mb)
ncnn_modelbin_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_modelbin_t* ncnn_modelbin_t;$/;"	t	typeref:struct:__ncnn_modelbin_t
ncnn_net_clear	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_net_clear(ncnn_net_t net);$/;"	p	signature:(ncnn_net_t net)
ncnn_net_create	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_net_t ncnn_net_create();$/;"	p	signature:()
ncnn_net_custom_layer_factory_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_net_custom_layer_factory_t* ncnn_net_custom_layer_factory_t;$/;"	t	typeref:struct:__ncnn_net_custom_layer_factory_t
ncnn_net_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_net_destroy(ncnn_net_t net);$/;"	p	signature:(ncnn_net_t net)
ncnn_net_load_model	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_model(ncnn_net_t net, const char* path);$/;"	p	signature:(ncnn_net_t net, const char* path)
ncnn_net_load_model_datareader	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_model_datareader(ncnn_net_t net, const ncnn_datareader_t dr);$/;"	p	signature:(ncnn_net_t net, const ncnn_datareader_t dr)
ncnn_net_load_model_memory	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_model_memory(ncnn_net_t net, const unsigned char* mem);$/;"	p	signature:(ncnn_net_t net, const unsigned char* mem)
ncnn_net_load_param	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_param(ncnn_net_t net, const char* path);$/;"	p	signature:(ncnn_net_t net, const char* path)
ncnn_net_load_param_bin	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_param_bin(ncnn_net_t net, const char* path);$/;"	p	signature:(ncnn_net_t net, const char* path)
ncnn_net_load_param_bin_datareader	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_param_bin_datareader(ncnn_net_t net, const ncnn_datareader_t dr);$/;"	p	signature:(ncnn_net_t net, const ncnn_datareader_t dr)
ncnn_net_load_param_bin_memory	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_param_bin_memory(ncnn_net_t net, const unsigned char* mem);$/;"	p	signature:(ncnn_net_t net, const unsigned char* mem)
ncnn_net_load_param_datareader	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_param_datareader(ncnn_net_t net, const ncnn_datareader_t dr);$/;"	p	signature:(ncnn_net_t net, const ncnn_datareader_t dr)
ncnn_net_load_param_memory	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_net_load_param_memory(ncnn_net_t net, const char* mem);$/;"	p	signature:(ncnn_net_t net, const char* mem)
ncnn_net_register_custom_layer_by_type	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_net_register_custom_layer_by_type(ncnn_net_t net, const char* type, ncnn_layer_creator_t creator, ncnn_layer_destroyer_t destroyer, void* userdata);$/;"	p	signature:(ncnn_net_t net, const char* type, ncnn_layer_creator_t creator, ncnn_layer_destroyer_t destroyer, void* userdata)
ncnn_net_register_custom_layer_by_typeindex	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_net_register_custom_layer_by_typeindex(ncnn_net_t net, int typeindex, ncnn_layer_creator_t creator, ncnn_layer_destroyer_t destroyer, void* userdata);$/;"	p	signature:(ncnn_net_t net, int typeindex, ncnn_layer_creator_t creator, ncnn_layer_destroyer_t destroyer, void* userdata)
ncnn_net_set_option	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_net_set_option(ncnn_net_t net, ncnn_option_t opt);$/;"	p	signature:(ncnn_net_t net, ncnn_option_t opt)
ncnn_net_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_net_t* ncnn_net_t;$/;"	t	typeref:struct:__ncnn_net_t
ncnn_option_create	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_option_t ncnn_option_create();$/;"	p	signature:()
ncnn_option_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_option_destroy(ncnn_option_t opt);$/;"	p	signature:(ncnn_option_t opt)
ncnn_option_get_num_threads	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_option_get_num_threads(const ncnn_option_t opt);$/;"	p	signature:(const ncnn_option_t opt)
ncnn_option_get_use_vulkan_compute	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_option_get_use_vulkan_compute(const ncnn_option_t opt);$/;"	p	signature:(const ncnn_option_t opt)
ncnn_option_set_num_threads	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_option_set_num_threads(ncnn_option_t opt, int num_threads);$/;"	p	signature:(ncnn_option_t opt, int num_threads)
ncnn_option_set_use_vulkan_compute	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_option_set_use_vulkan_compute(ncnn_option_t opt, int use_vulkan_compute);$/;"	p	signature:(ncnn_option_t opt, int use_vulkan_compute)
ncnn_option_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_option_t* ncnn_option_t;$/;"	t	typeref:struct:__ncnn_option_t
ncnn_paramdict_create	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_paramdict_t ncnn_paramdict_create();$/;"	p	signature:()
ncnn_paramdict_destroy	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_paramdict_destroy(ncnn_paramdict_t pd);$/;"	p	signature:(ncnn_paramdict_t pd)
ncnn_paramdict_get_array	./include/ncnn/c_api.h	/^NCNN_EXPORT ncnn_mat_t ncnn_paramdict_get_array(const ncnn_paramdict_t pd, int id, const ncnn_mat_t def);$/;"	p	signature:(const ncnn_paramdict_t pd, int id, const ncnn_mat_t def)
ncnn_paramdict_get_float	./include/ncnn/c_api.h	/^NCNN_EXPORT float ncnn_paramdict_get_float(const ncnn_paramdict_t pd, int id, float def);$/;"	p	signature:(const ncnn_paramdict_t pd, int id, float def)
ncnn_paramdict_get_int	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_paramdict_get_int(const ncnn_paramdict_t pd, int id, int def);$/;"	p	signature:(const ncnn_paramdict_t pd, int id, int def)
ncnn_paramdict_get_type	./include/ncnn/c_api.h	/^NCNN_EXPORT int ncnn_paramdict_get_type(const ncnn_paramdict_t pd, int id);$/;"	p	signature:(const ncnn_paramdict_t pd, int id)
ncnn_paramdict_set_array	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_paramdict_set_array(ncnn_paramdict_t pd, int id, const ncnn_mat_t v);$/;"	p	signature:(ncnn_paramdict_t pd, int id, const ncnn_mat_t v)
ncnn_paramdict_set_float	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_paramdict_set_float(ncnn_paramdict_t pd, int id, float f);$/;"	p	signature:(ncnn_paramdict_t pd, int id, float f)
ncnn_paramdict_set_int	./include/ncnn/c_api.h	/^NCNN_EXPORT void ncnn_paramdict_set_int(ncnn_paramdict_t pd, int id, int i);$/;"	p	signature:(ncnn_paramdict_t pd, int id, int i)
ncnn_paramdict_t	./include/ncnn/c_api.h	/^typedef struct __ncnn_paramdict_t* ncnn_paramdict_t;$/;"	t	typeref:struct:__ncnn_paramdict_t
ncnn_version	./include/ncnn/c_api.h	/^NCNN_EXPORT const char* ncnn_version();$/;"	p	signature:()
need_resize	./include/ncnn/pipeline.h	/^    bool need_resize;$/;"	m	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public
new_pipeline	./include/ncnn/pipelinecache.h	/^    int new_pipeline(VkShaderModule shader_module, const ShaderInfo& shader_info, const std::vector<vk_specialization_type>& specializations,$/;"	p	class:ncnn::PipelineCache	access:protected	signature:(VkShaderModule shader_module, const ShaderInfo& shader_info, const std::vector<vk_specialization_type>& specializations, VkDescriptorSetLayout* descriptorset_layout, VkPipelineLayout* pipeline_layout, VkPipeline* pipeline, VkDescriptorUpdateTemplateKHR* descriptor_update_template) const
next	./include/ncnn/c_api.h	/^    ncnn_net_custom_layer_factory_t next;$/;"	m	struct:__ncnn_net_custom_layer_factory_t	access:public
next_	./include/ncnn/simplestl.h	/^    node* next_;$/;"	m	struct:std::node	access:public
nmsThreshold	./src/FastestDet.cpp	/^    float nmsThreshold;$/;"	m	class:FastestDet	file:	access:private
nms_sorted_bboxes	./src/FastestDet.cpp	/^    void nms_sorted_bboxes(const std::vector<Object>& faceobjects, std::vector<int>& picked, float nms_threshold);$/;"	p	class:FastestDet	file:	access:private	signature:(const std::vector<Object>& faceobjects, std::vector<int>& picked, float nms_threshold)
nms_sorted_bboxes	./src/FastestDet.cpp	/^void FastestDet::nms_sorted_bboxes(const std::vector<Object>& faceobjects, std::vector<int>& picked, float nms_threshold)$/;"	f	class:FastestDet	signature:(const std::vector<Object>& faceobjects, std::vector<int>& picked, float nms_threshold)
node	./include/ncnn/simplestl.h	/^    node()$/;"	f	struct:std::node	access:public	signature:()
node	./include/ncnn/simplestl.h	/^    node(const T& t)$/;"	f	struct:std::node	access:public	signature:(const T& t)
node	./include/ncnn/simplestl.h	/^struct node$/;"	s	namespace:std
non_coherent_atom_size	./include/ncnn/gpu.h	/^    size_t non_coherent_atom_size() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
num_class	./src/FastestDet.cpp	/^    int num_class;$/;"	m	class:FastestDet	file:	access:private
num_enabled	./include/ncnn/cpu.h	/^    int num_enabled() const;$/;"	p	class:ncnn::CpuSet	access:public	signature:() const
num_threads	./include/ncnn/option.h	/^    int num_threads;$/;"	m	class:ncnn::Option	access:public
offset	./include/ncnn/allocator.h	/^    size_t offset;$/;"	m	class:ncnn::VkBufferMemory	access:public
omp_get_dynamic	./include/ncnn/simpleomp.h	/^NCNN_EXPORT int omp_get_dynamic();$/;"	p	signature:()
omp_get_max_threads	./include/ncnn/simpleomp.h	/^NCNN_EXPORT int omp_get_max_threads();$/;"	p	signature:()
omp_get_num_threads	./include/ncnn/simpleomp.h	/^NCNN_EXPORT int omp_get_num_threads();$/;"	p	signature:()
omp_get_thread_num	./include/ncnn/simpleomp.h	/^NCNN_EXPORT int omp_get_thread_num();$/;"	p	signature:()
omp_set_dynamic	./include/ncnn/simpleomp.h	/^NCNN_EXPORT void omp_set_dynamic(int dynamic);$/;"	p	signature:(int dynamic)
omp_set_num_threads	./include/ncnn/simpleomp.h	/^NCNN_EXPORT void omp_set_num_threads(int num_threads);$/;"	p	signature:(int num_threads)
ompver_str	./build/CMakeFiles/FindOpenMP/OpenMPCheckVersion.c	/^const char ompver_str[] = { 'I', 'N', 'F', 'O', ':', 'O', 'p', 'e', 'n', 'M',$/;"	v
ompver_str	./build/CMakeFiles/FindOpenMP/OpenMPCheckVersion.cpp	/^const char ompver_str[] = { 'I', 'N', 'F', 'O', ':', 'O', 'p', 'e', 'n', 'M',$/;"	v
one_blob_only	./include/ncnn/layer.h	/^    bool one_blob_only;$/;"	m	class:ncnn::Layer	access:public
openmp_blocktime	./include/ncnn/option.h	/^    int openmp_blocktime;$/;"	m	class:ncnn::Option	access:public
operator !=	./include/ncnn/simplestl.h	/^    bool operator!=(const char* str2) const$/;"	f	struct:std::string	access:public	signature:(const char* str2) const
operator !=	./include/ncnn/simplestl.h	/^    bool operator!=(const iter_list& i)$/;"	f	struct:std::iter_list	access:public	signature:(const iter_list& i)
operator !=	./include/ncnn/simplestl.h	/^bool operator!=(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
operator &	./include/ncnn/simpleocv.h	/^static inline Rect_<_Tp> operator&(const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv	signature:(const Rect_<_Tp>& a, const Rect_<_Tp>& b)
operator &=	./include/ncnn/simpleocv.h	/^static inline Rect_<_Tp>& operator&=(Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv	signature:(Rect_<_Tp>& a, const Rect_<_Tp>& b)
operator ()	./include/ncnn/simpleocv.h	/^    Mat operator()(const Rect& roi) const$/;"	f	struct:cv::Mat	access:public	signature:(const Rect& roi) const
operator ()	./include/ncnn/simplestl.h	/^    bool operator()(const T& x, const T& y) const$/;"	f	struct:std::greater	access:public	signature:(const T& x, const T& y) const
operator ()	./include/ncnn/simplestl.h	/^    bool operator()(const T& x, const T& y) const$/;"	f	struct:std::less	access:public	signature:(const T& x, const T& y) const
operator *	./include/ncnn/simplestl.h	/^    T& operator*()$/;"	f	struct:std::iter_list	access:public	signature:()
operator +	./include/ncnn/simplestl.h	/^inline string operator+(const string& str1, const string& str2)$/;"	f	namespace:std	signature:(const string& str1, const string& str2)
operator ++	./include/ncnn/simplestl.h	/^    iter_list& operator++()$/;"	f	struct:std::iter_list	access:public	signature:()
operator +=	./include/ncnn/simplestl.h	/^    string& operator+=(const string& str1)$/;"	f	struct:std::string	access:public	signature:(const string& str1)
operator --	./include/ncnn/simplestl.h	/^    iter_list& operator--()$/;"	f	struct:std::iter_list	access:public	signature:()
operator ->	./include/ncnn/simplestl.h	/^    T* operator->()$/;"	f	struct:std::iter_list	access:public	signature:()
operator <	./include/ncnn/simplestl.h	/^bool operator<(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
operator <=	./include/ncnn/simplestl.h	/^bool operator<=(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
operator =	./include/ncnn/allocator.h	/^    PoolAllocator& operator=(const PoolAllocator&);$/;"	p	class:ncnn::PoolAllocator	access:private	signature:(const PoolAllocator&)
operator =	./include/ncnn/allocator.h	/^    UnlockedPoolAllocator& operator=(const UnlockedPoolAllocator&);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:private	signature:(const UnlockedPoolAllocator&)
operator =	./include/ncnn/allocator.h	/^    VkAndroidHardwareBufferImageAllocator& operator=(const VkAndroidHardwareBufferImageAllocator&);$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:private	signature:(const VkAndroidHardwareBufferImageAllocator&)
operator =	./include/ncnn/allocator.h	/^    VkBlobAllocator& operator=(const VkBlobAllocator&);$/;"	p	class:ncnn::VkBlobAllocator	access:private	signature:(const VkBlobAllocator&)
operator =	./include/ncnn/allocator.h	/^    VkStagingAllocator& operator=(const VkStagingAllocator&);$/;"	p	class:ncnn::VkStagingAllocator	access:private	signature:(const VkStagingAllocator&)
operator =	./include/ncnn/allocator.h	/^    VkWeightAllocator& operator=(const VkWeightAllocator&);$/;"	p	class:ncnn::VkWeightAllocator	access:private	signature:(const VkWeightAllocator&)
operator =	./include/ncnn/allocator.h	/^    VkWeightStagingAllocator& operator=(const VkWeightStagingAllocator&);$/;"	p	class:ncnn::VkWeightStagingAllocator	access:private	signature:(const VkWeightStagingAllocator&)
operator =	./include/ncnn/datareader.h	/^    DataReaderFromAndroidAsset& operator=(const DataReaderFromAndroidAsset&);$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:private	signature:(const DataReaderFromAndroidAsset&)
operator =	./include/ncnn/datareader.h	/^    DataReaderFromMemory& operator=(const DataReaderFromMemory&);$/;"	p	class:ncnn::DataReaderFromMemory	access:private	signature:(const DataReaderFromMemory&)
operator =	./include/ncnn/datareader.h	/^    DataReaderFromStdio& operator=(const DataReaderFromStdio&);$/;"	p	class:ncnn::DataReaderFromStdio	access:private	signature:(const DataReaderFromStdio&)
operator =	./include/ncnn/gpu.h	/^    GpuInfo& operator=(const GpuInfo&);$/;"	p	class:ncnn::GpuInfo	access:private	signature:(const GpuInfo&)
operator =	./include/ncnn/gpu.h	/^    VulkanDevice& operator=(const VulkanDevice&);$/;"	p	class:ncnn::VulkanDevice	access:private	signature:(const VulkanDevice&)
operator =	./include/ncnn/mat.h	/^    Mat& operator=(const Mat& m);$/;"	p	class:ncnn::Mat	access:public	signature:(const Mat& m)
operator =	./include/ncnn/mat.h	/^    VkImageMat& operator=(const VkImageMat& m);$/;"	p	class:ncnn::VkImageMat	access:public	signature:(const VkImageMat& m)
operator =	./include/ncnn/mat.h	/^    VkMat& operator=(const VkMat& m);$/;"	p	class:ncnn::VkMat	access:public	signature:(const VkMat& m)
operator =	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat& Mat::operator=(const Mat& m)$/;"	f	class:ncnn::Mat	signature:(const Mat& m)
operator =	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat& VkImageMat::operator=(const VkImageMat& m)$/;"	f	class:ncnn::VkImageMat	signature:(const VkImageMat& m)
operator =	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat& VkMat::operator=(const VkMat& m)$/;"	f	class:ncnn::VkMat	signature:(const VkMat& m)
operator =	./include/ncnn/modelbin.h	/^    ModelBinFromDataReader& operator=(const ModelBinFromDataReader&);$/;"	p	class:ncnn::ModelBinFromDataReader	access:private	signature:(const ModelBinFromDataReader&)
operator =	./include/ncnn/modelbin.h	/^    ModelBinFromMatArray& operator=(const ModelBinFromMatArray&);$/;"	p	class:ncnn::ModelBinFromMatArray	access:private	signature:(const ModelBinFromMatArray&)
operator =	./include/ncnn/net.h	/^    Extractor& operator=(const Extractor&);$/;"	p	class:ncnn::Extractor	access:public	signature:(const Extractor&)
operator =	./include/ncnn/net.h	/^    Net& operator=(const Net&);$/;"	p	class:ncnn::Net	access:private	signature:(const Net&)
operator =	./include/ncnn/paramdict.h	/^    ParamDict& operator=(const ParamDict&);$/;"	p	class:ncnn::ParamDict	access:public	signature:(const ParamDict&)
operator =	./include/ncnn/pipeline.h	/^    Pipeline& operator=(const Pipeline&);$/;"	p	class:ncnn::Pipeline	access:private	signature:(const Pipeline&)
operator =	./include/ncnn/pipelinecache.h	/^    PipelineCache& operator=(const PipelineCache&);$/;"	p	class:ncnn::PipelineCache	access:private	signature:(const PipelineCache&)
operator =	./include/ncnn/simpleocv.h	/^    Mat& operator=(const Mat& m)$/;"	f	struct:cv::Mat	access:public	signature:(const Mat& m)
operator =	./include/ncnn/simpleocv.h	/^    Mat& operator=(const Scalar& s)$/;"	f	struct:cv::Mat	access:public	signature:(const Scalar& s)
operator =	./include/ncnn/simplestl.h	/^    iter_list& operator=(const iter_list& i)$/;"	f	struct:std::iter_list	access:public	signature:(const iter_list& i)
operator =	./include/ncnn/simplestl.h	/^    list& operator=(const list& l)$/;"	f	struct:std::list	access:public	signature:(const list& l)
operator =	./include/ncnn/simplestl.h	/^    vector& operator=(const vector& v)$/;"	f	struct:std::vector	access:public	signature:(const vector& v)
operator ==	./include/ncnn/simplestl.h	/^    bool operator==(const char* str2) const$/;"	f	struct:std::string	access:public	signature:(const char* str2) const
operator ==	./include/ncnn/simplestl.h	/^    bool operator==(const iter_list& i)$/;"	f	struct:std::iter_list	access:public	signature:(const iter_list& i)
operator ==	./include/ncnn/simplestl.h	/^    bool operator==(const string& str2) const$/;"	f	struct:std::string	access:public	signature:(const string& str2) const
operator ==	./include/ncnn/simplestl.h	/^bool operator==(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
operator >	./include/ncnn/simplestl.h	/^bool operator>(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
operator >=	./include/ncnn/simplestl.h	/^bool operator>=(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
operator Point_<_Tp2>	./include/ncnn/simpleocv.h	/^    operator Point_<_Tp2>() const$/;"	f	struct:cv::Point_	access:public	signature:() const
operator Rect_<_Tp2>	./include/ncnn/simpleocv.h	/^    operator Rect_<_Tp2>() const$/;"	f	struct:cv::Rect_	access:public	signature:() const
operator Size_<_Tp2>	./include/ncnn/simpleocv.h	/^    operator Size_<_Tp2>() const$/;"	f	struct:cv::Size_	access:public	signature:() const
operator T*	./include/ncnn/mat.h	/^    operator T*();$/;"	p	class:ncnn::Mat	access:public	signature:()
operator T*	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::operator T*()$/;"	f	class:ncnn::Mat	signature:()
operator []	./include/ncnn/mat.h	/^    const float& operator[](size_t i) const;$/;"	p	class:ncnn::Mat	access:public	signature:(size_t i) const
operator []	./include/ncnn/mat.h	/^    float& operator[](size_t i);$/;"	p	class:ncnn::Mat	access:public	signature:(size_t i)
operator []	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const float& Mat::operator[](size_t i) const$/;"	f	class:ncnn::Mat	signature:(size_t i) const
operator []	./include/ncnn/mat.h	/^NCNN_FORCEINLINE float& Mat::operator[](size_t i)$/;"	f	class:ncnn::Mat	signature:(size_t i)
operator []	./include/ncnn/simpleocv.h	/^    _Tp operator[](const int i)$/;"	f	struct:cv::Scalar_	access:public	signature:(const int i)
operator []	./include/ncnn/simpleocv.h	/^    const _Tp operator[](const int i) const$/;"	f	struct:cv::Scalar_	access:public	signature:(const int i) const
operator []	./include/ncnn/simplestl.h	/^    T& operator[](size_t i) const$/;"	f	struct:std::vector	access:public	signature:(size_t i) const
operator const T*	./include/ncnn/mat.h	/^    operator const T*() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
operator const T*	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::operator const T*() const$/;"	f	class:ncnn::Mat	signature:() const
operator delete	./include/ncnn/simplestl.h	/^NCNN_EXPORT void operator delete(void* ptr);$/;"	p	signature:(void* ptr)
operator delete	./include/ncnn/simplestl.h	/^NCNN_EXPORT void operator delete(void* ptr, size_t sz);$/;"	p	signature:(void* ptr, size_t sz)
operator delete	./include/ncnn/simplestl.h	/^NCNN_EXPORT void operator delete(void* ptr, void* voidptr2);$/;"	p	signature:(void* ptr, void* voidptr2)
operator delete[]	./include/ncnn/simplestl.h	/^NCNN_EXPORT void operator delete[](void* ptr);$/;"	p	signature:(void* ptr)
operator delete[]	./include/ncnn/simplestl.h	/^NCNN_EXPORT void operator delete[](void* ptr, size_t sz);$/;"	p	signature:(void* ptr, size_t sz)
operator delete[]	./include/ncnn/simplestl.h	/^NCNN_EXPORT void operator delete[](void* ptr, void* voidptr2);$/;"	p	signature:(void* ptr, void* voidptr2)
operator new	./include/ncnn/simplestl.h	/^NCNN_EXPORT void* operator new(size_t size);$/;"	p	signature:(size_t size)
operator new	./include/ncnn/simplestl.h	/^NCNN_EXPORT void* operator new(size_t size, void* ptr);$/;"	p	signature:(size_t size, void* ptr)
operator new[]	./include/ncnn/simplestl.h	/^NCNN_EXPORT void* operator new[](size_t size);$/;"	p	signature:(size_t size)
operator new[]	./include/ncnn/simplestl.h	/^NCNN_EXPORT void* operator new[](size_t size, void* ptr);$/;"	p	signature:(size_t size, void* ptr)
operator |	./include/ncnn/simpleocv.h	/^static inline Rect_<_Tp> operator|(const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv	signature:(const Rect_<_Tp>& a, const Rect_<_Tp>& b)
operator |=	./include/ncnn/simpleocv.h	/^static inline Rect_<_Tp>& operator|=(Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv	signature:(Rect_<_Tp>& a, const Rect_<_Tp>& b)
opt	./include/ncnn/net.h	/^    Option opt;$/;"	m	class:ncnn::Net	access:public
output_indexes	./include/ncnn/net.h	/^    const std::vector<int>& output_indexes() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
output_names	./include/ncnn/net.h	/^    const std::vector<const char*>& output_names() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
pAttachments	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentDescription2KHR* pAttachments;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
pColorAttachments	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentReference2KHR* pColorAttachments;$/;"	m	struct:VkSubpassDescription2KHR	access:public
pCorrelatedViewMasks	./include/ncnn/vulkan_header_fix.h	/^    const uint32_t* pCorrelatedViewMasks;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
pDependencies	./include/ncnn/vulkan_header_fix.h	/^    const VkSubpassDependency2KHR* pDependencies;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
pDepthStencilAttachment	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentReference2KHR* pDepthStencilAttachment;$/;"	m	struct:VkSubpassDescription2KHR	access:public
pInputAttachments	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentReference2KHR* pInputAttachments;$/;"	m	struct:VkSubpassDescription2KHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkAttachmentReference2KHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkSubpassBeginInfoKHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkSubpassDependency2KHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkSubpassDescription2KHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    const void* pNext;$/;"	m	struct:VkSubpassEndInfoKHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkDescriptorSetLayoutSupport	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixPropertiesNV	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceFloat16Int8FeaturesKHR	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceMaintenance3Properties	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT	access:public
pNext	./include/ncnn/vulkan_header_fix.h	/^    void* pNext;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
pPreserveAttachments	./include/ncnn/vulkan_header_fix.h	/^    const uint32_t* pPreserveAttachments;$/;"	m	struct:VkSubpassDescription2KHR	access:public
pResolveAttachments	./include/ncnn/vulkan_header_fix.h	/^    const VkAttachmentReference2KHR* pResolveAttachments;$/;"	m	struct:VkSubpassDescription2KHR	access:public
pSubpasses	./include/ncnn/vulkan_header_fix.h	/^    const VkSubpassDescription2KHR* pSubpasses;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
pair	./include/ncnn/simplestl.h	/^    pair()$/;"	f	struct:std::pair	access:public	signature:()
pair	./include/ncnn/simplestl.h	/^    pair(const T1& t1, const T2& t2)$/;"	f	struct:std::pair	access:public	signature:(const T1& t1, const T2& t2)
pair	./include/ncnn/simplestl.h	/^struct pair$/;"	s	namespace:std
partial_sort	./include/ncnn/simplestl.h	/^void partial_sort(RandomAccessIter first, RandomAccessIter middle, RandomAccessIter last, Compare comp)$/;"	f	namespace:std	signature:(RandomAccessIter first, RandomAccessIter middle, RandomAccessIter last, Compare comp)
path	./src/FastestDet.cpp	/^char path[30] = "";$/;"	v
physical_device	./include/ncnn/gpu.h	/^    VkPhysicalDevice physical_device() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
physical_device_memory_properties	./include/ncnn/gpu.h	/^    const VkPhysicalDeviceMemoryProperties& physical_device_memory_properties() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
pic_idx	./src/FastestDet.cpp	/^static int pic_idx = 0;$/;"	v	file:
pipeline	./include/ncnn/pipeline.h	/^    VkPipeline pipeline() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
pipelineBindPoint	./include/ncnn/vulkan_header_fix.h	/^    VkPipelineBindPoint pipelineBindPoint;$/;"	m	struct:VkSubpassDescription2KHR	access:public
pipeline_cache	./include/ncnn/option.h	/^    PipelineCache* pipeline_cache;$/;"	m	class:ncnn::Option	access:public
pipeline_cache_uuid	./include/ncnn/gpu.h	/^    uint8_t* pipeline_cache_uuid() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
pipeline_layout	./include/ncnn/pipeline.h	/^    VkPipelineLayout pipeline_layout() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
pixelformat	./src/FastestDet.cpp	/^    unsigned int pixelformat;       \/\/像素格式$/;"	m	struct:camera_format	file:	access:public
policy	./include/ncnn/cpu.h	/^    unsigned int policy;$/;"	m	class:ncnn::CpuSet	access:public
pop_front	./include/ncnn/simplestl.h	/^    void pop_front()$/;"	f	struct:std::list	access:public	signature:()
preserveAttachmentCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t preserveAttachmentCount;$/;"	m	struct:VkSubpassDescription2KHR	access:public
prev_	./include/ncnn/simplestl.h	/^    node* prev_;$/;"	m	struct:std::node	access:public
prob	./src/FastestDet.cpp	/^    float prob;$/;"	m	struct:Object	file:	access:public
producer	./include/ncnn/blob.h	/^    int producer;$/;"	m	class:ncnn::Blob	access:public
pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_allocator_t	access:public
pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_datareader_t	access:public
pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_layer_t	access:public
pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_modelbin_t	access:public
pthis	./include/ncnn/c_api.h	/^    void* pthis;$/;"	m	struct:__ncnn_net_t	access:public
ptr	./include/ncnn/simpleocv.h	/^    _Tp* ptr(int y)$/;"	f	struct:cv::Mat	access:public	signature:(int y)
ptr	./include/ncnn/simpleocv.h	/^    const _Tp* ptr(int y) const$/;"	f	struct:cv::Mat	access:public	signature:(int y) const
ptr	./include/ncnn/simpleocv.h	/^    const uchar* ptr(int y) const$/;"	f	struct:cv::Mat	access:public	signature:(int y) const
ptr	./include/ncnn/simpleocv.h	/^    uchar* ptr(int y)$/;"	f	struct:cv::Mat	access:public	signature:(int y)
push_back	./include/ncnn/simplestl.h	/^    void push_back(const T& t)$/;"	f	struct:std::list	access:public	signature:(const T& t)
push_back	./include/ncnn/simplestl.h	/^    void push_back(const T& t)$/;"	f	struct:std::vector	access:public	signature:(const T& t)
push_constant_count	./include/ncnn/gpu.h	/^    int push_constant_count;$/;"	m	class:ncnn::ShaderInfo	access:public
putText	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void putText(Mat& img, const std::string& text, Point org, int fontFace, double fontScale, Scalar color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, const std::string& text, Point org, int fontFace, double fontScale, Scalar color, int thickness = 1)
qnxnto	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	./build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qsort_descent_inplace	./src/FastestDet.cpp	/^    void qsort_descent_inplace(std::vector<Object>& faceobjects);$/;"	p	class:FastestDet	file:	access:private	signature:(std::vector<Object>& faceobjects)
qsort_descent_inplace	./src/FastestDet.cpp	/^    void qsort_descent_inplace(std::vector<Object>& faceobjects, int left, int right);$/;"	p	class:FastestDet	file:	access:private	signature:(std::vector<Object>& faceobjects, int left, int right)
qsort_descent_inplace	./src/FastestDet.cpp	/^void FastestDet::qsort_descent_inplace(std::vector<Object>& faceobjects)$/;"	f	class:FastestDet	signature:(std::vector<Object>& faceobjects)
qsort_descent_inplace	./src/FastestDet.cpp	/^void FastestDet::qsort_descent_inplace(std::vector<Object>& faceobjects, int left, int right)$/;"	f	class:FastestDet	signature:(std::vector<Object>& faceobjects, int left, int right)
quadOperationsInAllStages	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 quadOperationsInAllStages;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
quantize_to_int8	./include/ncnn/mat.h	/^NCNN_EXPORT void quantize_to_int8(const Mat& src, Mat& dst, const Mat& scale_data, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Mat& scale_data, const Option& opt = Option())
range	./include/ncnn/mat.h	/^    Mat range(int x, int n);$/;"	p	class:ncnn::Mat	access:public	signature:(int x, int n)
range	./include/ncnn/mat.h	/^    const Mat range(int x, int n) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int x, int n) const
range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::range(int x, int n)$/;"	f	class:ncnn::Mat	signature:(int x, int n)
range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::range(int x, int n) const$/;"	f	class:ncnn::Mat	signature:(int x, int n) const
read	./include/ncnn/c_api.h	/^    size_t (*read)(ncnn_datareader_t dr, void* buf, size_t size);$/;"	m	struct:__ncnn_datareader_t	access:public
read	./include/ncnn/datareader.h	/^    virtual size_t read(void* buf, size_t size) const;$/;"	p	class:ncnn::DataReader	access:public	signature:(void* buf, size_t size) const
read	./include/ncnn/datareader.h	/^    virtual size_t read(void* buf, size_t size) const;$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:public	signature:(void* buf, size_t size) const
read	./include/ncnn/datareader.h	/^    virtual size_t read(void* buf, size_t size) const;$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:(void* buf, size_t size) const
read	./include/ncnn/datareader.h	/^    virtual size_t read(void* buf, size_t size) const;$/;"	p	class:ncnn::DataReaderFromStdio	access:public	signature:(void* buf, size_t size) const
reclaim_blob_allocator	./include/ncnn/gpu.h	/^    void reclaim_blob_allocator(VkAllocator* allocator) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(VkAllocator* allocator) const
reclaim_queue	./include/ncnn/gpu.h	/^    void reclaim_queue(uint32_t queue_family_index, VkQueue queue) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(uint32_t queue_family_index, VkQueue queue) const
reclaim_staging_allocator	./include/ncnn/gpu.h	/^    void reclaim_staging_allocator(VkAllocator* allocator) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(VkAllocator* allocator) const
record_buffer_to_image	./include/ncnn/command.h	/^    void record_buffer_to_image(const VkMat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, VkImageMat& dst, const Option& opt)
record_clone	./include/ncnn/command.h	/^    void record_clone(const Mat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Mat& src, VkImageMat& dst, const Option& opt)
record_clone	./include/ncnn/command.h	/^    void record_clone(const Mat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Mat& src, VkMat& dst, const Option& opt)
record_clone	./include/ncnn/command.h	/^    void record_clone(const VkImageMat& src, Mat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, Mat& dst, const Option& opt)
record_clone	./include/ncnn/command.h	/^    void record_clone(const VkImageMat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, VkImageMat& dst, const Option& opt)
record_clone	./include/ncnn/command.h	/^    void record_clone(const VkImageMat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, VkMat& dst, const Option& opt)
record_clone	./include/ncnn/command.h	/^    void record_clone(const VkMat& src, Mat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, Mat& dst, const Option& opt)
record_clone	./include/ncnn/command.h	/^    void record_clone(const VkMat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, VkImageMat& dst, const Option& opt)
record_clone	./include/ncnn/command.h	/^    void record_clone(const VkMat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, VkMat& dst, const Option& opt)
record_download	./include/ncnn/command.h	/^    void record_download(const VkImageMat& src, Mat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, Mat& dst, const Option& opt)
record_download	./include/ncnn/command.h	/^    void record_download(const VkMat& src, Mat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkMat& src, Mat& dst, const Option& opt)
record_image_to_buffer	./include/ncnn/command.h	/^    void record_image_to_buffer(const VkImageMat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const VkImageMat& src, VkMat& dst, const Option& opt)
record_import_android_hardware_buffer	./include/ncnn/command.h	/^    void record_import_android_hardware_buffer(const ImportAndroidHardwareBufferPipeline* pipeline, const VkImageMat& src, const VkImageMat& dst);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const ImportAndroidHardwareBufferPipeline* pipeline, const VkImageMat& src, const VkImageMat& dst)
record_import_android_hardware_buffer	./include/ncnn/command.h	/^    void record_import_android_hardware_buffer(const ImportAndroidHardwareBufferPipeline* pipeline, const VkImageMat& src, const VkMat& dst);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const ImportAndroidHardwareBufferPipeline* pipeline, const VkImageMat& src, const VkMat& dst)
record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkImageMat>& bindings, const std::vector<vk_constant_type>& constants, const VkImageMat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkImageMat>& bindings, const std::vector<vk_constant_type>& constants, const VkImageMat& dispatcher)
record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkMat>& bindings, const std::vector<vk_constant_type>& constants, const VkMat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkMat>& bindings, const std::vector<vk_constant_type>& constants, const VkMat& dispatcher)
record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const Mat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const Mat& dispatcher)
record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const VkImageMat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const VkImageMat& dispatcher)
record_pipeline	./include/ncnn/command.h	/^    void record_pipeline(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const VkMat& dispatcher);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Pipeline* pipeline, const std::vector<VkMat>& buffer_bindings, const std::vector<VkImageMat>& image_bindings, const std::vector<vk_constant_type>& constants, const VkMat& dispatcher)
record_upload	./include/ncnn/command.h	/^    void record_upload(const Mat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Mat& src, VkImageMat& dst, const Option& opt)
record_upload	./include/ncnn/command.h	/^    void record_upload(const Mat& src, VkImageMat& dst, const Option& opt);$/;"	p	class:ncnn::VkTransfer	access:public	signature:(const Mat& src, VkImageMat& dst, const Option& opt)
record_upload	./include/ncnn/command.h	/^    void record_upload(const Mat& src, VkMat& dst, const Option& opt);$/;"	p	class:ncnn::VkCompute	access:public	signature:(const Mat& src, VkMat& dst, const Option& opt)
record_upload	./include/ncnn/command.h	/^    void record_upload(const Mat& src, VkMat& dst, const Option& opt, bool flatten = true);$/;"	p	class:ncnn::VkTransfer	access:public	signature:(const Mat& src, VkMat& dst, const Option& opt, bool flatten = true)
record_write_timestamp	./include/ncnn/command.h	/^    void record_write_timestamp(uint32_t query);$/;"	p	class:ncnn::VkCompute	access:public	signature:(uint32_t query)
rect	./src/FastestDet.cpp	/^    cv::Rect  rect;$/;"	m	struct:Object	file:	access:public
rectangle	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void rectangle(Mat& img, Point pt1, Point pt2, const Scalar& color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, Point pt1, Point pt2, const Scalar& color, int thickness = 1)
rectangle	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void rectangle(Mat& img, Rect rec, const Scalar& color, int thickness = 1);$/;"	p	namespace:cv	signature:(Mat& img, Rect rec, const Scalar& color, int thickness = 1)
refcount	./include/ncnn/allocator.h	/^    int refcount;$/;"	m	class:ncnn::VkBufferMemory	access:public
refcount	./include/ncnn/allocator.h	/^    int refcount;$/;"	m	class:ncnn::VkImageMemory	access:public
refcount	./include/ncnn/mat.h	/^    int* refcount;$/;"	m	class:ncnn::Mat	access:public
refcount	./include/ncnn/mat.h	/^    int* refcount;$/;"	m	class:ncnn::VkImageMat	access:public
refcount	./include/ncnn/mat.h	/^    int* refcount;$/;"	m	class:ncnn::VkMat	access:public
refcount	./include/ncnn/simpleocv.h	/^    int* refcount;$/;"	m	struct:cv::Mat	access:public
reference	./include/ncnn/datareader.h	/^    virtual size_t reference(size_t size, const void** buf) const;$/;"	p	class:ncnn::DataReader	access:public	signature:(size_t size, const void** buf) const
reference	./include/ncnn/datareader.h	/^    virtual size_t reference(size_t size, const void** buf) const;$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:(size_t size, const void** buf) const
register_custom_layer	./include/ncnn/net.h	/^    int register_custom_layer(const char* type, layer_creator_func creator, layer_destroyer_func destroyer = 0, void* userdata = 0);$/;"	p	class:ncnn::Net	access:public	signature:(const char* type, layer_creator_func creator, layer_destroyer_func destroyer = 0, void* userdata = 0)
register_custom_layer	./include/ncnn/net.h	/^    int register_custom_layer(int index, layer_creator_func creator, layer_destroyer_func destroyer = 0, void* userdata = 0);$/;"	p	class:ncnn::Net	access:public	signature:(int index, layer_creator_func creator, layer_destroyer_func destroyer = 0, void* userdata = 0)
release	./include/ncnn/mat.h	/^    void release();$/;"	p	class:ncnn::Mat	access:public	signature:()
release	./include/ncnn/mat.h	/^    void release();$/;"	p	class:ncnn::VkImageMat	access:public	signature:()
release	./include/ncnn/mat.h	/^    void release();$/;"	p	class:ncnn::VkMat	access:public	signature:()
release	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void Mat::release()$/;"	f	class:ncnn::Mat	signature:()
release	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void VkImageMat::release()$/;"	f	class:ncnn::VkImageMat	signature:()
release	./include/ncnn/mat.h	/^NCNN_FORCEINLINE void VkMat::release()$/;"	f	class:ncnn::VkMat	signature:()
release	./include/ncnn/simpleocv.h	/^    void release()$/;"	f	struct:cv::Mat	access:public	signature:()
requantize_from_int32_to_int8	./include/ncnn/mat.h	/^NCNN_EXPORT void requantize_from_int32_to_int8(const Mat& src, Mat& dst, const Mat& scale_in_data, const Mat& scale_out_data, const Mat& bias_data, int activation_type, const Mat& activation_params, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, const Mat& scale_in_data, const Mat& scale_out_data, const Mat& bias_data, int activation_type, const Mat& activation_params, const Option& opt = Option())
reserved_0	./include/ncnn/gpu.h	/^    int reserved_0;$/;"	m	class:ncnn::ShaderInfo	access:public
reserved_1	./include/ncnn/gpu.h	/^    int reserved_1;$/;"	m	class:ncnn::ShaderInfo	access:public
reserved_2	./include/ncnn/gpu.h	/^    int reserved_2;$/;"	m	class:ncnn::ShaderInfo	access:public
reserved_3	./include/ncnn/gpu.h	/^    int reserved_3;$/;"	m	class:ncnn::ShaderInfo	access:public
reserved_type_index	./include/ncnn/allocator.h	/^    uint32_t reserved_type_index;$/;"	m	class:ncnn::VkAllocator	access:public
reset	./include/ncnn/command.h	/^    int reset();$/;"	p	class:ncnn::VkCompute	access:public	signature:()
reshape	./include/ncnn/mat.h	/^    Mat reshape(int w, Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int w, Allocator* allocator = 0) const
reshape	./include/ncnn/mat.h	/^    Mat reshape(int w, int h, Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, Allocator* allocator = 0) const
reshape	./include/ncnn/mat.h	/^    Mat reshape(int w, int h, int c, Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int c, Allocator* allocator = 0) const
reshape	./include/ncnn/mat.h	/^    Mat reshape(int w, int h, int d, int c, Allocator* allocator = 0) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int w, int h, int d, int c, Allocator* allocator = 0) const
resize	./include/ncnn/simpleocv.h	/^NCNN_EXPORT void resize(const Mat& src, Mat& dst, const Size& size, float sw = 0.f, float sh = 0.f, int flags = 0);$/;"	p	namespace:cv	signature:(const Mat& src, Mat& dst, const Size& size, float sw = 0.f, float sh = 0.f, int flags = 0)
resize	./include/ncnn/simplestl.h	/^    void resize(const size_t new_size, const T& value = T())$/;"	f	struct:std::vector	access:public	signature:(const size_t new_size, const T& value = T())
resize_bicubic	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bicubic(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option())
resize_bilinear	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option())
resize_bilinear_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride)
resize_bilinear_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
resize_bilinear_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride)
resize_bilinear_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
resize_bilinear_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride)
resize_bilinear_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
resize_bilinear_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride)
resize_bilinear_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
resize_bilinear_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_bilinear_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h)
resize_nearest	./include/ncnn/mat.h	/^NCNN_EXPORT void resize_nearest(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());$/;"	p	namespace:ncnn	signature:(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option())
resolve_shader_info	./include/ncnn/gpu.h	/^NCNN_EXPORT int resolve_shader_info(const uint32_t* spv_data, size_t spv_data_size, ShaderInfo& shader_info);$/;"	p	namespace:ncnn	signature:(const uint32_t* spv_data, size_t spv_data_size, ShaderInfo& shader_info)
ret	./src/FastestDet.cpp	/^int ret;$/;"	v
rotate_from	./include/ncnn/pipeline.h	/^    int rotate_from;$/;"	m	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public
row	./include/ncnn/mat.h	/^    T* row(int y);$/;"	p	class:ncnn::Mat	access:public	signature:(int y)
row	./include/ncnn/mat.h	/^    const T* row(int y) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int y) const
row	./include/ncnn/mat.h	/^    const float* row(int y) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int y) const
row	./include/ncnn/mat.h	/^    float* row(int y);$/;"	p	class:ncnn::Mat	access:public	signature:(int y)
row	./include/ncnn/mat.h	/^NCNN_FORCEINLINE T* Mat::row(int y)$/;"	f	class:ncnn::Mat	signature:(int y)
row	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const T* Mat::row(int y) const$/;"	f	class:ncnn::Mat	signature:(int y) const
row	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const float* Mat::row(int y) const$/;"	f	class:ncnn::Mat	signature:(int y) const
row	./include/ncnn/mat.h	/^NCNN_FORCEINLINE float* Mat::row(int y)$/;"	f	class:ncnn::Mat	signature:(int y)
row_range	./include/ncnn/mat.h	/^    Mat row_range(int y, int rows);$/;"	p	class:ncnn::Mat	access:public	signature:(int y, int rows)
row_range	./include/ncnn/mat.h	/^    const Mat row_range(int y, int rows) const;$/;"	p	class:ncnn::Mat	access:public	signature:(int y, int rows) const
row_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::row_range(int y, int rows)$/;"	f	class:ncnn::Mat	signature:(int y, int rows)
row_range	./include/ncnn/mat.h	/^NCNN_FORCEINLINE const Mat Mat::row_range(int y, int rows) const$/;"	f	class:ncnn::Mat	signature:(int y, int rows) const
rows	./include/ncnn/simpleocv.h	/^    int rows;$/;"	m	struct:cv::Mat	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkAttachmentReference2KHR	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkDescriptorSetLayoutSupport	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixFeaturesNV	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceCooperativeMatrixPropertiesNV	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceFloat16Int8FeaturesKHR	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceMaintenance3Properties	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceMemoryBudgetPropertiesEXT	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkSubpassBeginInfoKHR	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkSubpassDependency2KHR	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkSubpassDescription2KHR	access:public
sType	./include/ncnn/vulkan_header_fix.h	/^    VkStructureType sType;$/;"	m	struct:VkSubpassEndInfoKHR	access:public
sampler	./include/ncnn/pipeline.h	/^    VkSampler sampler;$/;"	m	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public
samplerYcbcrConversion	./include/ncnn/allocator.h	/^    VkSamplerYcbcrConversionKHR samplerYcbcrConversion;$/;"	m	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public
samples	./include/ncnn/vulkan_header_fix.h	/^    VkSampleCountFlagBits samples;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
saturate_cast	./include/ncnn/simpleocv.h	/^inline uchar saturate_cast<uchar>(int v)$/;"	f	namespace:cv	signature:(int v)
saturate_cast	./include/ncnn/simpleocv.h	/^static inline _Tp saturate_cast(int v)$/;"	f	namespace:cv	signature:(int v)
save_idx	./src/FastestDet.cpp	/^int save_idx = 0;$/;"	v
save_path	./src/FastestDet.cpp	/^char save_path[30];$/;"	v
scan	./include/ncnn/c_api.h	/^    int (*scan)(ncnn_datareader_t dr, const char* format, void* p);$/;"	m	struct:__ncnn_datareader_t	access:public
scan	./include/ncnn/datareader.h	/^    virtual int scan(const char* format, void* p) const;$/;"	p	class:ncnn::DataReader	access:public	signature:(const char* format, void* p) const
scan	./include/ncnn/datareader.h	/^    virtual int scan(const char* format, void* p) const;$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:public	signature:(const char* format, void* p) const
scan	./include/ncnn/datareader.h	/^    virtual int scan(const char* format, void* p) const;$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:(const char* format, void* p) const
scan	./include/ncnn/datareader.h	/^    virtual int scan(const char* format, void* p) const;$/;"	p	class:ncnn::DataReaderFromStdio	access:public	signature:(const char* format, void* p) const
scope	./include/ncnn/vulkan_header_fix.h	/^    VkScopeNV scope;$/;"	m	struct:VkCooperativeMatrixPropertiesNV	access:public
screen_base	./src/FastestDet.cpp	/^static unsigned short *screen_base = NULL, *cp_screen_base = NULL;\/\/LCD显存基地址$/;"	v	file:
second	./include/ncnn/simplestl.h	/^    T2 second;$/;"	m	struct:std::pair	access:public
set	./include/ncnn/paramdict.h	/^    void set(int id, const Mat& v);$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, const Mat& v)
set	./include/ncnn/paramdict.h	/^    void set(int id, float f);$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, float f)
set	./include/ncnn/paramdict.h	/^    void set(int id, int i);$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id, int i)
set	./include/ncnn/platform.h	/^    void set(void* value) { TlsSetValue(key, (LPVOID)value); }$/;"	f	class:ncnn::ThreadLocalStorage	access:public	signature:(void* value)
set_blob_allocator	./include/ncnn/net.h	/^    void set_blob_allocator(Allocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(Allocator* allocator)
set_blob_vkallocator	./include/ncnn/net.h	/^    void set_blob_vkallocator(VkAllocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(VkAllocator* allocator)
set_cpu_powersave	./include/ncnn/cpu.h	/^NCNN_EXPORT int set_cpu_powersave(int powersave);$/;"	p	namespace:ncnn	signature:(int powersave)
set_cpu_thread_affinity	./include/ncnn/cpu.h	/^NCNN_EXPORT int set_cpu_thread_affinity(const CpuSet& thread_affinity_mask);$/;"	p	namespace:ncnn	signature:(const CpuSet& thread_affinity_mask)
set_descriptor_update_template	./include/ncnn/pipeline.h	/^    void set_descriptor_update_template(VkDescriptorUpdateTemplateKHR descriptor_update_template);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkDescriptorUpdateTemplateKHR descriptor_update_template)
set_descriptorset_layout	./include/ncnn/pipeline.h	/^    void set_descriptorset_layout(VkDescriptorSetLayout descriptorset_layout);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkDescriptorSetLayout descriptorset_layout)
set_flush_denormals	./include/ncnn/cpu.h	/^NCNN_EXPORT int set_flush_denormals(int flush_denormals);$/;"	p	namespace:ncnn	signature:(int flush_denormals)
set_kmp_blocktime	./include/ncnn/cpu.h	/^NCNN_EXPORT void set_kmp_blocktime(int time_ms);$/;"	p	namespace:ncnn	signature:(int time_ms)
set_light_mode	./include/ncnn/net.h	/^    void set_light_mode(bool enable);$/;"	p	class:ncnn::Extractor	access:public	signature:(bool enable)
set_local_size_xyz	./include/ncnn/pipeline.h	/^    void set_local_size_xyz(int w, int h, int c);$/;"	p	class:ncnn::Pipeline	access:public	signature:(int w, int h, int c)
set_num_threads	./include/ncnn/net.h	/^    void set_num_threads(int num_threads);$/;"	p	class:ncnn::Extractor	access:public	signature:(int num_threads)
set_omp_dynamic	./include/ncnn/cpu.h	/^NCNN_EXPORT void set_omp_dynamic(int dynamic);$/;"	p	namespace:ncnn	signature:(int dynamic)
set_omp_num_threads	./include/ncnn/cpu.h	/^NCNN_EXPORT void set_omp_num_threads(int num_threads);$/;"	p	namespace:ncnn	signature:(int num_threads)
set_optimal_local_size_xyz	./include/ncnn/pipeline.h	/^    void set_optimal_local_size_xyz(const Mat& local_size_xyz);$/;"	p	class:ncnn::Pipeline	access:public	signature:(const Mat& local_size_xyz)
set_optimal_local_size_xyz	./include/ncnn/pipeline.h	/^    void set_optimal_local_size_xyz(int w = 4, int h = 4, int c = 4);$/;"	p	class:ncnn::Pipeline	access:public	signature:(int w = 4, int h = 4, int c = 4)
set_pipeline	./include/ncnn/pipeline.h	/^    void set_pipeline(VkPipeline pipeline);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkPipeline pipeline)
set_pipeline_layout	./include/ncnn/pipeline.h	/^    void set_pipeline_layout(VkPipelineLayout pipeline_layout);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkPipelineLayout pipeline_layout)
set_shader_info	./include/ncnn/pipeline.h	/^    void set_shader_info(const ShaderInfo& shader_info);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(const ShaderInfo& shader_info)
set_shader_module	./include/ncnn/pipeline.h	/^    void set_shader_module(VkShaderModule shader_module);$/;"	p	class:ncnn::Pipeline	access:protected	signature:(VkShaderModule shader_module)
set_size_compare_ratio	./include/ncnn/allocator.h	/^    void set_size_compare_ratio(float scr);$/;"	p	class:ncnn::PoolAllocator	access:public	signature:(float scr)
set_size_compare_ratio	./include/ncnn/allocator.h	/^    void set_size_compare_ratio(float scr);$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:(float scr)
set_size_compare_ratio	./include/ncnn/allocator.h	/^    void set_size_compare_ratio(float scr);$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:(float scr)
set_staging_vkallocator	./include/ncnn/net.h	/^    void set_staging_vkallocator(VkAllocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(VkAllocator* allocator)
set_vulkan_compute	./include/ncnn/net.h	/^    void set_vulkan_compute(bool enable);$/;"	p	class:ncnn::Extractor	access:public	signature:(bool enable)
set_vulkan_device	./include/ncnn/net.h	/^    void set_vulkan_device(const VulkanDevice* vkdev);$/;"	p	class:ncnn::Net	access:public	signature:(const VulkanDevice* vkdev)
set_vulkan_device	./include/ncnn/net.h	/^    void set_vulkan_device(int device_index);$/;"	p	class:ncnn::Net	access:public	signature:(int device_index)
set_workspace_allocator	./include/ncnn/net.h	/^    void set_workspace_allocator(Allocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(Allocator* allocator)
set_workspace_vkallocator	./include/ncnn/net.h	/^    void set_workspace_vkallocator(VkAllocator* allocator);$/;"	p	class:ncnn::Extractor	access:public	signature:(VkAllocator* allocator)
shaderFloat16	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 shaderFloat16;$/;"	m	struct:VkPhysicalDeviceFloat16Int8FeaturesKHR	access:public
shaderInt8	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 shaderInt8;$/;"	m	struct:VkPhysicalDeviceFloat16Int8FeaturesKHR	access:public
shader_info	./include/ncnn/pipeline.h	/^    const ShaderInfo& shader_info() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
shader_module	./include/ncnn/pipeline.h	/^    VkShaderModule shader_module() const;$/;"	p	class:ncnn::Pipeline	access:public	signature:() const
shape	./include/ncnn/blob.h	/^    Mat shape;$/;"	m	class:ncnn::Blob	access:public
shape	./include/ncnn/mat.h	/^    Mat shape() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
shape	./include/ncnn/mat.h	/^    Mat shape() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
shape	./include/ncnn/mat.h	/^    Mat shape() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
shape	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat Mat::shape() const$/;"	f	class:ncnn::Mat	signature:() const
shape	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat VkImageMat::shape() const$/;"	f	class:ncnn::VkImageMat	signature:() const
shape	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat VkMat::shape() const$/;"	f	class:ncnn::VkMat	signature:() const
shape_support_image_storage	./include/ncnn/gpu.h	/^    bool shape_support_image_storage(const Mat& shape) const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:(const Mat& shape) const
show_png_function	./src/FastestDet.cpp	/^void *show_png_function(void *arg){$/;"	f	signature:(void *arg)
show_png_image	./src/FastestDet.cpp	/^static int show_png_image(const char *path)$/;"	f	file:	signature:(const char *path)
show_thread_id	./src/FastestDet.cpp	/^pthread_t model_thread_id, show_thread_id;$/;"	v
sigio_signal_func	./src/FastestDet.cpp	/^static void sigio_signal_func(int signum){$/;"	f	file:	signature:(int signum)
sigmoid	./src/FastestDet.cpp	/^inline float sigmoid(float x)$/;"	f	signature:(float x)
signal	./include/ncnn/platform.h	/^    void signal() { WakeConditionVariable(&condvar); }$/;"	f	class:ncnn::ConditionVariable	access:public	signature:()
size	./include/ncnn/simplestl.h	/^    size_t size() const$/;"	f	struct:std::list	access:public	signature:() const
size	./include/ncnn/simplestl.h	/^    size_t size() const$/;"	f	struct:std::vector	access:public	signature:() const
size_	./include/ncnn/simplestl.h	/^    size_t size_;$/;"	m	struct:std::vector	access:protected
specialization_count	./include/ncnn/gpu.h	/^    int specialization_count;$/;"	m	class:ncnn::ShaderInfo	access:public
srcAccessMask	./include/ncnn/vulkan_header_fix.h	/^    VkAccessFlags srcAccessMask;$/;"	m	struct:VkSubpassDependency2KHR	access:public
srcStageMask	./include/ncnn/vulkan_header_fix.h	/^    VkPipelineStageFlags srcStageMask;$/;"	m	struct:VkSubpassDependency2KHR	access:public
srcSubpass	./include/ncnn/vulkan_header_fix.h	/^    uint32_t srcSubpass;$/;"	m	struct:VkSubpassDependency2KHR	access:public
srwlock	./include/ncnn/platform.h	/^    SRWLOCK srwlock;$/;"	m	class:ncnn::Mutex	access:private
stage_flags	./include/ncnn/allocator.h	/^    mutable VkPipelineStageFlags stage_flags;$/;"	m	class:ncnn::VkBufferMemory	access:public
stage_flags	./include/ncnn/allocator.h	/^    mutable VkPipelineStageFlags stage_flags;$/;"	m	class:ncnn::VkImageMemory	access:public
staging_vkallocator	./include/ncnn/option.h	/^    VkAllocator* staging_vkallocator;$/;"	m	class:ncnn::Option	access:public
start	./src/FastestDet.cpp	/^    unsigned short *start;      \/\/帧缓冲起始地址$/;"	m	struct:cam_buf_info	file:	access:public
start_wrapper	./include/ncnn/platform.h	/^    friend unsigned __stdcall start_wrapper(void* args)$/;"	f	class:ncnn::Thread	access:friend	signature:(void* args)
start_wrapper	./include/ncnn/platform.h	/^static unsigned __stdcall start_wrapper(void* args);$/;"	p	namespace:ncnn	signature:(void* args)
std	./include/ncnn/simplestl.h	/^namespace std {$/;"	n
std::greater	./include/ncnn/simplestl.h	/^struct greater$/;"	s	namespace:std
std::greater::operator ()	./include/ncnn/simplestl.h	/^    bool operator()(const T& x, const T& y) const$/;"	f	struct:std::greater	access:public	signature:(const T& x, const T& y) const
std::iter_list	./include/ncnn/simplestl.h	/^struct iter_list$/;"	s	namespace:std
std::iter_list::curr_	./include/ncnn/simplestl.h	/^    node<T>* curr_;$/;"	m	struct:std::iter_list	access:public
std::iter_list::iter_list	./include/ncnn/simplestl.h	/^    iter_list()$/;"	f	struct:std::iter_list	access:public	signature:()
std::iter_list::iter_list	./include/ncnn/simplestl.h	/^    iter_list(const iter_list& i)$/;"	f	struct:std::iter_list	access:public	signature:(const iter_list& i)
std::iter_list::iter_list	./include/ncnn/simplestl.h	/^    iter_list(node<T>* n)$/;"	f	struct:std::iter_list	access:public	signature:(node<T>* n)
std::iter_list::operator !=	./include/ncnn/simplestl.h	/^    bool operator!=(const iter_list& i)$/;"	f	struct:std::iter_list	access:public	signature:(const iter_list& i)
std::iter_list::operator *	./include/ncnn/simplestl.h	/^    T& operator*()$/;"	f	struct:std::iter_list	access:public	signature:()
std::iter_list::operator ++	./include/ncnn/simplestl.h	/^    iter_list& operator++()$/;"	f	struct:std::iter_list	access:public	signature:()
std::iter_list::operator --	./include/ncnn/simplestl.h	/^    iter_list& operator--()$/;"	f	struct:std::iter_list	access:public	signature:()
std::iter_list::operator ->	./include/ncnn/simplestl.h	/^    T* operator->()$/;"	f	struct:std::iter_list	access:public	signature:()
std::iter_list::operator =	./include/ncnn/simplestl.h	/^    iter_list& operator=(const iter_list& i)$/;"	f	struct:std::iter_list	access:public	signature:(const iter_list& i)
std::iter_list::operator ==	./include/ncnn/simplestl.h	/^    bool operator==(const iter_list& i)$/;"	f	struct:std::iter_list	access:public	signature:(const iter_list& i)
std::iter_list::~iter_list	./include/ncnn/simplestl.h	/^    ~iter_list()$/;"	f	struct:std::iter_list	access:public	signature:()
std::less	./include/ncnn/simplestl.h	/^struct less$/;"	s	namespace:std
std::less::operator ()	./include/ncnn/simplestl.h	/^    bool operator()(const T& x, const T& y) const$/;"	f	struct:std::less	access:public	signature:(const T& x, const T& y) const
std::list	./include/ncnn/simplestl.h	/^struct list$/;"	s	namespace:std
std::list::begin	./include/ncnn/simplestl.h	/^    iter_list<T> begin() const$/;"	f	struct:std::list	access:public	signature:() const
std::list::clear	./include/ncnn/simplestl.h	/^    void clear()$/;"	f	struct:std::list	access:public	signature:()
std::list::count_	./include/ncnn/simplestl.h	/^    size_t count_;$/;"	m	struct:std::list	access:protected
std::list::empty	./include/ncnn/simplestl.h	/^    bool empty() const$/;"	f	struct:std::list	access:public	signature:() const
std::list::end	./include/ncnn/simplestl.h	/^    iter_list<T> end() const$/;"	f	struct:std::list	access:public	signature:() const
std::list::erase	./include/ncnn/simplestl.h	/^    iter_list<T> erase(iter_list<T> pos)$/;"	f	struct:std::list	access:public	signature:(iter_list<T> pos)
std::list::head_	./include/ncnn/simplestl.h	/^    node<T>* head_;$/;"	m	struct:std::list	access:protected
std::list::iterator	./include/ncnn/simplestl.h	/^    typedef iter_list<T> iterator;$/;"	t	struct:std::list	access:public
std::list::list	./include/ncnn/simplestl.h	/^    list()$/;"	f	struct:std::list	access:public	signature:()
std::list::list	./include/ncnn/simplestl.h	/^    list(const list& l)$/;"	f	struct:std::list	access:public	signature:(const list& l)
std::list::operator =	./include/ncnn/simplestl.h	/^    list& operator=(const list& l)$/;"	f	struct:std::list	access:public	signature:(const list& l)
std::list::pop_front	./include/ncnn/simplestl.h	/^    void pop_front()$/;"	f	struct:std::list	access:public	signature:()
std::list::push_back	./include/ncnn/simplestl.h	/^    void push_back(const T& t)$/;"	f	struct:std::list	access:public	signature:(const T& t)
std::list::size	./include/ncnn/simplestl.h	/^    size_t size() const$/;"	f	struct:std::list	access:public	signature:() const
std::list::tail_	./include/ncnn/simplestl.h	/^    node<T>* tail_;$/;"	m	struct:std::list	access:protected
std::list::~list	./include/ncnn/simplestl.h	/^    ~list()$/;"	f	struct:std::list	access:public	signature:()
std::make_pair	./include/ncnn/simplestl.h	/^pair<T1, T2> make_pair(const T1& t1, const T2& t2)$/;"	f	namespace:std	signature:(const T1& t1, const T2& t2)
std::max	./include/ncnn/simplestl.h	/^const T& max(const T& a, const T& b)$/;"	f	namespace:std	signature:(const T& a, const T& b)
std::min	./include/ncnn/simplestl.h	/^const T& min(const T& a, const T& b)$/;"	f	namespace:std	signature:(const T& a, const T& b)
std::node	./include/ncnn/simplestl.h	/^struct node$/;"	s	namespace:std
std::node::data_	./include/ncnn/simplestl.h	/^    T data_;$/;"	m	struct:std::node	access:public
std::node::next_	./include/ncnn/simplestl.h	/^    node* next_;$/;"	m	struct:std::node	access:public
std::node::node	./include/ncnn/simplestl.h	/^    node()$/;"	f	struct:std::node	access:public	signature:()
std::node::node	./include/ncnn/simplestl.h	/^    node(const T& t)$/;"	f	struct:std::node	access:public	signature:(const T& t)
std::node::prev_	./include/ncnn/simplestl.h	/^    node* prev_;$/;"	m	struct:std::node	access:public
std::operator !=	./include/ncnn/simplestl.h	/^bool operator!=(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
std::operator +	./include/ncnn/simplestl.h	/^inline string operator+(const string& str1, const string& str2)$/;"	f	namespace:std	signature:(const string& str1, const string& str2)
std::operator <	./include/ncnn/simplestl.h	/^bool operator<(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
std::operator <=	./include/ncnn/simplestl.h	/^bool operator<=(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
std::operator ==	./include/ncnn/simplestl.h	/^bool operator==(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
std::operator >	./include/ncnn/simplestl.h	/^bool operator>(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
std::operator >=	./include/ncnn/simplestl.h	/^bool operator>=(const pair<T1, T2>& x, const pair<T1, T2>& y)$/;"	f	namespace:std	signature:(const pair<T1, T2>& x, const pair<T1, T2>& y)
std::pair	./include/ncnn/simplestl.h	/^struct pair$/;"	s	namespace:std
std::pair::first	./include/ncnn/simplestl.h	/^    T1 first;$/;"	m	struct:std::pair	access:public
std::pair::pair	./include/ncnn/simplestl.h	/^    pair()$/;"	f	struct:std::pair	access:public	signature:()
std::pair::pair	./include/ncnn/simplestl.h	/^    pair(const T1& t1, const T2& t2)$/;"	f	struct:std::pair	access:public	signature:(const T1& t1, const T2& t2)
std::pair::second	./include/ncnn/simplestl.h	/^    T2 second;$/;"	m	struct:std::pair	access:public
std::partial_sort	./include/ncnn/simplestl.h	/^void partial_sort(RandomAccessIter first, RandomAccessIter middle, RandomAccessIter last, Compare comp)$/;"	f	namespace:std	signature:(RandomAccessIter first, RandomAccessIter middle, RandomAccessIter last, Compare comp)
std::string	./include/ncnn/simplestl.h	/^struct NCNN_EXPORT string : public vector<char>$/;"	s	namespace:std	inherits:vector
std::string::c_str	./include/ncnn/simplestl.h	/^    const char* c_str() const$/;"	f	struct:std::string	access:public	signature:() const
std::string::operator !=	./include/ncnn/simplestl.h	/^    bool operator!=(const char* str2) const$/;"	f	struct:std::string	access:public	signature:(const char* str2) const
std::string::operator +=	./include/ncnn/simplestl.h	/^    string& operator+=(const string& str1)$/;"	f	struct:std::string	access:public	signature:(const string& str1)
std::string::operator ==	./include/ncnn/simplestl.h	/^    bool operator==(const char* str2) const$/;"	f	struct:std::string	access:public	signature:(const char* str2) const
std::string::operator ==	./include/ncnn/simplestl.h	/^    bool operator==(const string& str2) const$/;"	f	struct:std::string	access:public	signature:(const string& str2) const
std::string::string	./include/ncnn/simplestl.h	/^    string()$/;"	f	struct:std::string	access:public	signature:()
std::string::string	./include/ncnn/simplestl.h	/^    string(const char* str)$/;"	f	struct:std::string	access:public	signature:(const char* str)
std::swap	./include/ncnn/simplestl.h	/^void swap(T& a, T& b)$/;"	f	namespace:std	signature:(T& a, T& b)
std::vector	./include/ncnn/simplestl.h	/^struct vector$/;"	s	namespace:std
std::vector::begin	./include/ncnn/simplestl.h	/^    T* begin() const$/;"	f	struct:std::vector	access:public	signature:() const
std::vector::capacity_	./include/ncnn/simplestl.h	/^    size_t capacity_;$/;"	m	struct:std::vector	access:protected
std::vector::clear	./include/ncnn/simplestl.h	/^    void clear()$/;"	f	struct:std::vector	access:public	signature:()
std::vector::data	./include/ncnn/simplestl.h	/^    T* data() const$/;"	f	struct:std::vector	access:public	signature:() const
std::vector::data_	./include/ncnn/simplestl.h	/^    T* data_;$/;"	m	struct:std::vector	access:protected
std::vector::empty	./include/ncnn/simplestl.h	/^    bool empty() const$/;"	f	struct:std::vector	access:public	signature:() const
std::vector::end	./include/ncnn/simplestl.h	/^    T* end() const$/;"	f	struct:std::vector	access:public	signature:() const
std::vector::erase	./include/ncnn/simplestl.h	/^    T* erase(T* pos)$/;"	f	struct:std::vector	access:public	signature:(T* pos)
std::vector::insert	./include/ncnn/simplestl.h	/^    void insert(T* pos, T* b, T* e)$/;"	f	struct:std::vector	access:public	signature:(T* pos, T* b, T* e)
std::vector::operator =	./include/ncnn/simplestl.h	/^    vector& operator=(const vector& v)$/;"	f	struct:std::vector	access:public	signature:(const vector& v)
std::vector::operator []	./include/ncnn/simplestl.h	/^    T& operator[](size_t i) const$/;"	f	struct:std::vector	access:public	signature:(size_t i) const
std::vector::push_back	./include/ncnn/simplestl.h	/^    void push_back(const T& t)$/;"	f	struct:std::vector	access:public	signature:(const T& t)
std::vector::resize	./include/ncnn/simplestl.h	/^    void resize(const size_t new_size, const T& value = T())$/;"	f	struct:std::vector	access:public	signature:(const size_t new_size, const T& value = T())
std::vector::size	./include/ncnn/simplestl.h	/^    size_t size() const$/;"	f	struct:std::vector	access:public	signature:() const
std::vector::size_	./include/ncnn/simplestl.h	/^    size_t size_;$/;"	m	struct:std::vector	access:protected
std::vector::try_alloc	./include/ncnn/simplestl.h	/^    void try_alloc(size_t new_size)$/;"	f	struct:std::vector	access:protected	signature:(size_t new_size)
std::vector::vector	./include/ncnn/simplestl.h	/^    vector()$/;"	f	struct:std::vector	access:public	signature:()
std::vector::vector	./include/ncnn/simplestl.h	/^    vector(const size_t new_size, const T& value = T())$/;"	f	struct:std::vector	access:public	signature:(const size_t new_size, const T& value = T())
std::vector::vector	./include/ncnn/simplestl.h	/^    vector(const vector& v)$/;"	f	struct:std::vector	access:public	signature:(const vector& v)
std::vector::~vector	./include/ncnn/simplestl.h	/^    ~vector()$/;"	f	struct:std::vector	access:public	signature:()
stencilLoadOp	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentLoadOp stencilLoadOp;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
stencilStoreOp	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentStoreOp stencilStoreOp;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
storageBuffer8BitAccess	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 storageBuffer8BitAccess;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
storagePushConstant8	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 storagePushConstant8;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
storeOp	./include/ncnn/vulkan_header_fix.h	/^    VkAttachmentStoreOp storeOp;$/;"	m	struct:VkAttachmentDescription2KHR	access:public
string	./include/ncnn/simplestl.h	/^    string()$/;"	f	struct:std::string	access:public	signature:()
string	./include/ncnn/simplestl.h	/^    string(const char* str)$/;"	f	struct:std::string	access:public	signature:(const char* str)
string	./include/ncnn/simplestl.h	/^struct NCNN_EXPORT string : public vector<char>$/;"	s	namespace:std	inherits:vector
subgroupSize	./include/ncnn/vulkan_header_fix.h	/^    uint32_t subgroupSize;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
subgroup_size	./include/ncnn/gpu.h	/^    uint32_t subgroup_size() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
submit_and_wait	./include/ncnn/command.h	/^    int submit_and_wait();$/;"	p	class:ncnn::VkCompute	access:public	signature:()
submit_and_wait	./include/ncnn/command.h	/^    int submit_and_wait();$/;"	p	class:ncnn::VkTransfer	access:public	signature:()
subpassCount	./include/ncnn/vulkan_header_fix.h	/^    uint32_t subpassCount;$/;"	m	struct:VkRenderPassCreateInfo2KHR	access:public
substract_mean_normalize	./include/ncnn/mat.h	/^    void substract_mean_normalize(const float* mean_vals, const float* norm_vals);$/;"	p	class:ncnn::Mat	access:public	signature:(const float* mean_vals, const float* norm_vals)
support_VK_ANDROID_external_memory_android_hardware_buffer	./include/ncnn/gpu.h	/^    int support_VK_ANDROID_external_memory_android_hardware_buffer() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_EXT_descriptor_indexing	./include/ncnn/gpu.h	/^    int support_VK_EXT_descriptor_indexing() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_EXT_memory_budget	./include/ncnn/gpu.h	/^    int support_VK_EXT_memory_budget() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_EXT_queue_family_foreign	./include/ncnn/gpu.h	/^    int support_VK_EXT_queue_family_foreign() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_16bit_storage	./include/ncnn/gpu.h	/^    int support_VK_KHR_16bit_storage() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_8bit_storage	./include/ncnn/gpu.h	/^    int support_VK_KHR_8bit_storage() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_bind_memory2	./include/ncnn/gpu.h	/^    int support_VK_KHR_bind_memory2() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_create_renderpass2	./include/ncnn/gpu.h	/^    int support_VK_KHR_create_renderpass2() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_dedicated_allocation	./include/ncnn/gpu.h	/^    int support_VK_KHR_dedicated_allocation() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_descriptor_update_template	./include/ncnn/gpu.h	/^    int support_VK_KHR_descriptor_update_template() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_external_memory	./include/ncnn/gpu.h	/^    int support_VK_KHR_external_memory() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_get_memory_requirements2	./include/ncnn/gpu.h	/^    int support_VK_KHR_get_memory_requirements2() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_maintenance1	./include/ncnn/gpu.h	/^    int support_VK_KHR_maintenance1() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_maintenance2	./include/ncnn/gpu.h	/^    int support_VK_KHR_maintenance2() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_maintenance3	./include/ncnn/gpu.h	/^    int support_VK_KHR_maintenance3() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_multiview	./include/ncnn/gpu.h	/^    int support_VK_KHR_multiview() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_push_descriptor	./include/ncnn/gpu.h	/^    int support_VK_KHR_push_descriptor() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_sampler_ycbcr_conversion	./include/ncnn/gpu.h	/^    int support_VK_KHR_sampler_ycbcr_conversion() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_shader_float16_int8	./include/ncnn/gpu.h	/^    int support_VK_KHR_shader_float16_int8() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_shader_float_controls	./include/ncnn/gpu.h	/^    int support_VK_KHR_shader_float_controls() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_storage_buffer_storage_class	./include/ncnn/gpu.h	/^    int support_VK_KHR_storage_buffer_storage_class() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_KHR_swapchain	./include/ncnn/gpu.h	/^    int support_VK_KHR_swapchain() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_VK_NV_cooperative_matrix	./include/ncnn/gpu.h	/^    int support_VK_NV_cooperative_matrix() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_bf16_storage	./include/ncnn/layer.h	/^    bool support_bf16_storage;$/;"	m	class:ncnn::Layer	access:public
support_cooperative_matrix	./include/ncnn/gpu.h	/^    bool support_cooperative_matrix() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_cooperative_matrix_16_8_8	./include/ncnn/gpu.h	/^    bool support_cooperative_matrix_16_8_8() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_fp16_arithmetic	./include/ncnn/gpu.h	/^    bool support_fp16_arithmetic() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_fp16_packed	./include/ncnn/gpu.h	/^    bool support_fp16_packed() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_fp16_storage	./include/ncnn/gpu.h	/^    bool support_fp16_storage() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_fp16_storage	./include/ncnn/layer.h	/^    bool support_fp16_storage;$/;"	m	class:ncnn::Layer	access:public
support_image_storage	./include/ncnn/layer.h	/^    bool support_image_storage;$/;"	m	class:ncnn::Layer	access:public
support_inplace	./include/ncnn/layer.h	/^    bool support_inplace;$/;"	m	class:ncnn::Layer	access:public
support_int8_arithmetic	./include/ncnn/gpu.h	/^    bool support_int8_arithmetic() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_int8_packed	./include/ncnn/gpu.h	/^    bool support_int8_packed() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_int8_storage	./include/ncnn/gpu.h	/^    bool support_int8_storage() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_int8_storage	./include/ncnn/layer.h	/^    bool support_int8_storage;$/;"	m	class:ncnn::Layer	access:public
support_packing	./include/ncnn/layer.h	/^    bool support_packing;$/;"	m	class:ncnn::Layer	access:public
support_reserved_0	./include/ncnn/layer.h	/^    bool support_reserved_0;$/;"	m	class:ncnn::Layer	access:public
support_reserved_00	./include/ncnn/layer.h	/^    bool support_reserved_00;$/;"	m	class:ncnn::Layer	access:public
support_reserved_1	./include/ncnn/layer.h	/^    bool support_reserved_1;$/;"	m	class:ncnn::Layer	access:public
support_reserved_10	./include/ncnn/layer.h	/^    bool support_reserved_10;$/;"	m	class:ncnn::Layer	access:public
support_reserved_11	./include/ncnn/layer.h	/^    bool support_reserved_11;$/;"	m	class:ncnn::Layer	access:public
support_reserved_12	./include/ncnn/layer.h	/^    bool support_reserved_12;$/;"	m	class:ncnn::Layer	access:public
support_reserved_13	./include/ncnn/layer.h	/^    bool support_reserved_13;$/;"	m	class:ncnn::Layer	access:public
support_reserved_2	./include/ncnn/layer.h	/^    bool support_reserved_2;$/;"	m	class:ncnn::Layer	access:public
support_reserved_3	./include/ncnn/layer.h	/^    bool support_reserved_3;$/;"	m	class:ncnn::Layer	access:public
support_reserved_4	./include/ncnn/layer.h	/^    bool support_reserved_4;$/;"	m	class:ncnn::Layer	access:public
support_reserved_5	./include/ncnn/layer.h	/^    bool support_reserved_5;$/;"	m	class:ncnn::Layer	access:public
support_reserved_6	./include/ncnn/layer.h	/^    bool support_reserved_6;$/;"	m	class:ncnn::Layer	access:public
support_reserved_7	./include/ncnn/layer.h	/^    bool support_reserved_7;$/;"	m	class:ncnn::Layer	access:public
support_reserved_8	./include/ncnn/layer.h	/^    bool support_reserved_8;$/;"	m	class:ncnn::Layer	access:public
support_reserved_9	./include/ncnn/layer.h	/^    bool support_reserved_9;$/;"	m	class:ncnn::Layer	access:public
support_subgroup_ballot	./include/ncnn/gpu.h	/^    bool support_subgroup_ballot() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_subgroup_basic	./include/ncnn/gpu.h	/^    bool support_subgroup_basic() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_subgroup_shuffle	./include/ncnn/gpu.h	/^    bool support_subgroup_shuffle() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_subgroup_vote	./include/ncnn/gpu.h	/^    bool support_subgroup_vote() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
support_tensor_storage	./include/ncnn/layer.h	/^    bool support_tensor_storage;$/;"	m	class:ncnn::Layer	access:public
support_vulkan	./include/ncnn/layer.h	/^    bool support_vulkan;$/;"	m	class:ncnn::Layer	access:public
support_ycbcr_conversion	./include/ncnn/gpu.h	/^    bool support_ycbcr_conversion() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
supported	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 supported;$/;"	m	struct:VkDescriptorSetLayoutSupport	access:public
supportedOperations	./include/ncnn/vulkan_header_fix.h	/^    VkSubgroupFeatureFlags supportedOperations;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
supportedStages	./include/ncnn/vulkan_header_fix.h	/^    VkShaderStageFlags supportedStages;$/;"	m	struct:VkPhysicalDeviceSubgroupProperties	access:public
swap	./include/ncnn/simplestl.h	/^void swap(T& a, T& b)$/;"	f	namespace:std	signature:(T& a, T& b)
tail_	./include/ncnn/simplestl.h	/^    node<T>* tail_;$/;"	m	struct:std::list	access:protected
test_fast_yolov2	./src/FastestDet.cpp	/^void test_fast_yolov2(void)$/;"	f	signature:(void)
timestamp_period	./include/ncnn/gpu.h	/^    float timestamp_period() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
to_android_bitmap	./include/ncnn/mat.h	/^    void to_android_bitmap(JNIEnv* env, jobject bitmap, int type_from) const;$/;"	p	class:ncnn::Mat	access:public	signature:(JNIEnv* env, jobject bitmap, int type_from) const
to_pixels	./include/ncnn/mat.h	/^    void to_pixels(unsigned char* pixels, int type) const;$/;"	p	class:ncnn::Mat	access:public	signature:(unsigned char* pixels, int type) const
to_pixels	./include/ncnn/mat.h	/^    void to_pixels(unsigned char* pixels, int type, int stride) const;$/;"	p	class:ncnn::Mat	access:public	signature:(unsigned char* pixels, int type, int stride) const
to_pixels_resize	./include/ncnn/mat.h	/^    void to_pixels_resize(unsigned char* pixels, int type, int target_width, int target_height) const;$/;"	p	class:ncnn::Mat	access:public	signature:(unsigned char* pixels, int type, int target_width, int target_height) const
to_pixels_resize	./include/ncnn/mat.h	/^    void to_pixels_resize(unsigned char* pixels, int type, int target_width, int target_height, int target_stride) const;$/;"	p	class:ncnn::Mat	access:public	signature:(unsigned char* pixels, int type, int target_width, int target_height, int target_stride) const
top_shapes	./include/ncnn/layer.h	/^    std::vector<Mat> top_shapes;$/;"	m	class:ncnn::Layer	access:public
tops	./include/ncnn/layer.h	/^    std::vector<int> tops;$/;"	m	class:ncnn::Layer	access:public
total	./include/ncnn/mat.h	/^    size_t total() const;$/;"	p	class:ncnn::Mat	access:public	signature:() const
total	./include/ncnn/mat.h	/^    size_t total() const;$/;"	p	class:ncnn::VkImageMat	access:public	signature:() const
total	./include/ncnn/mat.h	/^    size_t total() const;$/;"	p	class:ncnn::VkMat	access:public	signature:() const
total	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t Mat::total() const$/;"	f	class:ncnn::Mat	signature:() const
total	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t VkImageMat::total() const$/;"	f	class:ncnn::VkImageMat	signature:() const
total	./include/ncnn/mat.h	/^NCNN_FORCEINLINE size_t VkMat::total() const$/;"	f	class:ncnn::VkMat	signature:() const
total	./include/ncnn/simpleocv.h	/^    size_t total() const$/;"	f	struct:cv::Mat	access:public	signature:() const
track_id	./src/FastestDet.cpp	/^    int track_id;$/;"	m	struct:Object	file:	access:public
transfer_queue_count	./include/ncnn/gpu.h	/^    uint32_t transfer_queue_count() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
transfer_queue_family_index	./include/ncnn/gpu.h	/^    uint32_t transfer_queue_family_index() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
try_alloc	./include/ncnn/simplestl.h	/^    void try_alloc(size_t new_size)$/;"	f	struct:std::vector	access:protected	signature:(size_t new_size)
type	./include/ncnn/gpu.h	/^    int type() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
type	./include/ncnn/layer.h	/^    std::string type;$/;"	m	class:ncnn::Layer	access:public
type	./include/ncnn/paramdict.h	/^    int type(int id) const;$/;"	p	class:ncnn::ParamDict	access:public	signature:(int id) const
type	./include/ncnn/simpleocv.h	/^    int type() const$/;"	f	struct:cv::Mat	access:public	signature:() const
type_to	./include/ncnn/pipeline.h	/^    int type_to;$/;"	m	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public
typeindex	./include/ncnn/layer.h	/^    int typeindex;$/;"	m	class:ncnn::Layer	access:public
u32	./include/ncnn/mat.h	/^    uint32_t u32;$/;"	m	union:ncnn::vk_specialization_type	access:public
uchar	./include/ncnn/simpleocv.h	/^typedef unsigned char uchar;$/;"	t
uint	./include/ncnn/simpleocv.h	/^typedef unsigned int uint;$/;"	t
unified_compute_transfer_queue	./include/ncnn/gpu.h	/^    bool unified_compute_transfer_queue() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
uniformAndStorageBuffer8BitAccess	./include/ncnn/vulkan_header_fix.h	/^    VkBool32 uniformAndStorageBuffer8BitAccess;$/;"	m	struct:VkPhysicalDevice8BitStorageFeaturesKHR	access:public
unlock	./include/ncnn/platform.h	/^    void unlock() { ReleaseSRWLockExclusive(&srwlock); }$/;"	f	class:ncnn::Mutex	access:public	signature:()
upload_model	./include/ncnn/layer.h	/^    virtual int upload_model(VkTransfer& cmd, const Option& opt);$/;"	p	class:ncnn::Layer	access:public	signature:(VkTransfer& cmd, const Option& opt)
use_bf16_storage	./include/ncnn/option.h	/^    bool use_bf16_storage;$/;"	m	class:ncnn::Option	access:public
use_cooperative_matrix	./include/ncnn/option.h	/^    bool use_cooperative_matrix;$/;"	m	class:ncnn::Option	access:public
use_fp16_arithmetic	./include/ncnn/option.h	/^    bool use_fp16_arithmetic;$/;"	m	class:ncnn::Option	access:public
use_fp16_packed	./include/ncnn/option.h	/^    bool use_fp16_packed;$/;"	m	class:ncnn::Option	access:public
use_fp16_storage	./include/ncnn/option.h	/^    bool use_fp16_storage;$/;"	m	class:ncnn::Option	access:public
use_image_storage	./include/ncnn/option.h	/^    bool use_image_storage;$/;"	m	class:ncnn::Option	access:public
use_int8_arithmetic	./include/ncnn/option.h	/^    bool use_int8_arithmetic;$/;"	m	class:ncnn::Option	access:public
use_int8_inference	./include/ncnn/option.h	/^    bool use_int8_inference;$/;"	m	class:ncnn::Option	access:public
use_int8_packed	./include/ncnn/option.h	/^    bool use_int8_packed;$/;"	m	class:ncnn::Option	access:public
use_int8_storage	./include/ncnn/option.h	/^    bool use_int8_storage;$/;"	m	class:ncnn::Option	access:public
use_local_pool_allocator	./include/ncnn/option.h	/^    bool use_local_pool_allocator;$/;"	m	class:ncnn::Option	access:public
use_packing_layout	./include/ncnn/option.h	/^    bool use_packing_layout;$/;"	m	class:ncnn::Option	access:public
use_reserved_0	./include/ncnn/option.h	/^    bool use_reserved_0;$/;"	m	class:ncnn::Option	access:public
use_reserved_10	./include/ncnn/option.h	/^    bool use_reserved_10;$/;"	m	class:ncnn::Option	access:public
use_reserved_11	./include/ncnn/option.h	/^    bool use_reserved_11;$/;"	m	class:ncnn::Option	access:public
use_reserved_3	./include/ncnn/option.h	/^    bool use_reserved_3;$/;"	m	class:ncnn::Option	access:public
use_reserved_4	./include/ncnn/option.h	/^    bool use_reserved_4;$/;"	m	class:ncnn::Option	access:public
use_reserved_5	./include/ncnn/option.h	/^    bool use_reserved_5;$/;"	m	class:ncnn::Option	access:public
use_reserved_6	./include/ncnn/option.h	/^    bool use_reserved_6;$/;"	m	class:ncnn::Option	access:public
use_reserved_7	./include/ncnn/option.h	/^    bool use_reserved_7;$/;"	m	class:ncnn::Option	access:public
use_reserved_8	./include/ncnn/option.h	/^    bool use_reserved_8;$/;"	m	class:ncnn::Option	access:public
use_reserved_9	./include/ncnn/option.h	/^    bool use_reserved_9;$/;"	m	class:ncnn::Option	access:public
use_sgemm_convolution	./include/ncnn/option.h	/^    bool use_sgemm_convolution;$/;"	m	class:ncnn::Option	access:public
use_shader_local_memory	./include/ncnn/option.h	/^    bool use_shader_local_memory;$/;"	m	class:ncnn::Option	access:public
use_shader_pack8	./include/ncnn/option.h	/^    bool use_shader_pack8;$/;"	m	class:ncnn::Option	access:public
use_subgroup_ballot	./include/ncnn/option.h	/^    bool use_subgroup_ballot;$/;"	m	class:ncnn::Option	access:public
use_subgroup_basic	./include/ncnn/option.h	/^    bool use_subgroup_basic;$/;"	m	class:ncnn::Option	access:public
use_subgroup_shuffle	./include/ncnn/option.h	/^    bool use_subgroup_shuffle;$/;"	m	class:ncnn::Option	access:public
use_subgroup_vote	./include/ncnn/option.h	/^    bool use_subgroup_vote;$/;"	m	class:ncnn::Option	access:public
use_tensor_storage	./include/ncnn/option.h	/^    bool use_tensor_storage;$/;"	m	class:ncnn::Option	access:public
use_vulkan_compute	./include/ncnn/option.h	/^    bool use_vulkan_compute;$/;"	m	class:ncnn::Option	access:public
use_winograd_convolution	./include/ncnn/option.h	/^    bool use_winograd_convolution;$/;"	m	class:ncnn::Option	access:public
userdata	./include/ncnn/c_api.h	/^    void* userdata;$/;"	m	struct:__ncnn_net_custom_layer_factory_t	access:public
userdata	./include/ncnn/layer.h	/^    void* userdata;$/;"	m	class:ncnn::Layer	access:public
userdata	./include/ncnn/layer.h	/^    void* userdata;$/;"	m	struct:ncnn::custom_layer_registry_entry	access:public
ushort	./include/ncnn/simpleocv.h	/^typedef unsigned short ushort;$/;"	t
v	./include/ncnn/simpleocv.h	/^    _Tp v[4];$/;"	m	struct:cv::Scalar_	access:public
v4l2_dev_init	./src/FastestDet.cpp	/^static int v4l2_dev_init(const char *device)$/;"	f	file:	signature:(const char *device)
v4l2_enum_formats	./src/FastestDet.cpp	/^static void v4l2_enum_formats(void)$/;"	f	file:	signature:(void)
v4l2_fd	./src/FastestDet.cpp	/^static int v4l2_fd = -1;                \/\/摄像头设备文件描述符$/;"	v	file:
v4l2_init_buffer	./src/FastestDet.cpp	/^static int v4l2_init_buffer(void)$/;"	f	file:	signature:(void)
v4l2_print_formats	./src/FastestDet.cpp	/^static void v4l2_print_formats(void)$/;"	f	file:	signature:(void)
v4l2_read_data	./src/FastestDet.cpp	/^static void v4l2_read_data(void)$/;"	f	file:	signature:(void)
v4l2_set_format	./src/FastestDet.cpp	/^static int v4l2_set_format(void)$/;"	f	file:	signature:(void)
v4l2_stream_on	./src/FastestDet.cpp	/^static int v4l2_stream_on(void)$/;"	f	file:	signature:(void)
vcvt_bf16_f32	./include/ncnn/mat.h	/^NCNN_EXPORT NCNN_FORCEINLINE uint16x4_t vcvt_bf16_f32(float32x4_t _v)$/;"	f	namespace:ncnn	signature:(float32x4_t _v)
vcvt_f32_bf16	./include/ncnn/mat.h	/^NCNN_EXPORT NCNN_FORCEINLINE float32x4_t vcvt_f32_bf16(uint16x4_t _v)$/;"	f	namespace:ncnn	signature:(uint16x4_t _v)
vector	./include/ncnn/simplestl.h	/^    vector()$/;"	f	struct:std::vector	access:public	signature:()
vector	./include/ncnn/simplestl.h	/^    vector(const size_t new_size, const T& value = T())$/;"	f	struct:std::vector	access:public	signature:(const size_t new_size, const T& value = T())
vector	./include/ncnn/simplestl.h	/^    vector(const vector& v)$/;"	f	struct:std::vector	access:public	signature:(const vector& v)
vector	./include/ncnn/simplestl.h	/^struct vector$/;"	s	namespace:std
vendor_id	./include/ncnn/gpu.h	/^    uint32_t vendor_id() const;$/;"	p	class:ncnn::GpuInfo	access:public	signature:() const
viewMask	./include/ncnn/vulkan_header_fix.h	/^    uint32_t viewMask;$/;"	m	struct:VkSubpassDescription2KHR	access:public
viewOffset	./include/ncnn/vulkan_header_fix.h	/^    int32_t viewOffset;$/;"	m	struct:VkSubpassDependency2KHR	access:public
vkAcquireNextImageKHR	./include/ncnn/gpu.h	/^    PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkBindBufferMemory2KHR	./include/ncnn/gpu.h	/^    PFN_vkBindBufferMemory2KHR vkBindBufferMemory2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkBindImageMemory2KHR	./include/ncnn/gpu.h	/^    PFN_vkBindImageMemory2KHR vkBindImageMemory2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCmdBeginRenderPass2KHR	./include/ncnn/gpu.h	/^    PFN_vkCmdBeginRenderPass2KHR vkCmdBeginRenderPass2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCmdEndRenderPass2KHR	./include/ncnn/gpu.h	/^    PFN_vkCmdEndRenderPass2KHR vkCmdEndRenderPass2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCmdNextSubpass2KHR	./include/ncnn/gpu.h	/^    PFN_vkCmdNextSubpass2KHR vkCmdNextSubpass2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCmdPushDescriptorSetKHR	./include/ncnn/gpu.h	/^    PFN_vkCmdPushDescriptorSetKHR vkCmdPushDescriptorSetKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCmdPushDescriptorSetWithTemplateKHR	./include/ncnn/gpu.h	/^    PFN_vkCmdPushDescriptorSetWithTemplateKHR vkCmdPushDescriptorSetWithTemplateKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCreateDescriptorUpdateTemplateKHR	./include/ncnn/gpu.h	/^    PFN_vkCreateDescriptorUpdateTemplateKHR vkCreateDescriptorUpdateTemplateKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCreateRenderPass2KHR	./include/ncnn/gpu.h	/^    PFN_vkCreateRenderPass2KHR vkCreateRenderPass2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCreateSamplerYcbcrConversionKHR	./include/ncnn/gpu.h	/^    PFN_vkCreateSamplerYcbcrConversionKHR vkCreateSamplerYcbcrConversionKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkCreateSwapchainKHR	./include/ncnn/gpu.h	/^    PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkDestroyDescriptorUpdateTemplateKHR	./include/ncnn/gpu.h	/^    PFN_vkDestroyDescriptorUpdateTemplateKHR vkDestroyDescriptorUpdateTemplateKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkDestroySamplerYcbcrConversionKHR	./include/ncnn/gpu.h	/^    PFN_vkDestroySamplerYcbcrConversionKHR vkDestroySamplerYcbcrConversionKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkDestroySwapchainKHR	./include/ncnn/gpu.h	/^    PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkGetAndroidHardwareBufferPropertiesANDROID	./include/ncnn/gpu.h	/^    PFN_vkGetAndroidHardwareBufferPropertiesANDROID vkGetAndroidHardwareBufferPropertiesANDROID;$/;"	m	class:ncnn::VulkanDevice	access:public
vkGetBufferMemoryRequirements2KHR	./include/ncnn/gpu.h	/^    PFN_vkGetBufferMemoryRequirements2KHR vkGetBufferMemoryRequirements2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkGetDescriptorSetLayoutSupportKHR	./include/ncnn/gpu.h	/^    PFN_vkGetDescriptorSetLayoutSupportKHR vkGetDescriptorSetLayoutSupportKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkGetImageMemoryRequirements2KHR	./include/ncnn/gpu.h	/^    PFN_vkGetImageMemoryRequirements2KHR vkGetImageMemoryRequirements2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkGetImageSparseMemoryRequirements2KHR	./include/ncnn/gpu.h	/^    PFN_vkGetImageSparseMemoryRequirements2KHR vkGetImageSparseMemoryRequirements2KHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkGetMemoryAndroidHardwareBufferANDROID	./include/ncnn/gpu.h	/^    PFN_vkGetMemoryAndroidHardwareBufferANDROID vkGetMemoryAndroidHardwareBufferANDROID;$/;"	m	class:ncnn::VulkanDevice	access:public
vkGetSwapchainImagesKHR	./include/ncnn/gpu.h	/^    PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkQueuePresentKHR	./include/ncnn/gpu.h	/^    PFN_vkQueuePresentKHR vkQueuePresentKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkTrimCommandPoolKHR	./include/ncnn/gpu.h	/^    PFN_vkTrimCommandPoolKHR vkTrimCommandPoolKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vkUpdateDescriptorSetWithTemplateKHR	./include/ncnn/gpu.h	/^    PFN_vkUpdateDescriptorSetWithTemplateKHR vkUpdateDescriptorSetWithTemplateKHR;$/;"	m	class:ncnn::VulkanDevice	access:public
vk_constant_type	./include/ncnn/mat.h	/^union vk_constant_type$/;"	u	namespace:ncnn
vk_specialization_type	./include/ncnn/mat.h	/^union vk_specialization_type$/;"	u	namespace:ncnn
vkdev	./include/ncnn/allocator.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::VkAllocator	access:public
vkdev	./include/ncnn/command.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::VkCompute	access:protected
vkdev	./include/ncnn/command.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::VkTransfer	access:protected
vkdev	./include/ncnn/layer.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::Layer	access:public
vkdev	./include/ncnn/pipeline.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::Pipeline	access:public
vkdev	./include/ncnn/pipelinecache.h	/^    const VulkanDevice* vkdev;$/;"	m	class:ncnn::PipelineCache	access:protected
vkdevice	./include/ncnn/gpu.h	/^    VkDevice vkdevice() const;$/;"	p	class:ncnn::VulkanDevice	access:public	signature:() const
volatile	./build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
vulkan_device	./include/ncnn/net.h	/^    const VulkanDevice* vulkan_device() const;$/;"	p	class:ncnn::Net	access:public	signature:() const
w	./include/ncnn/mat.h	/^    int w;$/;"	m	class:ncnn::Mat	access:public
w	./include/ncnn/mat.h	/^    int w;$/;"	m	class:ncnn::VkImageMat	access:public
w	./include/ncnn/mat.h	/^    int w;$/;"	m	class:ncnn::VkMat	access:public
wait	./include/ncnn/platform.h	/^    void wait(Mutex& mutex) { SleepConditionVariableSRW(&condvar, &mutex.srwlock, INFINITE, 0); }$/;"	f	class:ncnn::ConditionVariable	access:public	signature:(Mutex& mutex)
waitKey	./include/ncnn/simpleocv.h	/^NCNN_EXPORT int waitKey(int delay = 0);$/;"	p	namespace:cv	signature:(int delay = 0)
warpaffine_bilinear_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0)
warpaffine_bilinear_c1	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
warpaffine_bilinear_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0)
warpaffine_bilinear_c2	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
warpaffine_bilinear_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0)
warpaffine_bilinear_c3	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
warpaffine_bilinear_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0)
warpaffine_bilinear_c4	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
warpaffine_bilinear_yuv420sp	./include/ncnn/mat.h	/^NCNN_EXPORT void warpaffine_bilinear_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);$/;"	p	namespace:ncnn	signature:(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0)
width	./include/ncnn/allocator.h	/^    int width() const;$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:() const
width	./include/ncnn/allocator.h	/^    int width;$/;"	m	class:ncnn::VkImageMemory	access:public
width	./include/ncnn/simpleocv.h	/^    _Tp width;$/;"	m	struct:cv::Rect_	access:public
width	./include/ncnn/simpleocv.h	/^    _Tp width;$/;"	m	struct:cv::Size_	access:public
width	./src/FastestDet.cpp	/^static int width;                       \/\/LCD宽度$/;"	v	file:
workspace_allocator	./include/ncnn/option.h	/^    Allocator* workspace_allocator;$/;"	m	class:ncnn::Option	access:public
workspace_vkallocator	./include/ncnn/option.h	/^    VkAllocator* workspace_vkallocator;$/;"	m	class:ncnn::Option	access:public
x	./include/ncnn/simpleocv.h	/^    _Tp x;$/;"	m	struct:cv::Point_	access:public
x	./include/ncnn/simpleocv.h	/^    _Tp x;$/;"	m	struct:cv::Rect_	access:public
y	./include/ncnn/simpleocv.h	/^    _Tp y;$/;"	m	struct:cv::Point_	access:public
y	./include/ncnn/simpleocv.h	/^    _Tp y;$/;"	m	struct:cv::Rect_	access:public
yuv420sp2rgb	./include/ncnn/mat.h	/^NCNN_EXPORT void yuv420sp2rgb(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);$/;"	p	namespace:ncnn	signature:(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb)
yuv420sp2rgb_half	./include/ncnn/mat.h	/^NCNN_EXPORT void yuv420sp2rgb_half(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);$/;"	p	namespace:ncnn	signature:(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb)
yuv420sp2rgb_nv12	./include/ncnn/mat.h	/^NCNN_EXPORT void yuv420sp2rgb_nv12(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);$/;"	p	namespace:ncnn	signature:(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb)
~Allocator	./include/ncnn/allocator.h	/^    virtual ~Allocator();$/;"	p	class:ncnn::Allocator	access:public	signature:()
~ConditionVariable	./include/ncnn/platform.h	/^    ~ConditionVariable() {}$/;"	f	class:ncnn::ConditionVariable	access:public	signature:()
~DataReader	./include/ncnn/datareader.h	/^    virtual ~DataReader();$/;"	p	class:ncnn::DataReader	access:public	signature:()
~DataReaderFromAndroidAsset	./include/ncnn/datareader.h	/^    virtual ~DataReaderFromAndroidAsset();$/;"	p	class:ncnn::DataReaderFromAndroidAsset	access:public	signature:()
~DataReaderFromMemory	./include/ncnn/datareader.h	/^    virtual ~DataReaderFromMemory();$/;"	p	class:ncnn::DataReaderFromMemory	access:public	signature:()
~DataReaderFromStdio	./include/ncnn/datareader.h	/^    virtual ~DataReaderFromStdio();$/;"	p	class:ncnn::DataReaderFromStdio	access:public	signature:()
~Extractor	./include/ncnn/net.h	/^    virtual ~Extractor();$/;"	p	class:ncnn::Extractor	access:public	signature:()
~GpuInfo	./include/ncnn/gpu.h	/^    virtual ~GpuInfo();$/;"	p	class:ncnn::GpuInfo	access:public	signature:()
~ImportAndroidHardwareBufferPipeline	./include/ncnn/pipeline.h	/^    virtual ~ImportAndroidHardwareBufferPipeline();$/;"	p	class:ncnn::ImportAndroidHardwareBufferPipeline	access:public	signature:()
~Layer	./include/ncnn/layer.h	/^    virtual ~Layer();$/;"	p	class:ncnn::Layer	access:public	signature:()
~Mat	./include/ncnn/mat.h	/^    ~Mat();$/;"	p	class:ncnn::Mat	access:public	signature:()
~Mat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE Mat::~Mat()$/;"	f	class:ncnn::Mat	signature:()
~Mat	./include/ncnn/simpleocv.h	/^    ~Mat()$/;"	f	struct:cv::Mat	access:public	signature:()
~ModelBin	./include/ncnn/modelbin.h	/^    virtual ~ModelBin();$/;"	p	class:ncnn::ModelBin	access:public	signature:()
~ModelBinFromDataReader	./include/ncnn/modelbin.h	/^    virtual ~ModelBinFromDataReader();$/;"	p	class:ncnn::ModelBinFromDataReader	access:public	signature:()
~ModelBinFromMatArray	./include/ncnn/modelbin.h	/^    virtual ~ModelBinFromMatArray();$/;"	p	class:ncnn::ModelBinFromMatArray	access:public	signature:()
~Mutex	./include/ncnn/platform.h	/^    ~Mutex() {}$/;"	f	class:ncnn::Mutex	access:public	signature:()
~MutexLockGuard	./include/ncnn/platform.h	/^    ~MutexLockGuard() { mutex.unlock(); }$/;"	f	class:ncnn::MutexLockGuard	access:public	signature:()
~Net	./include/ncnn/net.h	/^    virtual ~Net();$/;"	p	class:ncnn::Net	access:public	signature:()
~ParamDict	./include/ncnn/paramdict.h	/^    virtual ~ParamDict();$/;"	p	class:ncnn::ParamDict	access:public	signature:()
~Pipeline	./include/ncnn/pipeline.h	/^    virtual ~Pipeline();$/;"	p	class:ncnn::Pipeline	access:public	signature:()
~PipelineCache	./include/ncnn/pipelinecache.h	/^    virtual ~PipelineCache();$/;"	p	class:ncnn::PipelineCache	access:public	signature:()
~PoolAllocator	./include/ncnn/allocator.h	/^    ~PoolAllocator();$/;"	p	class:ncnn::PoolAllocator	access:public	signature:()
~Thread	./include/ncnn/platform.h	/^    ~Thread() {}$/;"	f	class:ncnn::Thread	access:public	signature:()
~ThreadLocalStorage	./include/ncnn/platform.h	/^    ~ThreadLocalStorage() { TlsFree(key); }$/;"	f	class:ncnn::ThreadLocalStorage	access:public	signature:()
~UnlockedPoolAllocator	./include/ncnn/allocator.h	/^    ~UnlockedPoolAllocator();$/;"	p	class:ncnn::UnlockedPoolAllocator	access:public	signature:()
~VkAllocator	./include/ncnn/allocator.h	/^    virtual ~VkAllocator();$/;"	p	class:ncnn::VkAllocator	access:public	signature:()
~VkAndroidHardwareBufferImageAllocator	./include/ncnn/allocator.h	/^    virtual ~VkAndroidHardwareBufferImageAllocator();$/;"	p	class:ncnn::VkAndroidHardwareBufferImageAllocator	access:public	signature:()
~VkBlobAllocator	./include/ncnn/allocator.h	/^    virtual ~VkBlobAllocator();$/;"	p	class:ncnn::VkBlobAllocator	access:public	signature:()
~VkCompute	./include/ncnn/command.h	/^    virtual ~VkCompute();$/;"	p	class:ncnn::VkCompute	access:public	signature:()
~VkImageMat	./include/ncnn/mat.h	/^    ~VkImageMat();$/;"	p	class:ncnn::VkImageMat	access:public	signature:()
~VkImageMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkImageMat::~VkImageMat()$/;"	f	class:ncnn::VkImageMat	signature:()
~VkMat	./include/ncnn/mat.h	/^    ~VkMat();$/;"	p	class:ncnn::VkMat	access:public	signature:()
~VkMat	./include/ncnn/mat.h	/^NCNN_FORCEINLINE VkMat::~VkMat()$/;"	f	class:ncnn::VkMat	signature:()
~VkStagingAllocator	./include/ncnn/allocator.h	/^    virtual ~VkStagingAllocator();$/;"	p	class:ncnn::VkStagingAllocator	access:public	signature:()
~VkTransfer	./include/ncnn/command.h	/^    virtual ~VkTransfer();$/;"	p	class:ncnn::VkTransfer	access:public	signature:()
~VkWeightAllocator	./include/ncnn/allocator.h	/^    virtual ~VkWeightAllocator();$/;"	p	class:ncnn::VkWeightAllocator	access:public	signature:()
~VkWeightStagingAllocator	./include/ncnn/allocator.h	/^    virtual ~VkWeightStagingAllocator();$/;"	p	class:ncnn::VkWeightStagingAllocator	access:public	signature:()
~VulkanDevice	./include/ncnn/gpu.h	/^    ~VulkanDevice();$/;"	p	class:ncnn::VulkanDevice	access:public	signature:()
~iter_list	./include/ncnn/simplestl.h	/^    ~iter_list()$/;"	f	struct:std::iter_list	access:public	signature:()
~list	./include/ncnn/simplestl.h	/^    ~list()$/;"	f	struct:std::list	access:public	signature:()
~vector	./include/ncnn/simplestl.h	/^    ~vector()$/;"	f	struct:std::vector	access:public	signature:()
